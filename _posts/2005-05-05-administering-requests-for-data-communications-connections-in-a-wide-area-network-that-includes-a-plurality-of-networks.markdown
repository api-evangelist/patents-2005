---

title: Administering requests for data communications connections in a wide area network that includes a plurality of networks
abstract: Methods, system, and products are disclosed for administering requests for data communications connections in a wide area network that include receiving, according to a data communications protocol, by a receiver from a sender, a request for a data communications connection, wherein the sender has a network address on a sender's network and the receiver has a network address on a receiver's network; characterizing the sender as local with respect to the receiver's network if the sender's network is the receiver's network; characterizing the sender as remote with respect to the receiver's network if the sender's network is not the receiver's network; and responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender's network with respect to the receiver's network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08204027&OS=08204027&RS=08204027
owner: International Business Machines Corporation
number: 08204027
owner_city: Armonk
owner_country: US
publication_date: 20050505
---
The field of the invention is data processing or more specifically methods systems and products for administering requests for data communications connections in a wide area network that includes a plurality of networks.

Standard response messages in data communications protocols by the nature of their standard replies yield information useful to an attacker. Sending a reset message when an attacker requests a connection to a closed port advises the attacker that a communication module is active on the network address for example. A synchronize message advises the attacker not only that a data communications module exists at the network address but also that an open port is active at that address. The attacker may or may not be able to effect a connection through the intended victim s security restraints but the attacker now knows something is there to be attacked. Security restraints are typically applied at the application level of the protocol stack. Hostile access of data communications ports cannot currently be mitigated at the level of the transmission protocol or the network protocol.

Methods systems and products are described that operate generally to enable an application to instruct a data communications module in the transmission protocol layer to security constraints according to a characterization of a sender as local or remote with respect to a receiver s network location. More particularly methods systems and products are disclosed for administering requests for data communications connections in a wide area network that include receiving according to a data communications protocol by a receiver from a sender a request for a data communications connection wherein the sender has a network address on a sender s network and the receiver has a network address on a receiver s network characterizing the sender as local with respect to the receiver s network if the sender s network is the receiver s network characterizing the sender as remote with respect to the receiver s network if the sender s network is not the receiver s network and responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender s network with respect to the receiver s network. Typical embodiments also include setting the value of the location response flag by an application program s subroutine call through an application programming interface for the data communications protocol.

Responding to the request may include dropping the request if the value of the location response flag is set to local and the sender is characterized as remote. Responding to the request may include dropping the request if the value of the location response flag is set to remote and the sender is characterized as local. In many embodiments the receiver has a receiver port having a state and responding to the request may include responding to the request in dependence upon the receiver port state. When the port is open on the receiver responding to the request may be carried out by accepting the request if the value of the location response flag is set to local and the sender is characterized as local. When the port is closed on the receiver responding to the request may include denying the request if the value of the location response flag is set to local and the sender is characterized as local. When the port is open on the receiver responding to the request may include accepting the request if the value of the location response flag is set to remote and the sender is characterized as remote. When the port is closed on the receiver responding to the request may be carried out by denying the request if the value of the location response flag is set to remote and the sender is characterized as remote.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

The present invention is described to a large extent in this specification in terms of methods for administering requests for data communications connections in a wide area network that includes a plurality of networks. Persons skilled in the art however will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention. Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention including for example systems comprised of processing units and arithmetic logic circuits coupled to computer memory which systems have the capability of storing in computer memory which computer memory includes electronic circuits configured to store data and program instructions programmed steps of the method of the invention for execution by a processing unit.

The invention also may be embodied in a computer program product such as a diskette or other recording medium for use with any suitable data processing system. Embodiments of a computer program product may be implemented by use of any recording medium for machine readable information including magnetic media optical media or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

Exemplary methods systems and products for administering requests for data communications connections according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for administering requests for data communications connections according to embodiments of the present invention. The system of operates generally to administer requests for data communications connections according to embodiments of the present invention receiving by a receiver from a sender a request for a data communications connection where the sender has a network address on a sender s network and the receiver has a network address on a receiver s network characterizing the sender as local or remote with respect to the receiver s network and responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender s network with respect to the receiver s network.

The system of includes a wide area network WAN that includes several networks . A WAN is a computer network that spans a relatively large geographical area. Computers connected to a wide area network are often connected through public networks telephone networks internetworks and so on. They can also be connected through leased lines or satellites. The largest WAN in existence is the Internet a network of computers that carry out data communications according to the Internet Protocol IP . A WAN typically includes two or more other networks sometimes referred to as networks or local area networks LANs but which are referred to generally in this specification as networks. More specifically a network as the term is used in this specification includes nodes having the same network address. That is the network portion of the two addresses is the same including any subnet portion of the address but excluding the node portion of the network address.

A portion of an address identifies the network to which a node is connected. In a 32 bit class A address the leftmost 8 bits identify the network and the rightmost 24 bits identify a particular node on that network. In a 32 bit class B address the leftmost 16 bits identify the network and the rightmost 16 bits identify a particular node on that network. In a 32 bit class C address the leftmost 24 bits identify the network and the rightmost 8 bits identify a particular node on that network.

The idea of making the boundary between the network and node more flexible is known as subnetting. Each node has a network mask used to identify its network. Each network mask typically is made of some number of contiguous binary 1 s beginning at the top of the address eight 1 s for a class A network sixteen for class B and so on. Subnetting allows a mask with more that eight 1 s for class A more than sixteen 1 s for class B and more than twenty four 1 s for class C.

The portion of a class A address that has 1 s in the bottom three octets of its mask may be called a subnet. For a class B address the 1 bits in the bottom two octets of the address mask correspond to the subnet. And for a class C address the 1 bits in the bottom octet correspond to the subnet. Addresses therefore may be viewed as having three fields a net number a subnet number and a node number. In a class B address for example the top two octets would be the net portion any bits in the bottom two octets corresponding to 1 s in the mask would be the subnet portion and the remainder of the bottom two octets would be the node portion of the address.

In this specification the term network corresponds to the portion of an address that corresponds to 1 s in an applicable mask regardless whether the address includes a subnet. For example therefore in this specification 

The system of includes a number of nodes connected for data processing in a network. A node is a computer coupled to a network for data communications. In Unix parlance a node is referred to as a host. RFC793 the original Transmission Control Protocol TCP specification from 1983 for example refers to nodes as hosts. The node terminology is somewhat more generic. Therefore node is the terminology used in this specification to refer to a computer on a network.

Each of the nodes of the system of may have a data communications module installed upon it capable of administering requests for data communications connections according to the present invention. The data processing system of includes servers connected to a wide area network WAN through wireline connections . Several other exemplary devices including a laptop a personal digital assistant PDA a personal computer and a network enabled mobile phone also connect to the WAN . In the example of laptop connects through a wireline connection to WAN and personal computer connects through a wireline connection to WAN . PDA connects through wireless link to WAN and mobile phone connects through wireless link to WAN . Servers may provide a wide variety of services through network to other network devices and that include for example HTTP or web services email services instant messaging service security services applications services and others as will occur to those of skill in the art.

In the system of any exemplary device and may function as a sender or a receiver of a data communications connection according to the present invention. In the terminology of this specification a sender is any node or process thereof capable of requesting a service or data provided by another node or process thereof. A physical device such as a server a laptop a PDA or a desktop can be a sender. An application running on a node that relies on communication with another node can also be a sender. Such applications include e mail clients FTP clients and so on. A receiver is a node or process thereof on an internet or other network that responds to requests or commands from a sender. Types of receivers include FTP servers IRC servers mail servers news servers web servers and so on. Any node or node process can function as a sender or a receiver the distinguishing feature being the function rather than the device or process. When a server receives a request for services from another network device and the server functions as a receiver and the other network device and functions as a sender. When a server responds to the network device and originating the service request the server functions as a sender and the other network device and functions as a receiver.

A sender may be characterized as local or remote depending on the sender s network location relative to a receiver. A sender having a network address on the network of the receiver may be characterized as local. A sender having a network address on a network other than the receiver s network may be characterized as remote. In the example of server and laptop are both connected to network the network portions of their addresses are the same. When laptop sends a connection request to server server may examine the sender s network address determine that the sender s network and the receiver s network are the same characterize the sender as local check the value of its location response flag and if the flag is to local accept the connection. If the flag was set to remote the receiver may drop the request without sending any response at all thereby denying a potential attacker any information whatsoever regarding the receiver. Similarly server on network upon receiving a connection request sent from personal computer a node on another network may characterize the sender as remote and if the receiver s location response flag is set to remote server on network will accept the connection. If the server s location response flag was set to local the server may drop the request without response.

The arrangement of nodes and network connections making up the exemplary system illustrated in is for explanation not for limitation. In fact systems for administering requests for data communications connections according to embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Systems for administering requests for data communications connections according to embodiments of the present invention may be connected as LANs WANs intranets internets the Internet webs the World Wide Web itself or other connections as will occur to those of skill in the art. Such networks are media that may be used to provide data communications connections between various nodes connected together within an overall data processing system. Networks in such data processing systems may support many data communications protocols including for example Transmission Control Protocol TCP Internet Protocol IP HyperText Transfer Protocol HTTP Wireless Access Protocol WAP Handheld Device Transport Protocol HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Administering requests for data communications connections in accordance with the present invention is generally implemented with computers that is with automated computing machinery. In the system of for example all the nodes servers and communications devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary computer useful in administering requests for data communications connections according to embodiments of the present invention. The computer of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a system bus to processor and to other components of the computer. Stored in RAM is an application program . Application programs useful in accordance with various embodiments of the present invention include browsers word processors spreadsheets database management systems email clients FTP clients TELNET clients proxy services and so on as will occur to those of skill in the art. Application program in the example of is shown in RAM but many components of such software typically are stored in non volatile memory also.

Also stored in RAM is an operating system . Operating systems useful in computers according to embodiments of the present invention include UNIX Linux Microsoft NT AIX IBM s i5 OS and others as will occur to those of skill in the art. Transport and network layer software components such as TCP IP clients and services are typically provided as components of operating systems including Microsoft Windows IBM s AIX Linux and so on.

Operating system includes a data communications module such as a TCP service. Data communications module of includes computer program instructions for administering requests for data communications connections according to embodiments of the present invention. Operating system and data communications module in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also.

Data communications module of provides one end of a data communications connection to application program through an API . In TCP parlance the endpoint of a data communications connection is a data structure called a socket. Two sockets form a data communications connection and each socket includes a port number and a network address for the respective data connection endpoint. Using the data communications connection a node s application program operating in the software layer of the OSI data communications has the ability to send information to an application program of another node without regard for how the information travels from one node on a network to another. For example a laptop s email client can send a request for new email messages to a mail server application through a socket to the TCP service on a laptop. The mail server application then receives the email client s request through a socket to the TCP service on the server and responds by sending the new email messages back through the socket to the server s TCP service. In the process of sending and receiving messages through the sockets neither the email client nor the mail server has to manage the details of how the messages are delivered.

Application uses sockets in the data communications module through a set of functions supplied by the API . TCP s API provides a set of functions that include for example 

Data communications module also includes a location response flag . As described in more detail below data communications module may be programmed for administering requests for data communications connections according to embodiments of the present invention in dependence upon characterization of a sender as local or remote and also in dependence upon the value of the location response flag .

A port in a socket identifies a data communications application that carries out data communications operations through the socket. Each such port is said to have a state. This specification addresses two port states open and closed. A closed port is a port that either does not exist or has not been instructed to listen. A closed port may not exist because no socket for it has been created. When a port exists it is still considered closed until its socket is instructed to listen by an application program calling listen in the sockets API. An open port is a port that exists and has been instructed to listen. In the example of data communications module also includes a data element representing the state of a port served by the data communications module. Data communications module may be programmed for administering requests for data communications connections according to embodiments of the present invention not only in dependence upon dependence upon characterization of a sender as local or remote but also in dependence upon the receiver port state that is whether the port identified in a connection request is open in the receiver.

Data communications application may be programmed to set the value of the location response flag by a subroutine call through application programming interface for the data communications protocol. In the case of TCP the API for the data communication protocol would be the sockets API. The sockets API are expanded according to embodiments of the present invention to expose an interface to a function that sets the value of the location response flag. Providing such a function empowers the application program and therefore the application programmer to determine how the data communications module is to administer requests for data communications connections according to embodiments of the present invention. As described in more detail below it is the value of the location response flag that indicates whether to respond to requests according to the sender s characterization as local or remote. Supported values of the location response flag typically include local and remote. An example of an API function for setting the value of a location response flag is 

Computer of includes non volatile computer memory coupled through a system bus to processor and to other components of the computer . Non volatile computer memory may be implemented as a hard disk drive optical disk drive electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art.

The example computer of includes one or more input output interface adapters . Input output interface adapters in computers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice.

The exemplary computer of includes a communications adapter for implementing data communications with other computers . Such data communications may be carried out through serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful for determining availability of a destination according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

For further explanation sets forth a calling sequence diagram and flow chart illustrating an exemplary method for administering requests for data communications connections according to embodiments of the present invention. The method of includes receiving according to a data communications protocol by a receiver from a sender a request for a data communications connection wherein the sender has a network address on a sender s network and the receiver has a network address on a receiver s network .

A sender is any node or process thereof on a network capable of requesting a service or data provided by another node or process thereof on the network. A receiver is any computer or process thereof on a network that responds to requests or commands from a sender. The sender communicates with the receiver by a data communications protocol such as TCP. Examples in this specification are often describe with respect to TCP but the use of TCP is not a requirement or limitation of the present invention. Administering requests for data communications connections according to embodiments of the present invention may be implemented through any connection oriented protocol including for example the Sequence Packet Exchange SPX protocol and others as will occur to those of skill in the art and the use of all such protocols is well within the scope of the present invention.

In the example of a sender s TCP service initiates a data communications connection by sending the synchronize SYN message of to a receiver s TCP service. The sender s TCP service transmits the SYN message through a sender port assigned to the particular socket on the sender by the TCP service. The sender s TCP service may have initiated the SYN message in response to an application program calling the connect function for a particular socket on the sender . Transmitting a SYN message is the first step to establishing a data communications connection in TCP.

In the example of receiving according to a data communications protocol by a receiver from a sender a request for a data communications connection may be carried out by a data communications module such as a TCP service installed on the receiver . Receiving a connection request from a sender may include identifying a SYN message as a request for a data communications connection. Receiving a connection request may also include extracting information from the SYN message and storing the extracted information in a connection request data structure. The connection request data structure may be a structure used to represent a connection such as in the example of TCP a Transmission Control Block or TCB. 

The connection request of includes a sender network address and a sender port that identifies a particular socket of the sender requesting a data connection with the receiver . Similarly the receiver network address and the receiver port included in the connection request of identifies the particular receiver socket for which the sender requests a connection. Once a connection has been established between the sockets of the sender and receiver the sender may transmit data through the sockets to the receiver . The receiver may then respond to the sender through the sockets as well. In TCP terminology the receiver s data communications module of receives the sender port and the receiver port from the TCP header of the SYN message. In the method of the receiver s data communications module may obtain the sender network address and the receiver network address by API calls to the network layer of its protocol stack.

In the method of the sender s network and the receiver s network are represented in data in a receiver s data communications module . The sender s network and the receiver s network store respective values representing the networks on which the sender and receiver are located. The sender of has a network address on the sender s network. Similarly the receiver of has a network address on the receiver s network. As described in detail at the sender s network and the receiver s network form portions of a larger wide area network.

The method of also includes characterizing the sender . The sender may be characterized as local with respect to the receiver s network if the sender s network is the receiver s network and the sender may be characterized as remote with respect to the receiver s network if the sender s network is not the receiver s network. In the example of characterizing the sender is carried out by a data communications module on the receiver . In the method of characterizing the sender provides a sender characterization as data in the data communications module on the receiver .

The method of includes a location response flag represented in data in a receiver s data communications module such as a TCP service. The location response flag supports values corresponding to local and remote. For example local may be stored in the location responds flag as a binary 0 while remote may be stored as a binary 1. A value corresponding to local indicates that the data communications module does not respond to a remote sender that is the TCP service drops the remote sender s SYN messages. A value of remote indicates that the data communications module does not respond to a local sender that is the TCP service drops the local sender s SYN messages. As mentioned above a sender may be characterized as local or remote depending on the sender s network location relative to a receiver. A sender having a network address on the network of the receiver may be characterized as local. A sender having a network address on a network other than the receiver s network may be characterized as remote. 

The method of also includes responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender s network with respect to the receiver s network . In responding to the connection request is carried out by a data communication module installed on the receiver such as a TCP service. Responding to the connection request according to the method of may include accepting the connection request denying the connection request or dropping the connection request .

In the example of accepting the connection request includes responding to the sender s SYN message with a SYN and acknowledge ACK message sometimes referred to as a SYN ACK message. Accepting the connection request according to may be carried out in the receiver s TCP service by setting the SYN and ACK control bits of a TCP message header and transmitting the TCP message to the sender . Accepting the connection request with the SYN ACK message acknowledges the sender s SYN and synchronizes the sender with the receiver s sequencing numbers. Responding with a SYN ACK informs the sender s TCP service that the receiver s TCP service accepts the request for a data communications connection on the receiver s port specified in the SYN message. After responding with a SYN ACK the connection will be established when the receiver receives an ACK not shown from the sender .

Denying the connection request according to the method of includes responding to the sender s SYN with a reset RST message. In the method of denying the connection request may be carried out in the receiver s TCP service by setting the RST control bit of a TCP message header and transmitting the TCP message to the sender . Denying the connection request with a RST message informs the sender that a TCP service on the receiver refuses the connection request. Denying with the RST message however inform the sender that the receiver s TCP service is monitoring the port specified by the sender s SYN message.

In the example of dropping the connection request may be carried out by the receiver s TCP service by discarding the connection request . Dropping provides the sender neither a SYN ACK message nor a RST message. In contrast to accepting or denying the connection request dropping the connection request advantageously supplies no information to the sender regarding the receiver . From the perspective of the sender the SYN message may appear lost or the receiver and port specified in the SYN message may appear nonexistent.

For further explanation sets forth a flow chart illustrating an exemplary method of characterizing a sender according to embodiments of the present invention. The method of includes characterizing the sender as local with respect to the receiver s network if the sender s network is the receiver s network. The method of also includes characterizing the sender as remote with respect to the receiver s network if the sender s network is not the receiver s network. The sender of is a personal computer that has a network address on the sender s network. The receiver of is a server that has a network address on the receiver s network. Personal computers request a data communications connection to a server when accessing files scripts and so on stored on the server.

In the method of the sender s network and the receiver s network are represented in data as the bits in a full network address corresponding to 1 s in an address mask. Data elements representing the sender s network and the receiver s network respectively store values representing the networks on which the sender and receiver are located. The data communications module may obtain the sender s network from the result of a logical AND of the sender s network address with the receiver s network mask. Similarly the data communications module may obtain the receiver s network from the result of a logical AND of the receiver s network address with the receiver s network mask.

In the method of characterizing the sender includes determining whether the sender s network is the receiver s network . Determining whether the sender s network is the receiver s network may be carried out by comparing the value of the receiver s network with the value of the sender s network for equality. The data communications module characterizes the sender as local if the sender s network is the receiver s network . The data communications module characterizes the sender as remote if the sender s network is not the receiver s network .

For further explanation sets forth a calling sequence diagram and flow chart illustrating a further exemplary method for administering requests for data communications connections according to embodiments of the present invention. The method of includes receiving a request for a data communications connection characterizing the sender and responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender s network with respect to the receiver s network all implemented in a similar fashion as the method of . In the method of however responding to the request is carried out by dropping the request if the value of the location response flag is set to local and the sender is characterized as remote . This method is particularly useful for example in providing enterprise services to local users when local requests for connections to open ports may be accepted and local requests for connections to closed ports may be reset in the traditional fashion because local users are relatively trusted. Remote users however are given no response whatsoever not even a reset thereby denying them any information whatsoever regarding the receiver.

For further explanation sets forth a calling sequence diagram and flow chart illustrating a still further exemplary method for administering requests for data communications connections according to embodiments of the present invention. The method of includes receiving a request for a data communications connection characterizing the sender and responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender s network with respect to the receiver s network all implemented in a similar fashion as the method of . In the method of however responding to the request is carried out by dropping the request if the value of the location response flag is set to remote and the sender is characterized as local . This method is particularly useful for example in providing online commercial services to remote users when local users ought not be requesting connections through the addresses and ports exposed for commercial use. In this example remote requests for connections to open ports may be accepted and remote requests for connections to closed ports may be reset in the traditional fashion because connections from remote user are desired. Local users however are given no response whatsoever not even a reset thereby denying them any information whatsoever regarding the receiver.

As mentioned above in the discussion of the system of a receiver may have a receiver port having a state. With reference to In the method of responding to a request may be carried out not only in dependence upon the characterization of the sender and the value of the location response flag but also in dependence upon the receiver port state . For further explanation of the use of the port state sets forth a calling sequence diagram and flow chart illustrating a further exemplary method of administering requests for data communications connections according to embodiments of the present invention.

The method of includes receiving a request for a data communications connection characterizing the sender and responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender s network with respect to the receiver s network all implemented in a similar fashion as the method of . In the method of however the receiver may include a receive port such as for example the data communications application illustrated at reference on and the receive port may have a receive port state .

The method of includes determining whether the receive port is open. Whether the receive port is open is the value of the port s state. That is the port state is either open or closed. Receiver s data communications module may for example maintain a list of the port numbers of the ports presently existing and listening on a socket. Or the port state may be inferred from data structures representing ports such as for example sockets or TCBs. In the case of TCP for example if no Transmission Control Block TCB exists with a socket having a port number matching the receiver port number in the request for a connection the port does not exist on the receiver and may therefore be considered closed.

In the method of if the state of the port is that the port is open on the receiver responding to the request is carried out by accepting the request if the value of the location response flag is set to local and the sender is characterized as local . In the example of TCP accepting the request by be carried out by transmitting a SYN ACK message from receiver to sender and then eventually completing a three way handshake to effect a connection.

Further in the method of if the state of the port is that the port is closed on the receiver responding to the request is carried out by denying the request if the value of the location response flag is set to local and the sender is characterized as local . In the example of TCP denying the request may be implemented by transmitting a reset message from receiver to sender .

For further explanation of the use of the port state sets forth a calling sequence diagram and flow chart illustrating a further exemplary method of administering requests for data communications connections according to embodiments of the present invention. The method of includes receiving a request for a data communications connection characterizing the sender and responding to the request in dependence upon a value of a location response flag and in dependence upon the characterization of the sender s network with respect to the receiver s network all implemented in a similar fashion as the method of . In the method of however the receiver may include a receive port not shown having a receive port state .

The method of includes determining whether the receive port is open. In the method of if the state of the port is that the port is open on the receiver responding to the request may be carried out by accepting the request if the value of the location response flag is set to remote and the sender is characterized as remote . In the example of TCP accepting the request by be carried out by transmitting a SYN ACK message from receiver to sender and then eventually completing a three way handshake to effect a connection.

Further in the method of if the state of the port is that the port does not exist on the receiver responding to the request may be carried out by denying the request if the value of the location response flag is set to remote and the sender is characterized as remote . In the example of TCP denying the request may be implemented by transmitting a reset message from receiver to sender .

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

