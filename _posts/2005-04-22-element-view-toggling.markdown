---

title: Element view toggling
abstract: A system and method to allow element toggling in a web-page design application include providing a user with an option to toggle a current view of a selected object, and changing said view of said object in response to the user exercising said option.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640505&OS=07640505&RS=07640505
owner: Adobe Systems Incorporated
number: 07640505
owner_city: San Jose
owner_country: US
publication_date: 20050422
---
The present invention generally relates to web page development environments and application development environment design and display and relates particularly to views of visual objects therein.

Hyper Text Markup Language HTML is a presentation language that uses a fixed set of tags to describe the content of a document usually a web page . Cascading Style Sheets CSS is a style sheet format for HTML documents that has been endorsed by the World Wide Web Consortium. CSS style sheets can be used to apply layout styles to web pages. In currently available web page design software a user interface may provide the designer with both a code view to edit HTML or other presentation language and CSS code and a design view to edit the actual web page by interacting with a rendered view especially for design time. Thus a user at any one time can choose between editing the same web page through code or through a graphical interface.

In the design view most elements on the page render in their full size in the flow of the page. Most elements begin where another element ends such that the wider they are or the taller they are the more they push some of the other elements down or over. There are also absolutely positioned elements that are similar to a layer on top of the page. Some of these elements may be partially or fully obscured so there is no way to really see them in their entireties or to edit them in the design view.

For example an object may be an end user license agreement that is quite long such that its contents take up more than the visual space allotted to the average web page object. As a result a web page designer may put the agreement in a box with scroll bars so that a viewer sees portions of the agreement at a time by scrolling through the agreement. During design time however the designer may want to be able to edit the contents of the agreement but may find it inconvenient or impossible to access some or all of the contents in the box and scroll bar view. The designer may then desire to change the design view so that the entire agreement is visible and accessible for editing.

One solution to this problem has been to avoid the design view for editing obscured objects. However for users who prefer to use a design view rather than working with HTML code such a solution may be unacceptable because it is tedious and requires extensive knowledge of computer code. Another solution is for the web page design software to always show an unobscured version of the object in the design view. This solution may also be unacceptable because such large objects may destroy the layout of the page in the design view. In other words the user can see the whole element itself but the rest of the page may be obscured rearranged etc.

Some designers have adapted by going to the code view and removing some settings changing some settings commenting out some settings and the like to make an otherwise obscured object appear in its entirety in the design view. The user then edits the object in the design view and when he or she is done goes back to the code view and places the object back into an obscured view to restore the layout of the page. This approach however may require extensive knowledge of code HTML Cascading Style Sheets JavaScript and or the like and the ability to remember exactly which changes were made so that they can be changed back.

Various embodiments of the present invention provide web designers with a user interface feature that allows them to selectively toggle between viewing an entire element and viewing the obscured view.

In one embodiment there is a toggle function that brings an entire element into view so that a designer can make edits and then toggle back to the obscured view. The obscured view may be desired when a designer is looking at the layout of the whole page. But when the designer wants to look at a particular element he or she may prefer the full view. In the box and scroll bar example a designer may toggle views to switch between the box view and the whole document view to reveal the whole end user license agreement in the design view. This toggling may be accomplished without making changes to the code. The toggle feature may also be applied to elements that are totally hidden rather than just partially obscured.

In one example this feature is implemented through adding functionality in the web design program that allows a user to select an object in the design view and to pull up a menu that offers an option to change the design time view of the object. If the designer chooses to change the design time element view the web design program edits an internal design time style sheet that will re render the design view to present the entire object. When the designer chooses to return to the obscured design time element view he or she may pull up the menu and select the option to change the design time view. Again the program edits the internal design time style sheet so that the object is rendered in the obscured view.

The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention both as to its organization and method of operation together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood however that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.

In block the computer presents an option to a user to toggle a current design time view of a selected object wherein the current design time view may obscure some or all of the selected object and the user may desire to view and access the object as a whole. The object may be obscured by being placed in a box smaller than its full display size have a style applied that specifies that it is hidden or the like. The computer presents the option to change the design time view in one of a number of ways. For example the user may move the cursor over the object and right click using a pointing device thereby selecting the object and notifying the program that some action is desired. The program may then display a menu that presents an option to toggle the design time view. While a menu is not shown in an exemplary menu is depicted in .

In block the computer changes the design time view of the object in response to the user exercising the option. In one example the program changes the design time view from a box and scroll bar view to a view that shows all of the contents of the object. In an example case of a large end user license agreement the contents of the agreement are then available for modification in the design time interface after the design time view has been changed. While the very large end user license agreement rendered its entirety may result in other objects being moved or obscured the design time view of the object may be toggled again in the same way to return to the box and scroll bar view. Also the computer program may provide a refresh function that sets the design time view for all objects back to their default views which are usually similar to the views that most web browsers will display . In this example embodiment the toggling feature provides an easy and convenient way for a web page designer to access the content in obscured objects while seamlessly returning to an obscured view later.

In CSS a visibility hidden element is similar to a display none element. The difference between a visibility hidden element and a display none element is that the display none element takes up no space on the page whereas the visibility hidden element actually takes up the space on the page but is not drawn. Various embodiments of the invention may be applied to visibility hidden elements in a manner similar to that described with regard to .

It should also be noted that web page designs may include objects other than text objects and the invention is not limited to applying only to such text objects. For example a web page may contain multimedia objects such as images movies and sound objects. Various embodiments of the present invention may be used with any type of web page object regardless of media type.

In block the computer automatically edits a currently applied design time style sheet according to the design time view change. In one example the design time view is rendered from code in memory that specifies a number of styles. The code is in effect an internal style sheet and it may be based on one or more user specified style sheets. The computer program adds subtracts changes styles and the like in the internal style sheet in order to change the current design time view. In this way there may be no need to actually change any user specified design time style sheets because the changing is done with respect to the internal style sheet.

In block the computer renders a view of the object according to the edited currently applied design time style sheet. Thus the web page design program may display the object in a full view a hidden view or another type of view depending on the instruction from the user. In this example it is possible for the user to repeat method to switch to another design time view of the object. It is also possible for the user to instruct the computer to refresh the design time view to display the object in its original or default design view as in block . This refreshing feature is accomplished in at least one embodiment implemented in DREAMWEAVER through the user pressing the F5 key which triggers the computer program to edit the currently applied internal design time style sheet to reflect a default view such as would be viewed with INTERNET EXPLORER 6 available from Microsoft Corporation for each of the web page objects. Various embodiments may use method to provide a quick and convenient way for a user to switch between desired design time views.

A user may specify one or more CSS style sheets to be used during design time to produce a design view. Program uses each of style sheets or portions thereof to produce internal style sheet which is applied to produce the design view that the user sees in the design view interface. During a design time view change program makes changes to internal style sheet and those changes are reflected in the design time view of an object that is rendered to the user through output . The design time view changes are implemented according to methods and as explained above.

DREAMWEAVER program products are used to develop web pages that are viewed through use of a web browser. Thus the output of program may include as a finished product one or more files to be placed on web servers and rendered to various viewers over the Internet. While internal style sheet may be changed to provide hidden and full views of one or more objects during design time such changes are not usually reflected in the finished web page because the designer will usually specify a particular run time style sheet to be applied to the finished product.

If JavaScript API layer is exposed to designers it may be possible to provide designers with extensibility with regard to the interface when changing design time views. In an example users can create their own commands and make the JavaScript API calls. A user may use this API to create another command dialog box floater panel radio button or the like to operate on the currently selected object on the page. For example a user may create a specific toggle button on a toolbar to affect design time views of objects.

An advantage offered by one or more embodiments of the present invention is that the user does not have to change the code of various style sheets and then remember to change it back when he or she is done. It may also save a user from having to manually apply one or more design time style sheets specifically for the purpose of changing the design time view of a particular element. This may help to eliminate the need for a user to be especially knowledgeable about HTML or CSS such as where in the code to go and which particular rule to edit or change in order to affect a particular feature of an object.

Although the examples above are in the context of design time various embodiments of the invention may be adapted for use in other contexts as well. For example a web browser that allows viewers to switch from hidden view to full view of an object while viewing rather than designing web pages is possible. Further various embodiments are not limited to two design time views per object. Some embodiments may allow a user to choose from three or more views and may even give the user a choice as the number of available views.

When implemented via computer executable instructions various elements of embodiments of the present invention are in essence the software code defining the operations of such various elements. The executable instructions or software code may be obtained from a readable medium e.g. a hard drive media optical media EPROM EEPROM tape media cartridge media flash memory ROM memory stick and or the like or communicated via a data signal from a communication medium e.g. the Internet . In fact readable media can include any medium that can store or transfer information.

Computer system also preferably includes random access memory RAM which may be SRAM DRAM SDRAM or the like. Computer system preferably includes read only memory ROM which may be PROM EPROM EEPROM or the like. RAM and ROM hold user and system data and programs as is well known in the art.

Computer system also preferably includes input output I O adapter communications adapter user interface adapter and display adapter . I O adapter user interface adapter and or communications adapter may in certain embodiments enable a user to interact with computer system in order to input information such as for example right clicking on a menu to select a design view change.

I O adapter preferably connects to storage device s such as one or more of hard drive compact disc CD drive floppy disk drive tape drive etc. to computer system . The storage devices may be utilized when RAM is insufficient for the memory requirements associated with storing data for program . Communications adapter is preferably adapted to couple computer system to network e.g. the Internet . User interface adapter couples user input devices such as keyboard pointing device and microphone and or output devices such as speaker s to computer system . Display adapter is driven by CPU to control the display on display device to for example display the user interface illustrated in of embodiments of the present invention.

It shall be appreciated that the present invention is not limited to the architecture of system . For example any suitable processor based device may be utilized including without limitation personal computers laptop computers computer workstations and multi processor servers. Moreover embodiments of the present invention may be implemented on application specific integrated circuits ASICs or very large scale integrated VLSI circuits. In fact persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the embodiments of the present invention.

Although the present invention and its advantages have been described in detail it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the invention as defined by the appended claims. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the disclosure of the present invention processes machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present invention. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

