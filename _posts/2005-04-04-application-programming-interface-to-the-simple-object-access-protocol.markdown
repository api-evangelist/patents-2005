---

title: Application programming interface to the simple object access protocol
abstract: Systems and computer-readable media implementing methods for providing an application programming interface (API) to the Simple Object Access Protocol (SOAP) are described. The API provides mechanisms for creating all parts of SOAP request messages, for sending the created messages over HTTP to a remote server, and, if the request is successful, for retrieving the response from the remote server, or, in the case of failure, for accessing whatever error information is available. The information passed through the API can be in the form of parameters which allows both the SOAP protocol and the applications that use it to change without requiring changes to the API itself.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07644415&OS=07644415&RS=07644415
owner: Microsoft Corporation
number: 07644415
owner_city: Redmond
owner_country: US
publication_date: 20050404
---
This application is a continuation of U.S. patent application Ser. No. 09 606 923 filed Jun. 29 2000 now U.S. Pat. No. 6 904 600 and entitled AN APPLICATION PROGRAMMING INTERFACE TO THE SIMPLE OBJECT ACCESS PROTOCOL. Said application is assigned to Microsoft Corporation and is hereby incorporated by reference.

This invention relates generally to computer operating system services and more particularly to an application programming interface to the Simple Object Access Protocol.

SOAP Simple Object Access Protocol is a standard method for a client application running on one computer to request services from a server application running on another computer. SOAP encodes remote procedure calls into XML messages that are carried to the server by an HTTP transport protocol. By standardizing the protocol for this much used service SOAP eliminates protocol development redundancy and application specific protocol variations. SOAP has been proposed to the Internet Engineering Task Force for consideration as an Internet communications standard. The proposal may be found at search.ietf.org internet drafts draft box http soap 01.txt.

However the proposed SOAP standard does not specify an application programming interface API to allow applications to easily use SOAP. Each applications development group must individually code the interactions between its application and the SOAP protocol leading to resource waste through coding replication and possibly to interoperability errors when connecting applications written by different development groups. Therefore the lack of a standard SOAP API directly counters some of the benefits hoped to be achieved by using SOAP.

The above problems and shortcomings and others are addressed by the present invention which can be understood by referring to the specification drawings and claims. The invention provides a general API for SOAP using client applications. The API provides mechanisms for creating all parts of SOAP request messages for sending the created messages over HTTP to a remote server and if the request is successful for retrieving the response from the remote server or in the case of failure for accessing whatever error information is available. Applications developers building on top of this API are freed from redeveloping these general mechanisms and can thus focus on the unique aspects of their applications.

In one embodiment of the present invention the API consists of software objects. In addition to providing the well known benefits of an object oriented interface this embodiment parameterizes the information passed through the API. Because of this both the SOAP protocol and the applications that use it can change without requiring changes to the API.

Besides the aspects features and advantages described the invention includes other aspects features and advantages that will become apparent from studying the following detailed description and claims.

Turning to the drawings wherein like reference numerals refer to like elements the invention is illustrated as being implemented in a suitable computing environment. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical medium.

The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it will be appreciated by those skilled in the art that other types of computer readable media which can store data accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories read only memories and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more applications programs other program modules and program data . Often the operating system offers services to applications programs by way of one or more APIs not shown . Because the operating system incorporates these services developers of applications programs need not redevelop code to use the services. Examples of APIs provided by operating systems such as Microsoft s WINDOWS are well known in the art.

A user may enter commands and information into the personal computer through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner and the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the WAN . The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data are maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.

In accordance with one aspect of the present invention shows the steps an application may go through when using an object oriented SOAP API. The client side application shown running on a general purpose computer needs a service provided by the server application . To request the service the client side application first creates a SOAP Request Object in step . This object conveniently presents to the client side application all the information it needs with respect to this one SOAP request.

In steps the client side application opens the SOAP Request Object and writes into it the information needed to create the request message. This information includes the address of the server that will process the request and the request itself. According to one aspect of the invention this information and the response and status information described below is passed via parameters this allows both the client side application and the SOAP protocol itself to change without requiring changes to the API. When all the information has been presented the client side application in step tells the SOAP Request Object to format and send the request.

The SOAP Request message is sent via the HTTP protocol to the remote server shown here connected to the client side application s host by a LAN . The connection between these two machines may be much more elaborate involving dial up modems the Internet and the like. The SOAP Request message is passed along to the server application . Ideally the server application responds favorably to the request performs the requested service and sends back a SOAP Response message .

The SOAP API provides one place for retrieving all status and response information relevant to this one SOAP request. In step the client side application queries the SOAP Request Object. If the request was successfully processed this Object includes an indication of success along with whatever information the server application passed along. Errors can occur anywhere in the communications system from the client side application s mistaken use of the SOAP API to lack of resources such as memory on the client side application s host machine to congestion on the communications link to unavailability of the remote server . Because of this in the case of an error the SOAP Request Object includes not just a failure indication but as much error resolution information as can be reasonably gathered.

In order to prevent the client side application from having to constantly poll the SOAP Request Object for response and status information the client side application may be suspended in step when the SOAP request is sent. The client side application is then reanimated when there is new response or status information for it to process.

The steps and of are now described in more detail. A COM based embodiment of the present invention may be built around an object class called SOAPRequest which exports the interface ISOAPRequest. In the following coding examples are given in JScript.

A SOAP Request Object can be created using COM s standard object creation techniques. The following code creates the object referring to the SOAPRequest class by the ProgID SOAPAPI.SOAPRequest. 

A SOAP Request Object is initialized with information about the remote service being requested. The client side application provides the name of the procedure that will perform the remote service and optionally the name of the interface to which the procedure belongs. The following code passes the name of the interface as a URI Universal Resource Identifier this is optional and the interpretation of its value is left up to the remote server . The procedure name is simply a text string here it is LoadFile .

A client side application may wish to pass information to the remote server application in addition to the information that is strictly part of the request for service. SOAP provides headers for this purpose each header providing one piece of information for the server application. These headers and their attributes including their number names and values are not part of the SOAP specification but are defined by the client side application. One embodiment of the invention parameterizes all of this information thus allowing the information to change without requiring changes to the API. The information passing through the API in steps and is parameterized for similar reasons.

Each SOAP header is an arbitrary XML fragment containing a single root element. The root element may contain child elements or text. This is an example of a SOAP header called sequenceNumber 

Client side applications create header elements using XML DOM and then add them to a SOAP Request Object by calling the SetHeader method. For more information on XML DOM see Microsoft s XML Developer s Guide incorporated herein in its entirety by reference. The following three code segments show the creation and setting of a header. First create a new XML DOM Document Object that will be used in creating the subsequent XML Nodes to represent each header 

Next use the XML DOM Document Object to create a sequenceNumber element and append to it a text node 

Once the header element is created it is added to the SOAP Request Object by calling SetHeader . SetHeader may also be used to change the value of an existing header.

Because headers are defined by the client side application and not by the SOAP specification it is quite possible that the remote server application will receive a header that it does not understand. According to the SOAP specification a header contains a mustUnderstand attribute. If this attribute is set to 1 then the server application cannot process the request unless it understands this header. SetHeader s third argument is the value of mustUnderstand.

An application can delete a header element by calling DeleteHeader and can read the value of a parameter by querying the HeaderValue property.

Requests can take any number of parameters of arbitrarily complex data types. Like the header elements described in the previous section parameter values are expressed as XML fragments. Each parameter element consists of a root element that may contain either child elements or text. This XML fragment shows how a parameter named fileName is specified in a SOAP request 

An application uses the XML DOM to create a parameter element such as the one shown above and then calls SetParameter to add it to the SOAP Request Object. SetParameter can also be used to change the value of an existing parameter. The following code creates a parameter element and inserts it into a SOAP Request Object 

An application can delete a parameter element by calling DeleteParameter and can read the value of a parameter by querying the ParameterValue property.

Once the headers and parameters are initialized the client side application calls the Execute method to send the SOAP request to the remote server . The client side application is suspended until the remote server sends a response an error occurs or thirty seconds pass without either of the above happening. In the case of a timeout the client application resumes and Execute returns a timeout error. In the other cases Execute returns and response and status information is available in the SOAP Request Object. The next section describes the information that may be returned. The following code sends a SOAP request to a server whose address is expressed as a URL Uniform Resource Locator .

When the Execute method returns it passes a success or failure code to the client side application . That application may then query various ISOAPRequest properties to read the values returned from the server application in the case of a successful request and to access status information.

If Execute returns a success code then the ResponseElement property contains the contents of the Body element of the XML response sent by the server application . The contents of this property are server dependent and the client side application should know in advance what to expect. If the SOAP request defines any out parameters parameters whose values might be changed by the server application then the client side application may query their new values by using the ParameterValue property. The ResponseHeaders property returns the contents of the headers sent by the server application . Just as a client side application can send additional information about a request in the SOAP headers the server application can return additional information in the headers.

When the request fails at the server application the ResponseFaultCode ResponseFaultString and ResponseFaultDetail properties are filled from the contents of the server application s error response.

The status of the network protocol is available in the ResponseHTTPStatus HTTP status code and ResponseHTTPStatusText text description of the HTTP status code properties. The values of these properties are however only interesting if there was a network related failure.

In accordance with one aspect of the present invention the following is a complete definition of the object oriented SOAP API used to illustrate the examples given above.

All of the references cited herein including patents patent applications and publications are hereby incorporated in their entireties by reference.

In view of the many possible embodiments to which the principles of this invention may be applied it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of invention. Therefore the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof.

