---

title: Service adaptation of the enterprise services framework
abstract: Systems, methods, and computer program products are provided for adapting service entities using a declarative approach in a service framework. In accordance with one implementation, a method is provided for adapting service entities. The method includes the steps of retrieving at least one software entity from a first repository in response to a first input and receiving a declaration from a user for adapting the software entity. The method further includes the steps of adapting the software entity to an adapted software entity based on the declaration and storing the adapted software entity in a second repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07810102&OS=07810102&RS=07810102
owner: SAP AG
number: 07810102
owner_city: Walldorf
owner_country: DE
publication_date: 20051229
---
The present invention relates generally to service adaptation and more particularly to adapt service entities using a declarative approach in a service framework.

Service entities e.g. Web services software applications software components software modules software entities and the like provide flexible building blocks of enterprise business systems. As a standard means of interoperating between different software applications that run on a variety of platform and or frameworks service entities can be combined in a loosely coupled way in order to achieve complex operations. Typically descriptions of service entities are centrally stored and are accessible through standards based mechanisms e.g. transmission control protocol internet protocol TCP IP hyper text transfer protocol HTTP file transfer protocol FTP simple object access protocol SOAP common object request broker architecture CORBA remote procedure call RPC and the like to enterprise applications that would like to invoke the service entities.

However service entities are often designed to expose functionality of individual applications and may be too limited to be efficient building blocks for enterprise wide business processes. A solution has been the migration to a Service Oriented Architecture SOA . The SOA is an open architecture middleware which builds on the benefits provided by service entities. An example of an SOA is Enterprise Service Framework ESF of SAP AG of Walldorf Germany SAP .

In a service framework e.g. ESF that includes service entities a client can call a service entity from a service entity provider through an Application Program Interface API . As used herein the term service framework refers to a defined support structure in which software systems and applications such as Web services can be developed organized compiled deployed customized run and or executed. A service framework may include computer hardware computer networks user interfaces support programs code libraries code repositories scripting language or other components to help develop and glue together the different components of one or more software systems or applications. The service entity provider allows the instantiation of business objects in response to the API call. As used herein the term instantiate means in an object oriented programming OOP environment an object of a particular class and more generally includes deploying customizing running and or executing an application.

An object means a software bundle of variables e.g. data and related methods e.g. business logic . For example in object oriented programming an object is a concrete realization i.e. instance of a class that consists of data and the operations associated with that data. Software components or entities e.g. service entities and Web service entities generally take the form of objects in some binary or textual form and adhere to one or more interface description languages IDL so that the components or entities may exist autonomously from other components or entities in a computer system. The phrase business object refers to a software bundle of variables and related methods that can be used to encapsulate business logic that describes a business process or task. For example a client can call the API of a service entity provider through a communication mechanism such as the Internet or intranet. The API when called instantiates business objects such as a catalog service entity provider for listing products from a catalog or a purchasing service entity provider for allowing the purchase of a product.

Business logic encapsulated in a business object may be decoupled from business scenario specific requirements. The business logic encapsulation may be governed by business driven functionality requirements leading to a normalized approach. Typically the encapsulated business logic is designed independent of user interface UI requirements. The business logic encapsulation is instead designed to provide a stable interface and maximum reusability. In contrast a user interface requirement is typically governed by the user s perspective in a specific scenario. Thus in different user interface scenarios user interface requirements may require different parts of a business object or even parts from separate business objects. For example a user interface specific scenario for displaying items in a sales order may rely on both a sales order business object for accessing the sales order and a product information business object for retrieving product information related to the items in the sales order.

A declarative approach may also be utilized for stable interfaces and maximum reuse of an algorithm. The declarative approach may separate the logic of the algorithm from the control of an algorithm. A user may specify via a declaration the logic or equations indicating the relations to be solved but the computing system may be responsible for the control and or evaluation of the logic or equation. Examples of the declarative approach are spreadsheets and query languages for relational databases. The user specifies a mathematical relation as a declaration e.g. a query based on structured query language or SQL for retrieving data from a database while a database system determines how to execute the query against the database.

In the view of the foregoing there is a need for systems and methods that bridge the gap between scenario specific requirements in an user interface view and business logic encapsulated in business objects during the user interface construction process. Further there is a need for additional functionality to harmonize the fine granular encapsulation e.g. user interface view with the coarse external service level e.g. Web services service entities etc. . It is desirable that such systems and methods enable adaptation of service entities using a declarative approach in a service framework.

Consistent with embodiments of the invention systems and methods are provided for adapting software entities using a declarative approach in a service framework. Embodiments of the invention include systems and methods as well as computer program products comprising a computer readable storage medium having computer readable program code that perform methods consistent with the invention when implemented by a computer or processor.

In accordance with an embodiment a method is provided for adapting software entities using a declarative approach in a service framework. The method includes the steps of retrieving at least one software entity from a first repository in response to a first input and receiving a declaration from a user for adapting the software entity. The method further includes the steps of adapting the software entity to an adapted software entity based on the declaration and storing the adapted software entity in a second repository.

Consistent with another embodiment of the present invention a computer program product is provided for adapting software entities using a declarative approach in a service framework. The computer program product comprises a computer readable storage medium having computer readable program code stored therein. The computer readable program code is executable by a processor and comprises an entity retrieval instruction set executable to retrieve at least one software entity from a first repository in response to a first input. The computer readable program code also includes a declaration instruction set executable to receive a declaration from a user for adapting the software entity and an adapter instruction set executable to adapt the software entity to an adapted software entity based on the declaration. The computer readable program code further includes a storage instruction set executable to store the adapted software entity in a second repository.

In still a further embodiment a system is provided for adapting software entities using a declarative approach in a service framework. The system includes a memory and a processor wherein the processor and the memory are configured to perform a method comprising the steps of retrieving at least one software entity from a first repository in response to a first input and receiving a declaration from a user for adapting the software entity. The method further includes the steps of adapting the software entity to an adapted software entity based on the declaration and storing the adapted software entity in a second repository.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and should not be considered restrictive of the scope of the invention as claimed. Further features and or variations may be provided in addition to those set forth herein. For example embodiments consistent with the present invention may be directed to various combinations and sub combinations of the features described in the following detailed description.

Reference will now be made in detail to embodiments of the invention examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In one embodiment consistent with aspects of the present invention system may be implemented as part of an enterprise services framework ESF . An ESF allows service entities e.g. Web services software applications software components software modules etc. to be aggregated to form composite business level applications. Although is described with respect to an enterprise service architecture system may utilize any other framework or software architectural environment. For example consumer system may be implemented as a client and service provider may be implemented as a server in a client server architectural environment. Service manager may be implemented at either the client or the server.

User may be any entity. For example user may be a developer who develops a component of system or a designer who designs a user interface. User interface may provide content such as visual displays to user . Moreover user interface may include a browser configured on consumer system for interacting with applications such as service providers . For example the browser of user interface may connect at runtime to user interface pattern engine generic client proxy and adaptation tools through network connections and service manager to view and interact with content from service providers . User may request an instance of a business object at one of service providers for example a purchase order form through user interface . User interface may then send the configuration information of the purchase order form to consumer system for configuring the purchase order form. For example the configuration information configures the purchase form by defining the display e.g. buttons menus text boxes etc. such that the content from a service provider is provided to the configured order form.

Network connections may include alone or in any suitable combination a telephony based network a local area network LAN a wide area network WAN a dedicated intranet wireless LAN the Internet a wireless network a bus or any other communication mechanisms. Further any suitable combination of wired and or wireless components and systems may be used to provide network connections . Moreover network connections may be embodied using bi directional unidirectional or direct communication links. Further network connections may implement protocols such as transmission control protocol internet protocol TCP IP hyper text transfer protocol HTTP file transfer protocol FTP simple object access protocol SOAP common object request broker architecture CORBA remote procedure call RPC and the like.

User interface pattern engine may receive configuration information of the requested user interface design such as configuration information of a purchase order form from user interface . User interface may then send the configuration information of the purchase order form to consumer system for configuring the purchase order form. At runtime user interface pattern engine may interpret the configuration information and transform the configuration information into an Application Programming Interface API call to service adaptation engine through generic client proxy and service manager .

Generic client proxy may include an API that is accessible to user interface . When generic client proxy is instantiated generic client proxy may provide an interface such as a RPC or a SOAP interface to service manager through network connection . Generic client proxy may be implemented to control the functionality available to user interface by providing a well defined interface to service manager . For example service manager may include a variety of functions but user interface may be allowed access only to a subset of those functions. Moreover generic client proxy may buffer requests and or responses between user interface and service manager .

Generic client proxy may call service manager . Generic client proxy may include a message handler for handling messages to and from service manager a change handler for handling changes affecting service providers e.g. changes that occur when user interacts with user interface such as a button click that affects a service provider or the corresponding business objects a controller for controlling dynamic properties of the instance e.g. making data associated with a business object read only changeable mandatory invisible and the like and a stack for storing changes associated with the change handler in a last in first out manner.

Service adaptation tools may have an API that is accessible to user interface . Consumer system service manager or both may instantiate service adaptation tools to provide an interface e.g. an RPC or a SOAP interface to service manager through network connection . Service adaptation tools may be implemented and made available to user interface to enable user to generate adapted service entities from existing service entities. An adapted service entity is a service entity created or extended from one or more existing service entities based on one or more declarations specified by user . The adapted service entities retain the interfaces of their corresponding existing service entities. In other words the adapted service entities appear and behave like their corresponding existing service entities to user . User may use adaptation tools to adapt one or more existing service entities into one or more adapted service entities using a declarative approach as discussed in greater detail below. Furthermore adaptation tools may buffer adaptation requests and or responses between user interface and service manager .

Service manager may further analyze the incoming API call from generic client proxy which contains the configuration information. For example service manager may instantiate one or more service providers such as service provider . When service provider is instantiated service provider may instantiate a business object and the corresponding business object node. Service manager may also instantiate an instance of service adaptation engine and pass the configuration information received from generic client proxy to service adaptation engine . Service adaptation engine may create a business object node according to the configuration information received from generic client proxy . A business object node refers to a unit or a component of a business object. A business object node contain data and or associations to other business object nodes. A business object may also support generic mass operation enabled read and write operations navigation to other business object nodes via associations queries actions e.g. print create follow on document and access to dynamic meta data. For example user may access user interface to request a purchase order form the purchase form and its related methods encapsulated in a business object from service providers along with a component of the purchase order form e.g. a product description in the purchase order form corresponding to a business object node. The structure of this business object node may reflect the configuration of the requested user interface design. For example the business object node may be used by service provider to fulfill the incoming API call from generic client proxy .

Service repository stores and organizes services and the information that the services consume and produce. Service repository stores and organizes information about the structure of a business object for example business object nodes contained in the business object and the queries actions and associations associated with the business object nodes. The information stored in service repository may also describe if those business object nodes allow reading and or writing. At design time a developer or designer may request and receive an index of services from consumer system service manager and or service provider . The developer may select one or more existing services from the index and retrieve the existing services from service repository to help design new services and define new inter relationships between services. At runtime service providers may search for information sources in service repository .

Adaptation meta model extends without modifying existing meta model entities utilized by system . Adaptation meta model contains an interface EntityDescriptor which is inherited by other interfaces in the existing meta model including interfaces StructureDescriptor BusinessObjectNodeDescriptor Association Descriptor QueryDescriptor Action Descriptor AttributedFieldDescriptor and FieldDescriptor . Adaptation meta model extends existing meta model entities through adaptation interfaces including Adaptation EntityDescriptor AdaptationPart AdaptationStructureDescriptor AdaptationBusinessObjectNodeDescriptor AdaptationAssociationDescriptor AdaptationQueryDescriptor and AdaptationActionDescriptor . Adaptation interfaces inherit AdaptationEntityDescriptor which inherits EntityDescriptor . Adaptation interfaces also inherit their corresponding existing entity interfaces . For example AdaptationStructureDescriptor inherits StructureDescriptor AdaptationBusinessObjectNodeDescriptor inherits BusinessObjectNodeDescriptor etc. Therefore changes made to the existing meta model entities may be inherited by and propagated to the adaptation meta model .

AdaptationEntityDescriptor which has an adaptation description serves as a super interface for adaptation meta model . Components that comprise an adapted service implement AdaptationEntityDescriptor . Each component is an adaptation part that implements AdaptationPart which references an existing entity through an entity descriptor that implements EntityDescriptor . The components may be different for each kind of adaptation. Each kind of adaptation has its own descriptor that describes the adaptation. The descriptors are instantiated from corresponding descriptor classes that implement from both AdaptationEntityDescriptor and corresponding EntityDescriptor e.g. adaptation association descriptor that implements AdaptationAssociationDescriptor also implements AssociationDescriptor .

An adaptation business object node descriptor that implements AdaptationBusinessObjectNodeDescriptor contains references to a leading or primary business object node and an auxiliary or secondary business object node. An adaptation association descriptor implementing AdaptationAssociationDescriptor includes a list of other associations. An adaptation query descriptor that implements AdaptationQueryDescriptor contains a query and any number of associations. An adaptation action descriptor implementing AdaptationActionDescriptor contains references to other actions. An adaptation structure descriptor implementing AdaptationStructureDescriptor contains links to attributed field descriptors that implement an interface AttributedFieldDescriptor which refer to a field of an underlying structure but may assign a different name to it. AttributedFieldDescriptor supplements FieldDescriptor by indicating if a field is read only in a particular adaptation and providing a default value for the field in the adaptation. Attributed field descriptors distinguish between fields of an existing entity and an adaptation entity that have same names if the existing entity and the adaptation entity have the same structures. Because the attributed field descriptors contain information specific for an adaptation the attributed field descriptors may not be reused for another adaptation.

Next in step a component e.g. service adaptation tools in consumer system receives a declaration from user for adapting the existing service entity in accordance to one or more adaptation operations. The adaptation operations are further described below. Service adaptation tools may verify or otherwise process the declaration to ensure that the declaration is valid and syntactically correct. Then in step service adaptation tools may directly adapt the existing service entity based on the declaration. Alternatively consumer system or service manager may load the adaptation operations and present the adaptation operations to user via user interface . Service adaptation tools may adapt the existing service entity based on the declaration and one or more of the adaptation operations specified by user . Alternatively service adaptation tools may forward the declaration to service manager for service adaptation engine to adapt the existing service entity based on the declaration in accordance to the adaptation operations specified by user .

In step subsequent to a successful adaptation of the existing service entity into an adapted service entity the adapted service entity is stored in service repository .

Consistent with embodiments of the invention service adaptation tools service adaptation engine or both may perform the following adaptation operations 1 join additional attributes read only 2 join of 1 related business object nodes of the same object 3 sequence of associations 4 action sequences 5 discarding fields from business object node 6 additional fixed or computed values 7 join of 0 . . . 1 related business object nodes 8 usage of queries in association sequences 9 filtering associations 10 composite queries with sequences of operations and 11 set operations on queries.

The join additional attributes read only adaptation operation may create an adaptation business object node that combines data from a main business object node with additional read only data from one or more target business object nodes intended for the benefit of user . This adaptation operation may for example join customer master data in a business object node with customer address data in another business object node by a customer identification number.

The join of 1 related business object nodes of the same object adaptation operation may join a business object s nodes that have been previously separated. Due to performance considerations e.g. computationally expensive data fields such as a sum of a data field logical grouping of fields e.g. fields of the same data that are not directly related and or special data fields with limited usage different fields of the same business object may be separated into different business object nodes. For a specific user interface UI scenario these fields that have been separated may need to be rejoined for presentation on the same screen.

The sequence of associations adaptation operation may hide or eliminate unnecessary intermediate business object nodes. When a business object is deeply structured not all elements i.e. business object nodes of a business object are relevant for a specific UI scenario. In this scenario a sequence of associations e.g. from a business object node A to a business object node B then to a business object node C may be reduced to a single composite association e.g. from business object node A directly to business object node C . The composite association may contain an arbitrary number of intermediate steps. In the meta data the associations and sequences between business object nodes should be specified. The cardinality of a target association may be calculated from the given cardinalities of the associations between the business object nodes. For example assume that a first association has a cardinality of 1 such as a vehicle and the vehicle s exterior color e.g. red . Further assume that a second association has a cardinality of 1 . . . n such as a vehicle s exterior color e.g. red and one or more possible interior colors for a vehicle with that exterior color. The resulting composite association of the first and second associations then has a cardinality of 1 . . . n e.g. a vehicle may have one or more possible interior colors regardless of the vehicle s exterior colors . Table 1 depicts rules for each of the associations in the adapted sequence wherein association Assoc AB is an association with source business object node A and target business object node B and association Assoc BC is an association with source business object node B and target business object node C.

The action sequences adaptation operation may combine actions of one or more business object nodes into a combined action. For example a business object node may offer distinct actions for recalculating the price of a sales order based on actual conditions and modifying the shipment type for a sales order. This adaptation operation combines the modification of shipment type with a recalculation of the price to reflect any changes to the price of the sales order caused by the modification of shipment type.

The discarding fields from business object node adaptation operation may create an adapted business object node by discard unnecessary or omitted fields.

The additional fixed or computed values adaptation operation may create an adapted business object node by inserting newly computed or fixed fields in an adapted business object node.

The join of 0 . . . 1 related business object nodes adaptation operation is similar to the above described adaptation operation of joining 1 related business object node of the same object. However the join of 0 . . . 1 related business object nodes adaptation operation creates an adaptation business object node that combines data from a main business object node with additional read only data from one or more target business object nodes even if one or more of the target business object nodes contain zero rows.

The usage of queries in association sequences adaptation operation may combine queries of one or more business object nodes into a combined sequence of associations.

The filtering associations adaptation operation may filter an association between business object nodes based on one or more criteria. For example this adaptation operation may filter out from an association any business object node rows that are not in English.

The composite queries with sequences of operations adaptation operation may combine an existing query with multiple operations to be executed in sequence. For example an existing query for sales orders e.g. finding sales orders by date may be used to find customers based on the result of the query and the association of a sales order business object to a customers business object. This adaptation operation creates an adapted query that finds customers based on the date of assigned sales orders.

The set operations on queries adaptation operation may adapt an existing query or queries into an adapted query using set operations e.g. union intersection and the like.

For purposes of illustration is a block diagram of one exemplary embodiment consistent with the present invention of a computer program product including a computer readable storage medium that has computer readable program code stored therein. Computer readable program code includes an entity retrieval instruction set executable to retrieve at least one service from service repository in response to a request from user . Computer readable program code further includes a declaration instruction set executable to receive a declaration for adapting the service and an adapter instruction set executable to transform the service to an adapted service based on the declaration. Computer readable program code also includes an storage instruction set executable to store the adapted service in a service repository e.g. service repository .

The foregoing descriptions of the invention have been presented for purposes of illustration and description. They are not exhaustive and do not limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practicing of the invention. For example the described implementation includes software but the present invention may be implemented as a combination of hardware and software or in hardware alone. Further while certain exemplary methods have been described it will be appreciated that the order of the method may be rearranged and stages or steps may be substituted modified combined or otherwise altered.

The systems and methods disclosed herein may be embodied in various forms including for example a data processor such as a computer that also includes a database digital electronic circuitry firmware software or combinations thereof. Moreover the above noted features and other aspects and principles of the present invention may be implemented in various environments. Such environments and related applications may be specially constructed for performing the various processes and operations according to the invention or they may include a general purpose computer or computing platform selectively activated or reconfigured by code to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer network architecture environment or other apparatus and may be implemented by a suitable combination of hardware software and or firmware. For example various general purpose machines may be used with programs written in accordance with teachings of the invention or it may be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.

The systems and methods disclosed herein may be implemented as a computer program product such as a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. Therefore the specification and examples should be considered as exemplary only with a true scope of the invention being indicated by the following claims.

