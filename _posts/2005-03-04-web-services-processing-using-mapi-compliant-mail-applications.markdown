---

title: Web services processing using MAPI compliant mail applications
abstract: The present invention provides Web Services over a mail transport. In particular, the present invention sends Web Service messages using MAPI (Messaging Application Program Interface) mail applications in order to support offline communications and extended processing time of service requests without creating additional infrastructure for such message exchanges. A custom layer transport is configured to: identify that a Web Service message is to be sent across a mail transport; use the MAPI application to generate a mail message; and include the Web Service message and other identifiers within the mail message. The message is then sent to the outgoing mailbox of the MAPI application for subsequent delivery to an endpoint. Upon receiving the mail message, the endpoint can extract the Web Service message and process it accordingly. Other example embodiments also provide for requesting NPDL (Network Protocol Description Language) data structures (e.g., WSDL documents) by a similar process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07600048&OS=07600048&RS=07600048
owner: Microsoft Corporation
number: 07600048
owner_city: Redmond
owner_country: US
publication_date: 20050304
---
The present invention generally relates to binding mechanisms used in Web Services and other distributed systems. More specifically the present invention provides Web Services over a mail message transport using a MAPI Messaging Application Program Interface compliant mail application in order to support offline communications and extend the processing time of service requests without creating additional infrastructure for such message exchanges.

Computer systems and related technology affect many aspects of society. Indeed the computer system s ability to process information has transformed the way we live and work. Computer systems now commonly perform a host of tasks e.g. word processing scheduling database management etc. that prior to the advent of computer systems were performed manually. More recently computer systems have been coupled to one another to form computer networks over which the computer systems can communicate electronically to share data. Web Services has been a driving force in advancing such communications between computer systems and is turning the way we build and use software inside out.

Web Services let applications share data and more powerfully invoke capabilities from other applications without regard to how those applications were built what operating system or platform they run on and what devices are used to access them. Web Services are invoked over the Internet by means of industry standard protocols including SOAP Simple Open Access Protocol XML eXtensible Markup Language UDDI Universal Description Discovery Integration WSDL Web Service Description Language etc. Although Web Services remain independent of each other they can loosely link themselves into a collaborating group that performs a particular task.

Often electronic communication on a Web Service network includes a client computer system hereafter referred to as a client requesting access to a network service e.g. Web Services at a server computer system hereinafter referred to as a server service or Web Service . Accordingly the client sends a request to the service for particular access to its system resources wherein if the client is authorized and validated the service responds with a response message providing the desired information. Of course other messaging patterns between client and service are available and include simple singleton messages as well as more sophisticated multi message exchanges like e.g. notifications solicit response pub sub patterns polling kick push queuing and others. Further these types of communication are governed by various requirements and capabilities defined by both the client and the service in contracts for distributed systems e.g. Web Services .

A contract is an expression of visible aspects of a service or client behavior. A contract is represented by a mixture of machine readable languages and human language. Besides the obvious opportunity for additional precision machine readable languages enable tooling to construct partial service implementations automate service deployment audit validate messages exchanged manage services and enable a host of other network related functions. Due however to limitations in the expressive power of machine readable languages human languages remain an important component of contracts principally to describe message and message exchange pattern semantics.

Network Protocol Description Languages e.g. WSDL provide an overall wrapper or specification for describing contracts e.g. Web Services Contracts in a common or standard language. Such specifications make it easy for developers and developer tools to create and interpret contracts. These Network Protocol Description Languages hereinafter referred to as NPDL have extensive tooling suites which in large part accounts for their popularity. Until recently these NPDLs bound contracts to a single transport or binding mechanism which describes how to encapsulate or format a message e.g. SOAP envelope and what transport to use for exchanging the message with a service e.g. HTTP Hyper Text Transport Protocol .

Currently Web Service implementations use HTTP as their primary transport partially because of its ubiquitous nature. Although HTTP has grown in popularity as a transport for Web Services HTTP also has some widely recognized limitations. For example HTTP is a request response style transport which supports synchronous style transactions. This type of message exchange pattern however present challenges for asynchronous communication. For instance a Web Service client must keep alive a connection to obtain any response from the Web Service. This makes long running transactions e.g. a mortgage application that takes several days to process difficult to implement using HTTP without creating a mechanism where the client constantly polls the server for updates. Such polling creates an unnecessary use of precious system resources.

Another problem with HTTP is that it is a connection based protocol. Accordingly each endpoint in a message exchange pattern i.e. client and service must be alive and active to complete an HTTP request response. In situations where this is unlikely e.g. a client trying to connect to Web Services at some remote location the message would be considered undeliverable and the system would fail since HTTP protocol does not support caching and storage of messages.

Still another problem with using HTTP in a Web Services environment is that the use of HTTP requires additional infrastructure. For example to host a Web Service using HTTP requires infrastructure and setup. To support a hosted Web Service each computing device needs to be able to accept incoming HTTP requests which calls for installation of a Web server or equivalent functionality for each computer. This introduces new management and security issues and as a result can be a challenge in some environments e.g. a casual computer user or users who are otherwise not familiar with configuring Web servers.

The above limitations are already generating ideas and implementations of alternative transports that can support Web Services. Accordingly various Web Service engines allow developers to write or extend the bindings or binding mechanisms to include a number of encapsulation and transport protocols. For example developers can customize the transports to include one or more of the following FTP File Transfer Protocol SMTP Simple Message Transfer Protocol TCP Transmission Control Protocol UDP User Datagram Protocol etc. Although these binding extensions allow advantageous features of other transports to be utilized they do not address the above identified deficiencies of HTTP.

For example when an SMTP binding is used a standard mail message is generated wherein the body of the message includes the Web Service message which is then transferred across the wire to the other endpoint. Although using the SMTP transport may have advantageous features over HTTP using SMTP in this fashion still requires that each endpoint be connected via the SMTP transport. In addition the generation and encapsulation of the Web Service message within the mail message requires addition infrastructure again leading to management and security issues as described above.

Accordingly there exists a need for a Web based service infrastructure that allows for extended asynchronous communications supports offline or connectionless intervals and utilizes existing infrastructure for exchanging messages in the Web Service environment.

The above identified deficiencies and drawbacks of current Web Service binding mechanisms are overcome through exemplary embodiments of the present invention. For example the present invention provides for Web Services over a mail transport that utilizes a MAPI Messaging Application Program Interface compliant mail application in order to support offline communications and extend processing time of service requests without creating additional infrastructure for such message exchanges. In addition the present invention provides for distribution of NPDL Network Protocol Description Language data structures for a Web Service application over a mail transport by utilizing a MAPI compliant mail application in order to support offline communications and generate the NPDL data structure without having to access the Web Service application.

For example embodiments provide for receiving a Web Service message that includes an addressing scheme identifying the use of a MAPI compliant mail application for sending the Web Service message which is part of a message exchange pattern between a client and a Web Service that communicate over a mail message transport. An endpoint mailing address within the addressing scheme is then identified for sending the Web Service message to a corresponding endpoint. Thereafter a mail message using a MAPI compliant mail application is generated. The mail message including the endpoint mailing address the Web Service message and an identifier for identifying the Web Service and message exchange type e.g. request response etc. for the Web Service message. Thereafter the mail message is sent to an outgoing mailbox of the MAPI compliant mail application for subsequent delivery to the endpoint over the mail message transport.

In another example embodiment a mail message is received over a mail message transport. The message being received at an incoming mailbox of a MAPI compliant mail application corresponding to an endpoint Web Service application. Thereafter the mail message is identified as including an endpoint mail address corresponding to the MAPI compliant mail application a Web Service message that is part of a message exchange pattern between a client and a Web Service and an identifier for identifying the Web Service and a message exchange type for the Web Service message. Based on the Web Service and message exchange type for the Web Service message the Web Service message is sent to the endpoint Web Service application for processing.

Other example embodiments provide for distributing an NPDL e.g. a WSDL data structure over a mail transport. This exemplary embodiment provides for receiving from an endpoint a mail message at an incoming mailbox of a MAPI compliant mail application associated with a Web Service application. The mail message is then identified as requesting an NPDL data structure which is a specification for describing one or more contracts that an endpoint application complies with when exchanging messages with the Web Service application. Thereafter a NPDL data structure is automatically generated without accessing the Web Service application. The NPDL data structure is then sent to the endpoint.

Additional features and advantages of the invention will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

The present invention extends to methods systems and computer program products for exchanging Web Service messages between a client and a Web Service over a mail transport using a MAPI compliant mail application. In addition the present invention provides for communicating NPDL data structures to a requesting endpoint via a MAPI compliant mail application. The embodiments of the present invention may comprise a special purpose or general purpose computer including various computer hardware as discussed in greater detail below.

The present invention provides for utilizing a MAPI Messaging Application Program Interface compliant mail application for exchanging messages for Web Services over a mail transport. Examples of MAPI compliant mail application include Microsoft Outlook Microsoft Outlook Exchange Microsoft Exchanges Qualcomm s Eudora and other similar email applications that can communicate with a mail exchange server or mail store. Other exemplary embodiments also include using these MAPI compliant mail applications for requesting NPDL Network Protocol Description Languages data structures e.g. WSDL Web Service Description Language documents which allows client and service developers at design time to access these documents without having to access the corresponding Web Service application.

The above identified MAPI compliant mail applications are incredible pervasive technology in that everyday numerous people worldwide use these applications to exchange messages. The capability to use such MAPI compliant mail application as a transport for Web Service messages exchanged between applications becomes incredibly powerful. For example taking the challenges previously outlined with HTTP one can start to see why the use of MAPI compliant mail applications has tremendous benefits over the prior art. In particular such MAPI compliant mail applications offer a far more asynchronous model over HTTP and other similar transports. A user of a MAPI compliant mail application can send a message and then expect a reply a few minutes hours or even days later. Accordingly when this is applied to Web Services a MAPI mail application can be used to send a Web Service request and then receive a response a few minutes hours or days later. This asynchronous style of interaction is difficult and in some instances impossible to achieve using HTTP or other transports.

Further MAPI mail applications support the construction of a mail message in an offline environment. For example if a user is in a remote location without access or connectivity to a mail exchange server the user may still create messages using the MAPI compliant mail application wherein such messages are stored in an outgoing mailbox of such applications. These messages can then be sent the next time the user connects with the mail exchange server. A similar process applies to a model where Web Services in conjunction with a MAPI compliant mail application can be used to overcome such deficiencies of HTTP and other similar transport protocols. In particular the present invention allows applications that can construct a Web Service message e.g. a request or response to store the Web Service message as a normal mail message within the outgoing mailbox of a MAPI mail application. Accordingly the present invention supports offline processing of Web Service messages and the next time the user is connected to the network the message may be sent to the desired endpoint.

Another advantage of the present model is that no additional infrastructure is required. As mentioned previously supporting incoming HTTP request typically requires the installation of a Web Server which can lead to management and security issues. With the use of MAPI mail applications in accordance with example embodiments herein all that is required is a mailbox for an endpoint. Incoming mail Web Service messages can be sent to this mailbox without the overhead of any additional software or installations.

The present invention also has several advantageous features over other current models that use an SMTP transport for exchanging messages between endpoints in a Web Service environment. For example using the MAPI mail application in accordance with example embodiments provides the ability to work offline since such applications support the use of an outgoing mailbox which is specific to the MAPI compliant mail application not the protocol or transport. In addition the use of a MAPI mail application provides for no duplication of configuration. For example when using a native or current SMTP channel the Web Service client and service still need to know certain details about the email account. This includes for example the location of the SMTP server location of a POP3 server user name and password. When using MAPI mail applications in accordance with the present invention all of this information is already configured within the application and therefore does not need to be duplicated.

Still other advantageous features of the present invention include extending the transports used for exchanging messages in a distributed environment. For example many MAPI mail applications allow messages to be transported on other transports aside from SMTP. For example these MAPI mail applications may be extended to transport messages using Hotmail X.25 DEC All In 1 and others. Given some of the above identified benefits the following is a more detailed description of how the MAPI mail applications are used to achieve these desired results.

As shown in both the client and the server are installed with or include instances of MAPI mail applications respectively. Note that for the purposes of simplifying the diagram both instances of the MAPI mail applications are shown using the same mail exchange server however there may be other mail exchange servers used throughout the distributed system . The only prerequisite with the present invention is that the instance of the MAPI mail application on the client has the ability to exchange send and receive mail messages with the instance of the MAPI mail application on the server .

In the example in client runs a Web Service application which is a custom application that is configured to make calls with the Web Service . Similarly the server hosts and runs Web Service . Note however that for the purposes of this application the term Web Service application should be broadly construed to include both the client s Web Service application and the server side Web Service unless otherwise explicitly identified. Further both the client s Web Service application and the Web Service are bound to MAPI applications respectively using custom layered transports on the client s side and on the server side . As will be described in greater detail below both of these layer transports may have several layered interfaces that are used to communicate messages between both Web Service applications and their corresponding MAPI mail applications .

The following gives a brief overview of a request response message exchange pattern between the client and the server . Note however that other message exchange patterns are also available to the present invention. Accordingly the use of the request response message exchange pattern in describing example embodiments of and other figures is for illustrative purposes only and is not meant to limit or otherwise narrow the scope of the present invention unless explicitly claimed.

In this example the client s Web Service application creates a Web Service request which includes as described in greater detail below a custom addressing scheme that specifies the location of the mail address used by the server s s MAPI mail application . Using the client side layer transport the Web Service request message can be forwarded to the MAPI mail application through one or more direct APIs Application Program Interfaces as described below. The MAPI mail application will create an outgoing mail message for the request and puts the outgoing mail message in its outgoing mailbox not shown . Note that although the outgoing mail message is sent or stored in the outgoing mailbox other processes for posting the mail message in the outgoing mailbox are also available to the present invention. For example the mail message may be directly created within the outgoing mailbox. Accordingly the sending or storing of the mail message as well as other mail messages described herein in an outgoing mailbox should be broadly construed to include any well known way of placing or creating mail messages within the outgoing mailbox.

In any event the outgoing mail message may include the mail address that is bound to the Web Service s s MAPI mail application the Web Service request message and an identifier for identifying the Web Service and the mail exchange type for the Web Service message i.e. in this example a request . When the MAPI mail application is connected to the appropriate mail exchange server the outgoing mail message is sent as an incoming mail message to the server s s MAPI mail application . Typically this incoming mail message will be a SOAP envelope in plain text. Note however that the present invention is not limited to any particular encapsulation and or formatting for the mail messages exchanged. Accordingly the use of SOAP envelope and plain text for transferring mail messages is for illustrative purposes only and is not meant to limit or otherwise narrow the scope of the present invention unless explicitly claimed.

When the incoming mail message arrives at the MAPI mail application it may be sent to the MAPI mail application s s incoming mailbox. By way of the identifier within the incoming mail message the server side layered transport may identify the incoming mail message as including request and hands it to the corresponding Web Service for processing. Note that although the identifier is used to identify the incoming mail message as including request exemplary embodiments also provide for other ways for identifying the message as including request . For example the message may be identified through a filtering process wherein the MAPI mail application can identify the subject matter in the incoming mail message as a request. In such instance it may be filtered to a specific folder using various rules set by the server developer. Accordingly the server side layer transport upon seeing a message within the filtered folder can automatically assume that the incoming mail message includes a request and send it to the Web Service for processing. Accordingly the use of the term identifier as described in greater detail below for identifying the request or other types of Web Service messages within incoming mail message should be broadly construed to include other well known ways of identifying messages as including specific content.

In any event upon a successful handoff of the request message to the Web Service the incoming mail message may be deleted from the server s s MAPI mail application incoming mailbox e.g. move to the deleted items folder . If this was just one way message exchange pattern the process would end here. In this example however Web Service can send a response in a similar manner as that described above.

In particular the Web Service constructs the response and uses the server side layer transport to hand the response to the MAPI mail application . The MAPI mail application then constructs an outgoing mail message that includes the client s mailing address or an address otherwise corresponding to the client the Web Service response and an identifier for identifying the Web Service and the mail exchange type i.e. response . The outgoing mail message is then stored in the outgoing mailbox not shown on the server and sent to the mail exchange server when the server is connected thereto. When the client is connected to the mail exchange server the outgoing mail message is sent as an incoming mail message to the instance of the MAPI mail application on the client side. The client side layer transport may then recognize the incoming mail message as including a response similar to the process described above with regard to the server and hands it back to the clients Web Service application for processing.

Nevertheless as shown custom layer transport consists of three elements which include custom transport interface managed MAPI functions and extended MAPI functions . The custom transport interface layer implements various interfaces and processes required for the Web Service engine transport. This layer outlines the channels that will be used together with an addressing scheme as described in greater detail below and processes that handle events for the transport e.g. what to do when a new message arrives . This custom transport interface also supports the generation of NPDL documents e.g. WSDL documents such that a developer can send a mail message to the Web Service and request the NPDL document for designing and building a client that will work with the service. This process and addressing scheme for requesting such NPDL document is described in greater detail below with regard to .

The managed MAPI functions layer is used in converting the Web Services request from the Web Service engine form commonly known as SOAP envelopes into mail messages. Part of the functionality of this layer is to correctly handle the addressing such that ambiguous mail addresses are handled correctly. This layer may be developed in managed .Net code hence the name.

There may be several functions that the managed layer cannot perform due to e.g. the security model within various MAPI mail applications . These functions may include obtaining a mail address and body text for an existing mail message. Accordingly to overcome this exemplary embodiments provide for the extended MAPI functions layer which is configured to perform a number of functions that interact with the MAPI mail application . This extended MAPI function layer may be shipped as part of the MAPI mail application .

As previously mentioned the present invention uses a custom addressing scheme for identifying the use of a MAPI compliant mail application for sending Web Service messages e.g. request response . Note that although the following description of the addressing scheme utilizes a specific form for identifying endpoint mailing addresses and identifying that Web Service messages are to be exchanged using a MAPI compliant mail application other well known ways of identifying these features are available to the present invention. Accordingly the following addressing scheme and other identifiers as described herein are for illustrative purposes only and are not meant to limit or otherwise narrow the scope of the present invention unless explicitly claimed.

The example addressing scheme in accordance with exemplary embodiments is similar to the modeling of typical URLs Uniform Resource Locators . For example a URL is made up of several distinct parts including the transport e.g. http the host name e.g. www.companyname.com and the page being requested e.g. biztalk default.aspx . Web Services running over an HTTP transport follow a similar convention. For example given an address of http myserver services service1.asmx the transport is again http myserver is the host name and services service1.asmx identifies the Web Service being requested.

Exemplary embodiments of the present invention use a similar addressing scheme for the MAPI mail application identifiers. For example a addressing scheme of soap.mapimailapplicationname to sguest company.com is separated into the following the soap.mapimailapplicationname defines the transport to use the to is the host name used to conform to URI naming conventions but is typically ignored by the design and sguest company.com is the email address of the Web Service or client depending on whether this is a request response or other type of message exchange .

Using the above format also allows the transport to address multiple services similar to the way that an email can address multiple recipients. This may be preformed by appending the addresses on the URL e.g. soap.mapimailapplication to squest company.com account company.com. This addresses the request to services running on both squest company.com and accounts company.com.

It is noted that the addressing scheme may not include the name of the Web Service. Instead example embodiments place the Web Service s name or other means for identifying the service such a assigned code and the message exchange type in an identifier. The identifier may be placed in a specific field e.g. the subject line of the mail message. The format of these identifiers may be as follows request which identifies a request for the service and requestresponse which identifies a response to a previous request. Note that although a specific format is used for identifying the request and or the response other ways of identifying the message exchange pattern are also available to the present invention. For example for a request an abbreviation of req may be used where as for the response an abbreviation of resp may be used. Accordingly the above examples for identifying message exchange pattern and the format that they appear within the identifier are used for illustrative purposes only and are not meant to limit or otherwise narrow the scope of the present invention unless explicitly claimed.

As previously mentioned exemplary embodiments also provide for a requesting and receiving a NPDL document e.g. WSDL document for creating requests that are compatible with communicating to the Web Service . As one would recognize such NPDL data structures give specifications for describing one or more contracts that a client Web Service application complies with when exchanging messages with the Web Service application .

Web Services engine can identify the request mail message by way of the identifier and use such to generate an NPDL data structure which can then be sent to client in e.g. a mail message response . Note that although the NPDL data structure in is retrieved from store other example embodiments provide for allowing the Web Service engine to dynamically generate it on the fly. Further note that although in this example the NPDL data structure is sent in a response mail message the NPDL data structure may be sent using other transports. For example the request may specify a different transport to use and or a different address to send the NPDL data structure to. Accordingly how the NPDL data structure is created and the use of a mail message for returning the NPDL data structure are for illustrative purposes only and it is not meant to limit or otherwise narrow the scope of the present invention unless explicitly claimed.

Note that because the Web Service engine can dynamically generate or retrieve the NPDL from a store or by other means without accessing or requesting such from the Web Service this embodiment has several advantageous features. For example because the Web Service is not accessed during this process the Web Service s s resources can be utilized for processing other requests. This example embodiment for obtaining a NPDL data structure also has the added advantage of being able to request such in an offline environment since a MAPI mail application is used for the request . In particular the request may first be sent to the outgoing mailbox of the MAPI application in an offline environment and then when connection to the mail exchange server is available the request can be sent to the server .

The present invention may also be described in terms of methods comprising functional steps and or non functional acts. The following is a description of steps and or acts that may be preformed in practicing the present invention. Usually functional steps describe the invention in terms of results that are accomplished whereas non functional acts describe more specific actions for achieving a particular result. Although the functional steps and or non functional acts may be described or claimed in a particular order the present invention is not necessarily limited to any particular ordering or combination of steps and or acts. Further the use of steps and or acts in the recitation of the claims and in the following description of the flowcharts for FIGS. is used to indicate the desired specific use of such terms.

In any event method further includes an act of identifying an endpoint mailing address. For example various layers within custom layer transport may be used to identify an endpoint mailing address for the client or server within addressing scheme for sending the Web Service message to a corresponding endpoint . Method also includes an act of generating a mail message using a MAPI compliant mail application. For example MAPI mail application may be used to generate outgoing mail message . The mail message should include the endpoint mailing address the Web Service message and an identifier for identifying the Web Service and the message exchange type for the Web Service message e.g. request response etc. .

Method further includes an act of sending the mail message to an outgoing mailbox of the MAPI compliant mail application. For example the custom layered transport can send mail message to MAPI mail application s s s outgoing mailbox for subsequent delivery to the endpoint over the mail message transport. As previously mentioned one or more APIs may be used in custom layer transport to generate the mail message and send the mail message to the outgoing mailbox of the MAPI compliant mail application .

Other exemplary embodiments provide that the Web Service message is a request message from the client and the endpoint is the Web Service . In this exemplary embodiment the mail message is sent to the endpoint mailing address. Another mail message is then received at an incoming mailbox of the MAPI compliant mail application . The mail message includes a mailing address for the client a Web Service response to the request and an identifier for identifying the Web Service and message exchange type indicating that the mail message includes the Web Service response . Thereafter the Web Service response may be sent to the client s Web Service application for further processing.

Based on the Web Service and the mail exchange type for the Web Service message method also includes an act of sending the Web Service message to the endpoint Web Service application. For example using various APIs within the custom layer transport after identifying that the mail message includes a Web Service message the Web Service message may be sent to the appropriate service application for processing.

Other exemplary embodiments provide that the Web Service message in method is a request from the client and the endpoint is the Web Service . In this embodiment another Web Service message may be received that includes an addressing scheme identifying the other Web Service message as a response to the request . The client s s mail address may then be identified within the addressing scheme for sending the response message to the client s s MAPI mail application . Another mail message is then generated using the MAPI compliant mail application which includes the client s s mailing address the response message and an identifier for identifying the Web Services and the Web Service message type as the response . The mail message is then sent to an outgoing mailbox of the MAPI mail application for subsequent delivery to the client over the mail message transport.

Method further includes an act of automatically generating the NPDL data structure. For example Web Service engine may retrieve from store an NPDL for the Web Service or otherwise automatically generate the NPDL data structure without accessing the Web Service application . Thereafter method includes an act of sending the NPDL data structure to the client. For example Web Service engine may send the NPDL data structure in a response message via the mail message transport. In this embodiment another mail message may be generated using the MAPI compliant mail application . The mail message including the NPDL data structure a mailing address for the client s s MAPI compliant mail application and an identifier for identifying the mail message as including the NPDL data structure. Thereafter the mail message can be sent to an outgoing mailbox of the server s s MAPI compliant mail application for subsequent delivery to the client s s MAPI compliant mail application .

The NPDL may be WSDL and the NPDL data structure may be an XML document. Further the mail message may be identified as requesting an NPDL data structure by including an identifier in the subject field of the mail message. Further the identifier may include a name for the Web Service application .

Embodiments within the scope of the present invention also include computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media can comprise RAM ROM EPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of computer readable media. Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination of hardwired or wireless links through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a conventional computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help transfer information between elements within the computer such as during start up may be stored in ROM .

The computer may also include a magnetic hard disk drive for reading from and writing to a magnetic hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disc drive for reading from or writing to removable optical disc such as a CD ROM or other optical media. The magnetic hard disk drive magnetic disk drive and optical disc drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer executable instructions data structures program modules and other data for the computer . Although the exemplary environment described herein employs a magnetic hard disk a removable magnetic disk and a removable optical disc other types of computer readable media for storing data can be used including magnetic cassettes flash memory cards digital versatile discs Bernoulli cartridges RAMs ROMs and the like.

Program code means comprising one or more program modules may be stored on the hard disk magnetic disk optical disc ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through keyboard pointing device or other input devices not shown such as a microphone joy stick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface coupled to system bus . Alternatively the input devices may be connected by other interfaces such as a parallel port a game port or a universal serial bus USB . A monitor or another display device is also connected to system bus via an interface such as video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The computer may operate in a networked environment using logical connections to one or more remote computers such as remote computers and . Remote computers and may each be another personal computer a server a router a network PC a peer device or other common network node and typically include many or all of the elements described above relative to the computer although only memory storage devices and and their associated application programs and have been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN that are presented here by way of example and not limitation. Such networking environments are commonplace in office wide or enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the computer may include a modem a wireless link or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing communications over wide area network may be used.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

