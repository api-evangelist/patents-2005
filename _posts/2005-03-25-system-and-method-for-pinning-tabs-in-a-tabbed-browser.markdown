---

title: System and method for pinning tabs in a tabbed browser
abstract: The techniques and mechanisms described herein are directed to a method for pinning a tab in a tabbed browser. Briefly stated, browsing software is configured to recognize a “pin” event, such as a hot key, a menu selection, and the like. Upon recognizing the pin event, the browsing software splits a display screen into a pinned window and a tabbed window. The tabbed window displays one or more open tabs and the content of the currently in focus tab. The pinned window may display content that was previously displayed within one of the tabs in the tabbed window or may display new content. The browsing software may configure the navigation of the pinned window differently than the navigation for the tabs in the tabbed window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921372&OS=07921372&RS=07921372
owner: Microsoft Corporation
number: 07921372
owner_city: Redmond
owner_country: US
publication_date: 20050325
---
This document generally relates to browsing software and more particularly to tabbed browsing software.

Browsing the World Wide Web the web the graphical portion of the Internet has become quite popular in recent years. A software program commonly referred to as a web browser or just browser provides an easy to use point and click interface for accessing various content on the web. Upon entering a web address or URL of a particular website the browser requests web pages from a web server hosting that website. The browser then interprets the web pages and displays the content on a display. The web pages include hypertext and hyperlinks that when selected cause the browser to request additional content associated with them. By selecting the hypertext and hyperlinks a user may conveniently navigate through pages of information commonly known as browsing or surfing the Internet.

Each time one of the hypertext or hyperlinks is selected the new content is downloaded into the current window. Depending on the network bandwidth this may cause a brief to extensive delay. For convenience additional windows may be opened to view multiple web pages. However after opening several web pages each in its own window the taskbar may become quite cluttered. This makes it difficult to re locate a particular web page. Tabbed browsers have been introduced to help manage the viewing of multiple web pages.

Tabbed browsers load web pages in tabs within the same browser window. Therefore only one item appears on the taskbar even though multiple web pages are loaded. Clicking on a hyperlink results in the web page being downloaded in the background into another tab. This allows a user to continue viewing the current web page without automatically switching to the other web page. When the web page is finished loading the user may click on the associated tab and view that web page. Tabbed browsing makes it easier and more convenient to view multiple web pages.

The techniques and mechanisms described herein are directed to a method for pinning a tab in a tabbed browser. Briefly stated browsing software is configured to recognize a pin event such as a hot key a menu selection and the like. Upon recognizing the pin event the browsing software splits a display screen into a pinned window and a tabbed window. The tabbed window displays one or more open tabs and the content of the currently in focus tab. The pinned window may display content that was previously displayed within one of the tabs in the tabbed window or may display new content. The browsing software may configure the navigation of the pinned window differently than the navigation for the tabs in the tabbed window. The pinned window provides a convenient way to compare multiple web sites review content identified within in search and the like.

Briefly the techniques and mechanisms described herein are directed to a method for pinning one of the tabs within a tabbed window displayed by a browser. The pinned tab may then be utilized as a hub for selecting news articles as a search page for selecting additional sites as a comparison page for comparing information from other sites and the like. The following discussion describes the pinning mechanism within a browser that supports tabbed heterogeneous windows. However after reading the following description one skilled in the art could incorporate a pinning mechanism into other types of tabbed browsers. As will be described in more detail below the present tab pinning mechanism provides a convenience that was unavailable until now.

The various embodiments of the tab pinning mechanism may be implemented in different computer environments. The computer environment shown in is only one example of a computer environment and is not intended to suggest any limitation as to the scope of use or functionality of the computer and network architectures. Neither should the computer environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in .

With reference to one exemplary system for implementing a tab pinning mechanism includes a computing device such as computing device . In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Thus computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connection s is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Various modules and techniques may be described herein in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implement particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media and communications media. 

Thread boundary represents a boundary between a single thread i.e. a frame thread that handles the processing for the components shown to the left of thread boundary and multiple threads that handle the processing for the components on the right of thread boundary . Each instance of content window is associated with at least one of its own threads. That thread also handles the processing for the associated toolbars menus custom bars status bars and content .

By having multiple threads at least one for each content window the architecture prevents a potential bottleneck caused by having only one thread handle the messages for all HTML rendering across the multiple tabs. In addition having multiple threads reduces the likelihood of unnecessary delays or timeouts when downloading web pages. Having multiple threads also makes the architecture more resilient because if a tab hangs only one tab hangs instead of potentially hanging all of the tabs. This is in contrast with other tabbed browsers that host their tabs on a single UI thread. In these tabbed browsers the entire application hangs when a single tab is blocked. Each individual thread may be prioritized.

Each of the components in architecture is now described. As mentioned above each content window is associated with its own toolbars menus custom bars status bars and content as needed. For example if there are five tabs open five instances of each add on e.g. custom bar toolbar etc are created and hooked to their own content. Similarly if menus or status bars are modified via internal logic HTML document hosting add ons or the like the menu or status bar associated with that content window is changed. The add ons and the content window operate in a well know manner. Because the add ons do not know about tabs the architecture does not modify the operation between the add ons and the content window. Instead the architecture wraps each set of content windows into one browser frame . While not shown there may be multiple browser frames each with a set of tabbed heterogeneous windows.

Content window maintains state for the content window such as size position visibility of frame elements and the like. The state may be persisted into a stream when the tabbed browser closes and then may be read when a new content window is launched. Alternatively the state may be saved in a registry and read from the registry when the new content window is launched.

The tab window lives on the frame thread. Each tab window is configured to manage communication between the outer frame components e.g. navigation bar browser frame etc and an individual tab. The tab window holds pointers to its associated content window and interfaces so that it can manage cross thread communication between the outer frame components and the individual content window . The cross thread communication may involve cross thread calls. In one embodiment calls from the browser frame to the content window may be asynchronous. The tab window is then responsible for marshalling the parameters and posting a message to the main window of content window . In contrast calls from the content window to the frame browser may be synchronous. The tab window is then responsible for marshalling the interfaces of the corresponding tab window . The tab window may also convert synchronous calls into asynchronous calls in order to reduce the likeliness that a tab will hang.

The tab window may also cache a limited amount of state. This allows the tab window to provide a quick synchronous lookup of state to other components. When the tab window receives an event from the content window that modifies the state the tab window propagates these events up to the tab window manager .

In addition the tab window exposes several operations that can be performed on a tab such as destroy set visibility set size set position and order. The tab window also exposes operations that the frame needs for asynchronously invoking a tab. These operations may be exposed via individual application programming interfaces API or through a generic API. For the present tab pinning mechanism each tab window may have its own set of characteristics. For example one of the tab windows may be a pinned window which has a slightly different navigation characteristic than other tabbed windows. The navigation characteristic for the pinned window may drive one of the other tabbed windows instead of refreshing itself when a link is activated on the page within the pinned window.

The tab window manager hosts multiple content windows via multiple tab windows . The tab window manager manages the overall state of each of the tabs. The state may include a top level URL a page title a back forward button availability a favorite icon for the current page a progress state for the current page security information reflected in the user interface e.g. HTTPs info and the like. The tab window manager may synchronously query the tab window for per tab data. In addition the tab window manager manages the operations performed on the tabs such as open close select move set size set position set order and the like. This is achieved by accessing the operations exposed via the tab window .

The browser frame hosts the navigation bar frame command bar tab window manager and the tab UI . The browser frame may also directly or indirectly host a rebar control not shown . The browser frame brokers communication between these hosted components.

The tab UI is configured to render the user interface for the collection of tab windows . In addition the tab UI controls the rectangle for the tabs browser region. Tab UI receives events from tab window manager via browser frame . The events pertain to the tabs being managed by tab window manager . The events include an OnTabListChanged event an OnTabChanged event an OnTabPinned event and the like. The OnTabListChanged event is sent by tab window manager when changes are made to a collection of tabs e.g. Open Close Reorder etc . The OnTabPinned event is sent by tab window manager when a tab has been pinned. The OnTabChanged event is sent by tab window manager when a single tab changes e.g. progress title URL . The corresponding tab window sends a notification to tab window manager which forwards the notification to tab UI . The notification identifies the tab. This method of communication keeps the communication serialized. In an alternate embodiment individual tab windows may directly call into tab UI . In addition there may be multiple tab UI components each one handling the same set of tabs but for a different location on the user interface. For example one tab UI may handle a tab row along the top of the display and another tab UI may handle a tab listview along the side of the display.

The frame command bar provides a set of commands that have been determined to be the most useful to the tabs. By having this set of commands readily available for any tab a user can conveniently locate one of the commands for any tab.

The tabbed window includes a tab band one or more tabs e.g. tabs and and content associated with the tab currently in focus e.g. tab shown in . Each of the tabs and may include a close box e.g. close box for closing the respective tab. In addition tabbed window may include a new tab for creating a new tab within the tabbed window . As additional tabs are opened the visible portion of each tab is reduced to accommodate the additional tabs.

In accordance with the present tab pinning mechanism the tabbed browser provides a mechanism for signaling a pin tab event. The mechanism may be a pin icon a context menu selection not shown and or the like on the user interface . The mechanism may also be a hot key not shown entered through a keyboard. Upon receiving the pin tab event the tabbed browser splits the display to accommodate the addition of a pinned window to an existing tabbed window . The tabbed browser software may reduce the size of the tabbed window to accommodate the pinned window .

The pinned window includes a pinned tab and pinned content associated with the pinned tab . In addition the pinned window may include a pin close box for the pinned tab . When the pin close box is selected the pinned window may close so that only the tabbed window remains on the display. However before closing the pinned tab the pinned tab and the pinned content may be transferred to a new or existing tab within the tabbed window. This allows the pinned content to still be available for other purposes.

The navigation bar may include an address bar a back button a forward button and a search box . The content of the address bar may be maintained for each tab. Thus when clicking through the tabs and the address bar may display the address for the currently selected tab i.e. the tab in focus . When the tab band is in focus the back button may change the selected tab to be the tab to the left of the currently selected tab in the tab row. The forward button may change the selected tab to be the next tab in the tab row moving to the left. The search box allows text to be entered and searched for in the currently selected tab. One will note that the content of the address bar may depend on whether the tabbed window or the pinned window is in focus. When the pinned window is in focus the address bar may display the address for the content in the pinned window. Likewise the back button and the forward button may depend on whether the tabbed window or the pinned window is in focus. When the pinned window is in focus the back button and the forward button may be used to view previous web pages that were visited.

In one embodiment items in the user interface that are per frame include the navigation bar the tab band and the pinned window . Items in the user interface that are per tab include content . Interestingly in one embodiment content may include different type of data sources. For example content may be a web page a shell folder a navigation based application and the like. This heterogeneous content may be hosted in a single frame. In another embodiment the content associated with each tab may all be web pages.

The present tab pinning mechanism provides a great convenience in many different scenarios. illustrate two scenarios in which a user may utilize the present tab pinning mechanism. The first scenario is when a user wishes to compare items from different web pages. In the past in order to achieve this the user would have had to open several windows and then position each one in a desirable configuration for viewing and comparing. illustrates a search scenario where a user performs a search and selects the desired web pages from the list of returned web pages. In the past when one of the desired web pages was selected from the list the search page would have been replaced with the content from the desired web page. The user would then have to navigate back to the search page to select another desired link.

At step the display is split so that there is a pinned window and a tabbed window. The split may allow half the display for the pinned window and the other half for the tabbed window. In another variation the pinned window may have one third of the display and the tabbed window may have two thirds of the display. The split may occur vertically or horizontally. These and other variations are envisioned. However it is desirable to split the display in a manner that allows the content of the pinned window to be easily viewed.

At step the content for the pinned window is displayed. Depending on the pin tab event the content may be new content or may be existing content from one of the tabs within the tabbed window. For example if there are several tabs open in the tabbed window the content of the tab associated with the hot key may be displayed in the pinned window. However if a search is initiated in one of the tabs in the tabbed window the search results i.e. new content may be displayed in the pinned window.

At step the tab in the tabbed window that has the same content as in the pinned window may be optionally removed from the tabbed window. This optional removal of the same content is especially desirable if a comparison is being performed between the pinned window and the other tabs in the tabbed window.

At step the characteristics of the pinned window may be modified. For example if the pinned window is used in a search scenario or a hub scenario it may be desirable to have the navigation of the clicked links occur in the tabbed window rather than within the pinned window. In these scenarios activating a link within the pinned window drives the creation of a new tab in the tabbed window that displays content associated with the activated link. However the pinned window may allow a specific link that targets itself to update the pinned window. For example a search page may have one or more links to subsequent search pages. If a user selects one of these additional search pages the new search page will replace the current search page in the tabbed window instead of opening a new tab in the tabbed window. Thus in one embodiment when the tabbed browsing software recognizes an anchor tag that has a target property that identifies itself as the target the tabbed browsing software will navigate in place within the pinned window. The default navigation characteristic may be to re direct the link to another tab within the tabbed window.

Reference has been made throughout this specification to one embodiment an embodiment or an example embodiment meaning that a particular described feature structure or characteristic is included in at least one embodiment of the present invention. Thus usage of such phrases may refer to more than just one embodiment. Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One skilled in the relevant art may recognize however that the present mechanism may be practiced without one or more of the specific details or with other methods resources materials etc. In other instances well known structures resources or operations have not been shown or described in detail merely to avoid obscuring aspects of the present consistent visual appearance technique.

While example embodiments and applications have been illustrated and described it is to be understood that the present technique is not limited to the precise configuration and resources described above. Various modifications changes and variations apparent to those skilled in the art may be made in the arrangement operation and details of technique disclosed herein without departing from the scope of the claimed invention.

