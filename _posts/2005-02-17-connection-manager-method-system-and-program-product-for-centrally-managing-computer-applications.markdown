---

title: Connection manager, method, system and program product for centrally managing computer applications
abstract: The present invention provides a connection manager, method, system and program product for centrally managing computer applications. Specifically, under the present invention, a connection manager is provided that centrally manages the applications through a queue broker, and communicates with components of a heartbeat manager and cleanup manager. The connection manager of the present invention provides, among other things, a centralized point for: (1) applications to directly connect to one another; (2) heartbeats of the applications to be monitored; and (3) any necessary cleanup actions to be implemented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07886295&OS=07886295&RS=07886295
owner: International Business Machines Corporation
number: 07886295
owner_city: Armonk
owner_country: US
publication_date: 20050217
---
This application is related in some aspects to the co pending U.S. application Ser. No. 11 073 793 and entitled Method System and Program Product for Monitoring a Heartbeat of a Computer Application which is herein incorporated by reference.

In general the present invention relates to computer application management. Specifically the present invention relates to a connection manager method system and program product for centrally managing computer applications.

As the pervasiveness of computer applications hereinafter applications continues to grow there is a growing need to be able to centrally manage applications implemented within a computer environment. For example a given environment might have several applications intended to operate at any particular time. These applications might desire to connect with one another directly. Moreover it could be the case that one or more of these applications is experiencing an error condition that prevents proper operation. Given that a number of applications could be implemented within the environment the complete management of such applications can be complicated.

Currently many environments implement messaging schemes to facilitate communication among the applications or components of the environment. One popular scheme is known as MQSeries messaging which is commercially available from International Business Machines Corp. of Armonk N.Y. Under MQSeries an application can utilize one or more message queues for handling messages. In addition MQSeries also provides a queue broker through which messages can be routed and or brokered.

Unfortunately no existing system takes advantage of existing messaging and queue technology in providing centralized management of applications. That is no existing system has devised a way to utilize messaging queues and queue brokers in order to manage the applications. In view of the foregoing there exists a need for a connection manager method system and program product for centrally managing computer applications. Specifically a need exists for a system that provides central management of connections between applications as well as a system that can monitor heartbeats of the applications to detect when an application fails. Still yet a need exists for the system to centrally facilitate any cleanup actions that must be taken such as when an application fails.

In general the present invention provides a connection manager method system and program product for centrally managing computer applications. Specifically under the present invention a connection manager is provided that centrally manages the applications through a queue broker and communicates with components of a heartbeat manager and cleanup manager. The connection manager of the present invention provides among other things a centralized point for 1 applications to directly connect to one another 2 heartbeats of the applications to be monitored and 3 any necessary cleanup actions to be implemented.

A first aspect of the present invention provides a connection manager for centrally managing computer applications comprising means for registering the connection manager with a queue broker means for monitoring a connection manager command queue that receives request messages from the queue broker that are posted to the queue broker by the computer applications means for processing the request messages monitored in the connection manager command queue means for communicating response messages pursuant to the processing of the request messages to the queue broker and means for establishing connections between the computer applications.

A second aspect of the present invention provides a method for centrally managing computer applications comprising registering a computer application with a connection manager and a queue broker receiving heartbeat messages in a heartbeat queue that is monitored by a heartbeat manager from the computer applications the heartbeat manager putting a dead application message in a connection manager command queue that is monitored by the connection manager if the heartbeat messages are not received and the connection manager putting a cleanup message in a cleanup queue that is monitored by a cleanup manager in response to the dead application message being put in the connection manager command queue.

A third aspect of the present invention provides a method for centrally connecting computer applications comprising registering a first computer application and a second computer application with a queue broker and a connection manager receiving on the connection manager a request from the first computer application to connect to the second computer application creating a connection record in a connection manager table that is managed by the connection manager creating a set of dynamic queues for communication between the first application and the second computer application creating a subscription for the first application and the second application and communicating a connection message from the connection manager to the first computer application and the second computer application.

A fourth aspect of the present invention provides a system for centrally managing computer applications comprising a connection manager for receiving and processing request messages from the computer applications a heartbeat manager for monitoring a heartbeat of the computer applications and a cleanup manager for implementing cleanup actions for the computer applications.

A fifth aspect of the present invention provides a program product stored on a computer readable medium for centrally managing computer applications the computer readable medium comprising program code for performing the following steps registering a connection manager with a queue broker monitoring a connection manager command queue that receives request messages from the queue broker that are posted to the queue broker by the computer applications processing the request messages monitored in the connection manager command queue communicating response messages pursuant to the processing of the request messages to the queue broker and establishing connections between the computer applications.

A sixth aspect of the present invention provides computer software embodied in a propagated signal for centrally managing computer applications the computer software comprising instructions to cause a computer system to perform the following functions register a connection manager with a queue broker monitor a connection manager command queue that receives request messages from the queue broker that are posted to the queue broker by the computer applications process the request messages monitored in the connection manager command queue communicate response messages pursuant to the processing of the request messages to the queue broker and establish connections between the computer applications.

A seventh aspect of the present invention provides a method for deploying an application for centrally managing computer applications comprising providing a computer infrastructure being operable to register a computer application with a connection manager and a queue broker receive heartbeat messages in a heartbeat queue that is monitored by a heartbeat manager from the computer applications put a dead application message in a connection manager command queue that is monitored by the connection manager if the heartbeat messages are not received and put a cleanup message in a cleanup queue that is monitored by a cleanup manager in response to the dead application message being put in the connection manager command queue.

An eighth aspect of the invention provides a computer readable medium that includes computer program code to enable a computer infrastructure to build social networks.

Therefore the present invention provides a connection manager method system and program product for centrally managing computer applications.

The drawings are not necessarily to scale. The drawings are merely schematic representations not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements.

For convenience purposes the Best Mode for Carrying Out the Invention will have the following sections 

As indicated above the present invention provides a connection manager method system and program product for centrally managing computer applications. Specifically under the present invention a connection manager is provided that centrally manages the applications through a queue broker and communicates with components of a heartbeat manager and cleanup manager. The connection manager of the present invention provides among other things a centralized point for 1 applications to directly connect to one another 2 heartbeats of the applications to be monitored and 3 any necessary cleanup actions to be implemented.

Referring now to a system for centrally managing computer applications hereinafter applications in a computing environment is shown. In general the present invention manipulates various queues to provide centralized management. To this extent depicts a queue broker having connection manager control queue broker control queue and connection manager response queue . It should be understood that in a typical embodiment the queues of the present invention are MQSeries queues while queue broker is an MQSeries broker although this need not be the case. In any event further depicts connection manager and applications A B.

To provide centralize management under the present invention connection manager and applications A B will first register subscribe with queue broker . The following steps describe the registration of connection manager and applications A B respectively 

Upon connection manager startup the connection manager sends a registration message to the broker control queue of queue broker . The registration generally comprises a Topic GTC Command. In addition connection manager will set connection manager command queue as the reply to queue. This enables any application request messages placed on the connection manager control queue to be forwarded to the connection manager command queue which is monitored read by connection manager . The connection manager will also set the connection manager return code queue as the queue for any return code e.g. MQSeries message report information to be placed. This way connection manager can check return codes from its publish and subscription actions to make sure that they were successful.

Upon startup of any application e.g. application A the application will send two registration messages to broker control queue of queue broker . The messages and their response queue s are as follows

 2 Topic GTC RemoteResponse. For this message application remote response queue is set as the ReplyToQueue.

These settings enable the application A to receive response messages back from connection manager after application A has sent a command or request message to the connection manager . In addition application A will set the application return code queue as the queue for any return code e.g. MQSeries message report information to be placed. This way application A can similarly check return codes from its publish and subscription actions to make sure that they were successful. In addition application A will publish a registration message to connection manager control queue which is put in connection manager command queue . Upon reading such a message connection manager will create a record for application A in connection manager database table .

Once connection manager and applications A B have registered subscribed applications A B can begin publishing commands messages e.g. register unregister connect disconnect to connection manager and then check the application return code queue to make sure queue broker successfully handled the publishing of the command.

Assume in an illustrative example that application A is issuing a request message. The request message will be received on connection manager control queue of queue broker . Upon receipt queue broker will move the request message to connection manager command queue which is monitored by connection manager . connection manager will read request message from connection manager command queue and process it and update connection manager table with the status. connection manager will then publish a response message in the application. Specifically connection manager will publish a response message to connection manager response queue . Queue broker will then put the response message in the appropriate application response queue either application response queue or remote application response queue . At this point in time application A can read the response from the response queue.

Referring now to connection manager is shown working in conjunction with a heartbeat manager and a cleanup manager according to the present invention. Although shown as separate components it should be appreciated that connection manager heartbeat manager and cleanup manager could be embodied as a single application. In a typical embodiment such an application can be a Java application which can centrally manage communications between applications through the use of a client side API Application Programming Interface and server side utilities that manage communications setup and cleanup. Moreover the majority of the code under the present invention can be located on the server side utilities so that the amount of coding needed to be done in the client applications can be reduced thus increasing client side performance by having the server perform many of the tasks. This will also increase quality by using proven and tested methods to cleanup rather than having each client code and execute these tasks individually.

In any event connection manager heartbeat manager and cleanup manager can actually comprise of three separate management Java programs or services. connection manager is designed to process commands messages sent from applications such as register unregister connect and disconnect commands. Heartbeat manager is used to process heartbeat messages sent out by the registered applications to let connection manager know that the application is still available and has not died unexpectedly. Cleanup manager is used to clean up queues and other entries in cleanup table after an application has died unregistered or disconnected.

A more detailed description of the functions and interrelationships between these components will be further described in conjunction with the illustrative usage scenarios and . However before such scenarios are described their basic functions will be described. As indicated above connection manager centrally manages applications such as application A. This includes among other things creating direct connections between applications. When application A is initially registered connection manager will create corresponding records for application A is connection manager table heartbeat database table as managed by heartbeat manager and cleanup database table as managed by cleanup manager . depict generic database table structures which would hold the information about application A. For example depict illustrative records for application A in connection manager table cleanup table and heartbeat table and heartbeat table respectively.

Regardless referring back to once application A is registered e.g. by publishing a registration message or the like to broker it will begin putting heartbeat messages in heartbeat queue . As described in the above incorporated patent application the heartbeat messages provide an indication that application A is still functioning. As such the heartbeat messages can be put in heartbeat queue at predetermined time intervals e.g. every X seconds . Should application A fail e.g. die or disconnect it will fail to put the heartbeat messages in heartbeat queue . In monitoring heartbeat queue heartbeat manager will detect any lack of heartbeat messages. Based thereon heartbeat manager will note the failure in the record for application A in heartbeat table and put a dead application message in connection manager command queue which is monitored by connection manager . Upon monitoring a dead application message connection manager will likewise note the failure in the corresponding record in connection manager table and put a cleanup message in cleanup queue which is monitored by cleanup manager . Cleanup manager will note such failure in the appropriate record in cleanup table and take any necessary cleanup actions. At that point the records for application A can be removed from all three tables and e.g. by connection manager or by the individual managers and .

Referring now to a more detailed diagram of system is shown. Specifically depicts all of the components of as well as additional details of connection manager . As shown connection manager includes connection manager registration system queue monitoring system application management system heartbeat interface system and cleanup interface system . The systems have the following functions 

connection manager registration system Register connection manager with queue broker by publishing a connection manager registration message to broker control queue .

Queue monitoring system Monitor connection manager command queue and connection manager return code queue .

Application management system Handle the management and processing of messages e.g. registration messages connection messages etc. received from applications A B e.g. from queue broker .

Heartbeat interface system Interface with heartbeat components such as heartbeat table to create a record for registered applications A B.

Cleanup interface system Interface with cleanup components such as putting cleanup messages in cleanup queue when a dead application message is monitored in connection manager control queue .

These components will be more specifically described in conjunction with the illustrative usage scenarios below.

Illustrative Scenario I Application A registers starts sending heartbeat messages and then unregisters.

Initially connection manager registration system will publish a registration message to broker control queue so that connection manager will be registered with queue broker . In addition as indicated above application A will register with queue broker by publishing a registration command message to connection manager control queue and broker control queue . Application A will then check the application return code queue to make sure that the publication was successful. Also application A can register with connection manager by publishing the registration message to connection manager control queue and then checking for a response in application response queue . This message will be put in connection manager command queue by queue broker which is monitored by queue monitoring system . At this point the application management system processes the registration command by placing an initial record in the connection manager table indicating the application A s unique id and its availability status. Heartbeat interface system also places an initial record into heartbeat table table so that the heartbeat manager begins to expect heartbeats from application A. In addition cleanup interface system can place a record for application A in cleanup table . Application management system then sends a response message back to the application A to let it know that it has been successfully registered. This response message is typically published by application management system to connection manager response queue and then put in application response queue where it is read by application A.

Application A will now start a heartbeat thread which begins to send heartbeat messages at a fixed rate called the HeartRate to heartbeat queue which is being monitored by the heartbeat manager . The heartbeat message will typically have an expiration date on the message set to 2 times the HeartRate 1 second. The reason for this is that old messages in heartbeat queue are cleaned up automatically if the heartbeat manager fails. Upon restarting heartbeat manager would now only have to process a maximum of two messages for each application because the others would have expired and been discarded.

Now assume that application A unregisters at this point by publishing an unregister command message. The message can be communicated to connection manager control queue and broker control queue of queue broker . From connection manager control queue the unregister message will be put in connection manager command queue which is monitored by queue monitoring system . Once monitored application management system will unregister application A by deleting its registration record in the connection manager table and sending a response message back to application A. As indicated above the response message will be published in connection manager response queue and then put in application response queue . Application A will then put a delete heartbeat message in heartbeat queue for heartbeat manager to process. Heartbeat manager will respond by deleting the record in the heartbeat table for application A. In a typical embodiment the delete heartbeat message is sent as a persistent message with no expiration date in case heartbeat manager is down. In such an instance heartbeat manager will delete the record when restarted. In any event at this point application A will now terminate the heartbeat thread.

In this illustrative scenario assume that both applications A B have already gone through the registration process as described above and are sending heartbeat messages to heartbeat queue . Further assume that application A sends a connection command message to connection manager requesting connection to the other application B e.g. by publishing the message to connection manager control queue which is then put in connection manager command queue . At this point application management system will create a connection record in the connection manager table and create the necessary dynamic queues for applications to communicate. Thereafter cleanup interface system will place the necessary records in the cleanup table for the dynamic queues.

In addition application management system will create a subscription for each of the applications A B using the dynamic queue names as reply to queues. This enables the system to take advantage of MQIntegrator message flows that could potentially modify translate a message as it flowed from one application to another. This also assumes that a message flow is defined. If one is not defined the connection message passes through as is. Regardless cleanup interface system then places the necessary records in the cleanup table to reflect the subscription. Once applications A B are directly connected they can communicate with one another using the dynamic queues. In a typical embodiment at least two types of dynamic queues can be created a command queue and a response queue. Messages send from one application to another can be put in and read from the command queue while responses can be put in and read from the response queue. Moreover for a connection between two applications A B a single command queue and a single response queue can be provided. Alternatively each application could have its own command queue and its own response queue.

If any of the above steps fail then the cleanup interface system will send a cleanup message to cleanup queue to clean up for that application e.g. based on application identification and delete all related resources which are the dynamic queues and subscriptions. Then application management system will send and appropriate message back to each application A e.g. via connection manager response queue and application response queue to let the applications A B know what happened.

Illustrative Scenario III An Application A sends a disconnect command message to connection manager .

In this scenario assume that application A was registered and connected to application B as described above. Further assume that application A desired to disconnect from application B. In this case a disconnection message will be published from application A to connection manager control queue which is then put in connection manager command queue as monitored by queue monitoring system . The disconnection message will be processed by application management system which will update the records in connection manager table to reflect that the applications A B have disconnected. Cleanup interface system will then send a cleanup message to cleanup queue to provide cleanup for the resources associated with applications A B e.g. the dynamic queues and subscriptions .

Shown below is illustrative syntax for the various actions commands carried out by applications or components within system as described above. It should be appreciated in advance that this syntax is intended to be illustrative only and that other implementations could exist.

Referring now to a more specific computerized implementation of the present invention is shown. As depicted a computer system is provided on which connection manager queue broker heartbeat manager cleanup manger and applications A B are loaded. Computer system is intended to represent any type of computer system capable of carrying out the teachings of the present invention. For example computer system could be a laptop computer a desktop computer a workstation a handheld device a client a server etc.

Moreover it should be appreciated that it is not necessary for all of these components to be loaded on a single computer system as shown. Rather these components could be loaded on two or more computer systems that communicate over a network such as the Internet a local area network LAN a wide area network WAN a virtual private network VPN etc. In such an embodiment communication throughout the network could occur in a client server or server server environment via a direct hardwired connection e.g. serial port or via an addressable connection that may utilize any combination of wireline and or wireless transmission methods. Conventional network connectivity such as Token Ring Ethernet WiFi or other conventional communications standards could be utilized. Moreover connectivity could be provided by conventional TCP IP sockets based protocol. In this instance an Internet service provider could be utilized to establish connectivity. Still yet connection manager heartbeat manager and cleanup manager could be provided as a single program as demonstrated by the dashed lines in . Although the various queues of and have not been shown in for simplicity purposes it should be understood that such queues are provided.

In any event a depicted computer system generally includes processing unit memory bus input output I O interfaces and external I O devices resources . Processing unit may comprise a single processing unit or be distributed across one or more processing units in one or more locations e.g. on a client and server. Memory may comprise any known type of data storage and or transmission media including magnetic media optical media random access memory RAM read only memory ROM a data cache a data object etc. Moreover similar to processing unit memory may reside at a single physical location comprising one or more types of data storage or be distributed across a plurality of physical systems in various forms.

I O interfaces may comprise any system for exchanging information to from an external source. External devices resources may comprise any known type of external device including speakers a CRT LED screen hand held device keyboard mouse voice recognition system speech output system printer monitor display facsimile pager etc. Bus provides a communication link between each of the components in computer system and likewise may comprise any known type of transmission link including electrical optical wireless etc.

Tables and can be any type of structures e.g. databases capable of providing storage for data under the present invention. As such tables and could include one or more storage devices such as a magnetic disk drive or an optical disk drive. In another embodiment tables and includes data distributed across for example a local area network LAN wide area network WAN or a storage area network SAN not shown . Although not shown additional components such as cache memory communication systems system software etc. may be incorporated into computer system .

Connection manager heartbeat manager and cleanup manager each include systems or means for performing the functions described above. Specifically they provide for the central management heartbeat monitoring and cleanup of applications A B. While shown and described herein as a way to centrally manage applications it is understood that the invention further provides various alternative embodiments. For example in one embodiment the invention provides a computer readable medium that includes computer program code to enable a computer infrastructure to centrally manage applications. To this extent the computer readable medium includes program code that implements each of the various process steps of the invention. It is understood that the term computer readable medium comprises one or more of any type of physical embodiment of the program code. In particular the computer readable medium can comprise program code embodied on one or more portable storage articles of manufacture e.g. a compact disc a magnetic disk a tape etc. on one or more data storage portions of a computing device such as memory and or a storage system e.g. a fixed disk a read only memory a random access memory a cache memory etc. and or as a data signal e.g. a propagated signal traveling over a network e.g. during a wired wireless electronic distribution of the program code .

In another embodiment the invention provides a business method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as an Internet Service Provider could offer to build social networks as described above. In this case the service provider can create maintain support etc. a computer infrastructure such as computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

In still another embodiment the invention provides a method for centrally managing applications. In this case a computer infrastructure can be provided and one or more systems for performing the process steps of the invention can be obtained e.g. created purchased used modified etc. and deployed to the computer infrastructure. To this extent the deployment of a system can comprise one or more of 1 installing program code on a computing device such as computer system from a computer readable medium 2 adding one or more computing devices to the computer infrastructure and 3 incorporating and or modifying one or more existing systems of the computer infrastructure to enable the computer infrastructure to perform the process steps of the invention.

As used herein it is understood that the terms program code and computer program code are synonymous and mean any expression in any language code or notation of a set of instructions intended to cause a computing device having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form. To this extent program code can be embodied as one or more of an application software program component software a library of functions an operating system a basic I O system driver for a particular computing and or I O device and the like.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims. For example connection manager is shown with a certain configuration of sub systems in for illustrative purposes only.

