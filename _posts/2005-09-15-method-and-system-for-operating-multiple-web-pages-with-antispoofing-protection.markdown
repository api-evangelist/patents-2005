---

title: Method and system for operating multiple web pages with anti-spoofing protection
abstract: Method and system for operating tabbed browsing with anti-spoofing protection. Tabbed browsing operates to detect pop-up dialogs sent from malicious web pages operating in a background browser. Keystrokes and keyboard messages are prevented from being delivered to background browsers. Unauthorized movement of background browsers are detected. URLs are inspected before being saved or restored.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028245&OS=08028245&RS=08028245
owner: Microsoft Corporation
number: 08028245
owner_city: Redmond
owner_country: US
publication_date: 20050915
---
This application is a continuation in part of prior application Ser. No. 11 135 993 filed May 24 2005.

The present invention relates to the field of computer software. More particularly the present invention relates to web browsers and software add ons to web browsers.

Today there are several web browsers for a user to operate when accessing the Internet. These web browsers vary greatly with feature richness and functionality. Because of the variety software manufacturers and developers understand that web browsers may determine the user s experience during operation. Therefore software manufacturers and developers are becoming more sensitive to enhancing the user s experience in using a particular web browser.

Web browsers may be categorized into two categories open source web browsers and closed source web browsers. The difference between the two browsers is that an open source web browser has its computer source code available to the public such as to independent software developers or third party vendors ISVs while a closed source web browser does not have its computer source code available to the public. With the open source web browser the public may review the computer source code make modifications of the computer source code with the owner s approval or create third party computer software based on the computer source code that has been reviewed. The third party computer software may be built with a knowledge and understanding of the computer source code of the open source web browser. This may result in a reduced amount of software testing to ensure the functionality and integration of the third party computer software with the open source web browser.

As stated earlier computer source code of the closed source web browser is not opened to the public. The owner of the closed source web browser has control over the modification of the computer source code. In this situation ISVs may not review access nor modify the computer source code. ISVs may find it difficult to create third party computer software although they are allowed to create such software that works with the closed source web browser. Usually the resulting third party computer software is referred to as add on software. Because add on software is created independently of the computer source code more software testing may be desired to test the functionality between the add on software and the closed source web browser. Software testing may be more involved and rigorous to ensure the functionality and integration of the add on software and the closed source web browser.

Along with the evolution of web browsers there has been an increase in software enhancements to web browsers. One of those software enhancements has been tabbed browsing. Tabbed browsing allows a user to have multiple browser views existing in one browser window. In the past a user had to open a separate window to access a web page. Opening multiple web pages would require opening multiple windows. With tabbed browsing multiple web pages may be opened inside of one window. The multiple web pages are identified by tabs that may be individually selected to access a particular web page.

Because of the multiple web page concept in one window tabbed browsing may facilitate unscrupulous operators of malicious web pages into tricking a user into entering sensitive information into the malicious web page. This technique is commonly referred to as phishing . There are a number of techniques that malicious web pages may use on an unsuspecting user operating tabbed browing.

In one scenario an unscrupulous operator might operate a malicious web page in a background browser. The background browser may show a popup dialog while a different and presumably trusted web page shows in a foreground browser. A user may be willing to respond to the popup dialog thinking it comes from the trusted site. This technique is commonly referred to as spoofing . For example the user may have two web pages in a tab band while operating tabbed browsing. The foreground browser may operate with a legitimate website while the background browser may operate with a malicious website. The background browser may load and show a dialog saying Enter your login and password . The user may be currently doing some other activity like reading email in the foreground browser with the legitimate website. So to the user the popup dialog may look as if it came from the legitimate website. The user would then enter credentials that would go directly to the malicious website.

In a second scenario again an unscrupulous operator might operate a malicious web page in a background browser. The background browser could run a high frequency timer say every 10 milliseconds that continuously grabs the input focus from a foreground browser. As typing occurs the keystrokes could go directly to the malicious website unbeknownst to a user. The malicious website could then forward the captured information as desired.

In a third scenario again an unscrupulous operator might operate a malicious web page in a background browser to cause the background browser to move into the visible area of the web browser. In some operations of tabbed browsing the background browsers are not actually hidden but are moved from the visible area moved off screen . An unscrupulous operator might use a script to move the background browser that is located out of the viewing area into the visible area of the screen or web browser. The purpose of this tactic might be to capture information from an unsuspecting user.

In a final scenario some web browsers use security context such as zones to restrict access to resources such as the user s file system registry etc. When some uniform resource locators URLs are stored as favorites in a web browser and re accessed at a later time the security context for the URL may be lost allowing an unsafe web page access to the resources. The security context may be lost if the user opens the URL in a tab.

Recognizing the state of the prior art a solution is needed to overcome the problems identified above. Specifically the solution needs to detect or mitigate phishing techniques to enable a user to use tabbed browsing without fear that information may be compromised or stolen.

The present invention generally relates to methods and systems for operating multiple web pages with anti spoofing protection. The present invention uses computer hardware and software web browsers operating systems and internet connections to provide tabbed browsing in a web browser. Tabbed browsing provides anti spoofing detection and mitigation for various forms of phishing .

In accordance with the present invention a computer implemented method for identifying unscrupulous popup dialogs when operating a web browser with tabbed browsing is provided that includes inspecting software messages associated with browser instances operating in tabbed browsing. A browser instance is automatically repositioned from a background position to a foreground position when the browser instance provides a dialog box a message box another web browser or another browser instance.

In another aspect a computer implemented method for preventing messages from being delivered to a browser instance in a background position when operating a web browser with tabbed browsing is provided that includes inspecting software messages associated with browser instances operating in tabbed browsing. Software messages are determined if they are a keystroke or a keyboard message. The keystroke or the keyboard message associated with the browser instance in the background position in tabbed browsing is discarded. The keystroke or the keyboard message is not processed.

In yet another aspect a computer implemented method for detecting unauthorized movement of a background window when operating a web browser with tabbed browsing is provided that includes inspecting software messages associated with browser instances operating in tabbed browsing. A browser instance is automatically repositioned from a background position to a foreground position when the browser instance in the background position moves or when the software messages are a set of instructions for window move messages.

In yet another aspect a computer implemented method for handling a malicious uniform resource locator URL when operating a web browser with tabbed browsing is provided that includes during a saving of the URLs or restoring of the URLs a validity of the URLs is verified respectively in the browser instances. The validity of the URLs is determined from a set of protocols. The saving of the URLs or the restoring of the URLs is allowed when a member of the set of protocols exists in the URLs.

In yet another aspect computer readable media having instructions stored thereon for facilitating tabbed browsing with anti spoofing protection is provided that includes a tab manager tab bar components browser interface components that operate to provide tabbed browsing. The tab manager operates to monitor messages between an operating system and the browser interface components to receive messages directed to the browser interface components to verify a position of browser instances with the tab bar components to identify spoofing from the messages or to mitigate spoofing from the messages.

The present invention will be better understood from the detailed description provided below and from the accompanying drawings of various embodiments of the invention which describe for example method and system for operating multiple web pages with anti spoofing protection. The detailed description and drawings however should not be read to limit the invention to the specific embodiments. Rather these specifics are provided for explanatory purposes that help the invention to be better understood.

The present invention provides tabbed browsing with anti spoofing protection. A set of tabs and buttons are located on a tab band within the browser window. Tabbed browsing operates to detect pop up dialogs sent from malicious web pages operating in a background browser inside of tabbed browsing. Furthermore it prevents keystrokes and keyboard messages from being delivered to background browsers it detects unauthorized movement of background browsers and it handles malicious uniform resource locators URLs .

Having briefly described an overview of the present invention an exemplary operating environment for the present invention is described below.

Referring to the drawings in general and initially to in particular wherein like reference numerals identify like components in the various figures an exemplary operating environment for implementing the present invention is shown and designated generally as computing system environment . The computing system environment is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment .

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the present invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks DVDs digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other programs and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the internet. The modem which may be internal or external may be connected to the system bus via the network interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in a remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Although many other internal components of the computer are not shown those of ordinary skill in the art will appreciate that such components and the interconnection are well known. Accordingly additional details concerning the internal construction of the computer need not be disclosed in connection with the present invention.

When the computer is turned on or reset the BIOS which is stored in the ROM instructs the processing unit to load the operating system or necessary portion thereof from the hard disk drive into the RAM . Once the copied portion of the operating system designated as operating system is loaded in RAM the processing unit executes the operating system code and causes the visual elements associated with the user interface of the operating system to be displayed on the monitor . Typically when an application program is opened by a user the program code and relevant data are read from the hard disk drive and the necessary portions are copied into RAM the copied portion represented herein by reference numeral .

The subject matter of the present invention is described with specificity herein to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies. Moreover although the terms step and or block may be used herein to connote different elements of methods employed the terms should not be interpreted as implying any particular order among or between the various steps herein disclosed unless and except when the order of individual steps is explicitly described.

The present invention may be implemented using an open source web browser or a closed source web browser. Software may be created in a number of ways to work with either browser to implement the present invention. More specifically the present invention discusses implementations of an embodiment whereby software is created without requiring access to the source code of the web browser to implement tabbed browsing. The software may be created to function as a plug in to the browser.

In a block diagram is shown illustrating a browser software an add on software and a tabbed browser . The present illustration shows an embodiment whereby add on software may be created without requiring access to the source code of browser software . The combination of browser software and add on software results in tabbed browser . Add on software operates by registering as a plug in with browser software . During this registration process browser software recognizes add on software and may allow add on software to manipulate software in browser software to provide additional features in the web browser namely tabbed browsing.

The terms add on extension and plug in software may be used in this document interchangeably. These terms refer to software that is either added to existing software compiled with existing software or executed with existing software to augment the existing software or to operate currently with the existing software to provide a feature enhancement.

In order to configure tabbed browser from the combination of browser software and add on software add on software may use a set of application programming interfaces APIs as shown in to interface with a web browser at browser software . Add on software may contain a browser interface component a tab bar component and a tab manager .

Add on software may contain one or more browser interface components . Each browser interface component controls a browser instance that exists in a browser window. A browser instance looks like a browser window but contains a corresponding tab located on a tab bar. The number of browser instances opened in one browser window may be identified by the number of tabs located in the tab bar.

Add on software may contain one or more tab bar components . Tab bar component manages the tab bar that appears in the web browser. Tab bar component may control user selectable buttons and the tabs that may appear on the tab bar. This control may include the size and shape of the buttons and tabs as well as the location of the buttons and tabs on the tab bar.

Tab manager exists to control a set of browser interface components and a set of tab bar components that may exist in add on software . Tab manager controls which browser interface component and tab bar component is associated with a particular browser window. For example a user may have two browser windows open with five browser instances opened in the first browser window and three browser instances opened in the second browser window. Add on software would operate to contain eight browser interface components along with two tab bar components and one tab manager . Five of the eight browser interface components and one tab bar component would be associated to the first browser window while three of the remaining eight browser interface components and the other tab bar component would be associated to the second browser window. Tab manager would manage the various software components keeping them associated to the correct browser windows.

APIs are computer software programs that operate to interface with other computer software programs or computer systems. APIs may be developed for various applications depending on the intent of the software developer. In APIs may be used with other computer software to provide tabbed browsing functionality as described earlier. The APIs provide various interfaces to perform various functions such as controlling a window handle facilitating browser control or controlling browser navigation. This list of functions for APIs is by no means limited to the ones described. Many different types of APIs may be used to implement an embodiment of the present invention. One may note that APIs may function at the operating system level as well as at the browser level.

Referring now to a block diagram is shown illustrating an exemplary operating environment in a configuration page . Configuration page illustrates information that may be provided when browser software and add on software operates together. Configuration page contains options for tabbed browsing with an outline window a tabbed browsing entry a tabbed browsing selection and a new tabs window . New tabs window contains a search selection a tabs instruction page selection a blank page selection and a browser home page selection .

Configuration page is merely exemplary for an implementation of an embodiment of the present invention. Configuration page may be changed to show other information as desired by one implementing the present invention.

Outline window contains an entry for tabbed browsing indicated by tabbed browsing entry . Tabbed browsing entry may be selected with a pointing device such as a mouse pointer connected to a computing device to show information illustrated next to outline window . The information relates to tabbed browsing and provides various options that may be selected or modified related to tabbed browsing.

Tabbed browsing selection provides a selectable box as an option to turn on or turn off tabbed browsing. New tabs window provides various information related to tabs such as the initial display of web pages when a new tab is created. In new tabs window a user has the option to select the initial web page to be created when a new tab is selected during the operation of tabbed browsing. The present invention illustrates four selections identified by search selection tabs instruction page selection blank page selection and browser home page selection . However other embodiments of the present invention may provide different selections in new tabs window .

Corresponding to is a method for configuring tabbed browsing illustrated in . This method assumes that a user is operating a computing device and a web browser that has installed add on software as a plug in to get tabbed browser . The user may operate tabbed browsing by determining first if the tabbed browsing feature has been selected in a step . This step is similar to accessing configuration page and selecting the box associated with tabbed browsing selection . Tabbed browsing may need to be configured as stated in a step . If tabbed browsing is not configured configuration options may be presented in a step . A user may configure tabbed browsing as illustrated in new tabs window . If tabbed browsing has been configured tabs and buttons may be shown in a tab band in a browser window in a step .

Once a user has selected the options that are desired to operate tabbed browsing the user may see a tab band as illustrated in . show an exemplary illustration of a tab band that appears when tabbed browsing is activated. contains a foreground tab a background tab a new tab button a quick tab button a first menu and a my routine button . The tabs and buttons shown in tab band are exemplary for implementing an embodiment of the present invention and are not meant to be the only tabs and buttons that may be implemented with the present invention. Other embodiments of the present invention may implement a different setup than the one shown and may implement different tabs and buttons from the ones shown. Furthermore tab band contains dynamic information that may change during the operation of tabbed browsing. The number of tabs the headings in the tabs and the size of the tabs may change depending on the number of web pages that are opened.

In foreground tab shows a tab for an exemplary web page identified as homepage.com. Foreground tab corresponds to a web page being viewed by a user. Foreground tab shows an active tab which is slightly more prominent in appearance in the list of tabs on tab band than the other tabs. Foreground tab changes position on tab band whenever a user selects a different tab to view the corresponding web page. Whenever a subsequent tab is selected that tab becomes foreground tab with its corresponding web page being shown and the previous tab becomes background tab . Typically there is usually one foreground tab as illustrated in . However it is possible to implement other embodiments of the present invention to contain more than one foreground tab .

Background tab corresponds to the tabs on tab band that are not foreground tab . Background tab may vary in number and are less prominent in appearance in the list of tabs on tab band than foreground tab . Like foreground tab background tab corresponds to a web page. However the web page is not currently being viewed by the user. If the user selects background tab the tab becomes foreground tab and the previous foreground tab becomes background tab .

A user may desire to create new tabs on tab band . The user may select new tab button to create a tab on tab band along with an associated web page. The type of web page that may open when new tab button is selected depends on the configuration options that may have been selected in new tabs window in . The user may create new tabs with new tab button as desired.

A user may desire to use quick tab button to create new tabs and open new web pages whenever a hyperlink is selected on the currently active web page. Quick tab button may be selected and may remain in a slightly depressed position in appearance to show that it is activated. When this happens a selection of a hyperlink on a web page may cause a new tab to appear on tab band with a new web page containing the information associated with the hyperlink. Correspondingly a subsequent selection of quick tab button after it has first been selected may cause quick tab button to become deactivated. When this happens quick tab button may raise in appearance to its former position as a button on tab band . This appearance may alert a user that the feature is deactivated.

In the same tab band is shown with an extended view of information that may be provided on the right side of tab band . In a scroll left button a scroll right button a second menu and a close button are shown. These are some examples of the buttons that may be implemented with the present invention to provide functionality that may be desired. As stated earlier other buttons menus and tabs may be provided to implement other embodiments of the present invention. One skilled in the art may change the operations of the buttons and tabs to suit particular needs.

Now turning to methods and are shown for operating tabbed browsing. In a web browser is opened at a computing device as shown in a step . Then a determination is made whether tabbed browsing has been activated as shown by the icon containing . was discussed earlier as the process for activating and configuring tabbed browsing.

In a step illustrates selecting new tab button to open a new web page in a tab. This corresponds to new tab button discussed in . The new web page may appear in accordance with the option selected in new tabs window in discussed earlier. After the new web page appears a user may type a desired web address in the address bar as shown in a step .

In a step illustrates selecting a button to open a link in a new tab. This corresponds to quick tab button also discussed in . A user may select a link also described earlier as a hyperlink on the active web page to open a new web page in a new tab in a step . Although not described in but discussed earlier the same button selected in step to activate the feature of step may be selected again to deactivate the feature. One ordinarily skilled in the art may note that there are other ways of opening a link in a new tab including right clicking on a hyperlink using a pointer device to open a new tab or holding down the Alt button on the keyboard of a computing device while clicking on a hyperlink using the pointer device.

In both a user may select different web pages by selecting different tabs in a step . The tabs may be selected with either a pointing device such as a mouse pointer or keystrokes on a keyboard connected to the computing device. As discussed throughout the figures by selecting a tab a web page appears in the browser window. If a different tab is selected a different web page appears over the previous web page.

As noted above the present invention may be implemented with either a closed source web browser or an open source web browser. Examples of commercially available web browsers include the closed source web browser known as INTERNET EXPLORER from the Microsoft Corporation of Redmond Wash. and the open source web browser known as MOZILLA FIREFOX of the Mozilla Foundation of Mountain View Calif.

A scenario may be described using the closed source web browser browser software known as INTERNET EXPLORER and tabbed browsing software add on software . Tabbed browsing software is executed to operate with the web browser as a plug in called a browser helper object. While loaded the tabbed browsing software receives browser events. A tab bar tab band is created and displayed above the browser window with a tab foreground tab and background tab after tab browsing is configured configuration page . The tab may show a user s home page or other web page.

As the user navigates the tab title changes to the corresponding web page title. A right mouse click on a tab may provide a web page navigation history for that particular tab. As the user requests new web pages steps or tabbed browsing software may allow the creation of new tabs and web pages which may be called browser instances in the browser window. As stated earlier a browser instance looks like a browser window but contains a corresponding tab located on the tab bar. Subsequent tabs are shown on the tab bar with previous tabs . The number of browser instances opened in one browser window may be identified by the number of tabs located in the tab bar.

When a second browser instance is opened with a new tab the previous first browser instance is hidden. The second browser instance is repositioned using the same coordinates as the now hidden first browser instance. As stated earlier a new tab is added to the tab bar for a new browser instance. The tab bar is shown above the second browser instance maintaining visibility to the user. If the user clicks the first tab the hidden first browser instance of the web browser reappears on top of the second browser instance which moves off the screen. The tab bar remains visible with the first browser instance.

Whenever the user accesses a tab the corresponding browser instance operates with compatibility and functionality to existing features in the web browser. This means that toolbars status bars and menus are accessible with each browser instance in tabbed browsing. An additional functionality of tabbed browsing is that the user may de activate tabbed browsing configuration page or remove the software completely add on software .

In a block diagram of an operating environment is shown with an add on software a set of application program interfaces APIs and an operating system OS . Add on software APIs and OS operate together to provide tabbed browsing as discussed above in . Add on software may include a set of browser interface components a set of tab bar components and a tab manager .

As shown the components in are similar to those shown in . However focuses on tabbed browsing with anti spoofing protection. For example tab manager may instruct OS using APIs to re direct messages destined for browser interface components to tab manager . This re direction enables tab manager to monitor messages that are being sent to browser interface components . This would include messages received as user input as well as inputs provided by APIs OS and other computer software operating in OS s environment. The re direction also enables tab manager to monitor software messages sent by browser interface components . If a browser instance sends a message tab manager would be able to intercept the message based on the message being associated with a member in browser interface components . For example if a browser instance sends a message to create a dialog tab manager would be able to intercept the message for the corresponding member associated with browser interface components .

Without anti spoofing protection tab manger would not call for the re direction of messages destined for browser interface components . Tab manager would function as tab manager in .

Tab manager may inspect messages destined for browser interface components to determine if keyboard inputs are being provided to a browser instance by a user. Whenever the user types on a keyboard the inputs are transmitted to the browser instance. If keyboard inputs are being received by the browser instance tab manager may interact with tab bar components to determine which browser instance is receiving the keyboard inputs. Tab bar components tracks the browser instances and knows the position of each browser instance. Tab manager wants to determine if the browser instance is in a foreground position on the user s screen or in a background position. If the browser instance is in the foreground position it may be presumed that the user desires to interact with the browser instance. However if the browser instance is in the background position the user may not be aware that the keyboard inputs are going to the browser instance in the background position. In this case tab manager may intervene to intercept the keyboard input or discard the keyboard inputs.

In implementing another embodiment of the present invention tab manager may verify a validity of a URL prior to the URL being saved in a folder or restored from the folder either on an individual basis or as part of a group of URLs. Tab manager may verify messages to and from browser interface components to verify if a URL is valid. In one embodiment of the present invention tab manager may filter messages and allow a set of protocols to be saved or restored. The set of protocols might include http https ftp about and file. However this set may be expanded or restricted based upon the particular implementation of the present invention.

If a URL does not contain a member of the set of protocols tab manager may block the URL from being saved or restored. The present invention implements these techniques to prevent various websites from gaining access to restricted areas on a computing device. The restricted area might include such areas as operating systems files a registry or data files.

Turning now to a process for operating tabbed browsing with anti spoofing protection is shown in a method . Method begins with the operation of tabbed browsing in a step . The computer software for tabbed browsing identified above as add on software inspects software messages destined for browser instances in a step . The inspection occurs with tab manager and browser interface components interacting with APIs and OS . In a step a determination is made if a software message comes from a browser instance in a background position and the browser instance attempts to create a dialog box a message box another web browser or another browser instance. If the determination is no tabbed browsing continues to operate until stopped in a step . If the determination is yes tabbed browsing repositions the browser instance from the background position to a foreground position in a step . This technique provides a way to alert the user that the dialog box the message box the web browser or the new browser instance that is created belongs to the browser instance that is brought to the foreground. After step tabbed browsing continues to operate until stopped in step .

In another process for operating tabbed browsing with anti spoofing protection is shown in a method . Method begins like method with the operation of tabbed browsing in a step . Method inspects software messages destined for browser instances in a step . In a step a determination is made if software messages are from a keystroke or keyboard message. If the determination is no tabbed browsing continues to operate until stopped in a step . If the determination is yes another determination is made if the software messages are associated with a browser instance in a background position in a step . Again if the determination is no tabbed browsing continues to operate until stopped in a step . If the determination is yes tabbed browsing discards the keystroke or the keyboard message associated with the browser instance in a step . This technique provides a way to prevent the inputs from an unsuspecting user from going to a web page that may be hidden or partially obscured from view. After step tabbed browsing continues to operate until stopped in step .

Turning now to yet another process for operating tabbed browsing with anti spoofing protection is shown in a method . Method begins like methods and with the operation of tabbed browsing in a step . In a step a user may attempt to save a URL into a favorite folder while in a step the user may attempt to restore a URL that has been previously saved. With either attempts in steps and the URL associated with a browser instance is verified for a validity in a step . The validity is determined by the existence of a set of protocols in a step . As discussed above the set of protocols may change but may include the protocols of http https ftp about and file. In a step the URL is allowed to be saved or restored if the URL contains a member of the set of protocols. For example if the URL begins with http https ftp about or file then the URL may be deemed safe to save or restore. This technique provides a way to prohibit or restrict access to the computing device. By preventing the saving or restoring of the URL that does not contain a particular protocol a malicious URL may be prevented from operating on the computing device to engage in malicious activity as discussed above. After step tabbed browsing continues to operate until stopped in step .

From the foregoing it will be appreciated that although specific embodiments of the invention have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except as by the appended claims.

