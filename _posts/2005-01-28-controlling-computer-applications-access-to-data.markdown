---

title: Controlling computer applications' access to data
abstract: Systems and methods are described that control attempts made by an application to access data. In one embodiment, the application is associated with a security token that includes an application ID. In operation, the system receives a request, initiated by the application, for access to the data. The system is configured to evaluate the request for access based in part on comparison of the security token and a listing of approved application IDs associated with the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07802294&OS=07802294&RS=07802294
owner: Microsoft Corporation
number: 07802294
owner_city: Redmond
owner_country: US
publication_date: 20050128
---
This patent application is related to U.S. patent application Ser. No. 11 046 607 titled Controlling Execution of Computer Applications filed on even day herewith commonly assigned herewith and hereby incorporated by reference.

The present disclosure generally relates to control over computer applications access to data and more particularly to associating a strong application ID with an application and allowing that application access to data only when the strong application ID is contained within an access control list associated with the data.

Existing general purpose operating systems generally control access to data such as files objects directories etc. by configuring users as security principals upon presentation of a user ID. When a user executes an application the user s ID is included within a security token associated with the application that is located within the kernel of the operating system. When the application requests data the user s ID within the security token is compared to an Access Control List ACL associated with the data. Where the user s ID is contained in the ACL and the ACL grants the desired access the application is provided access to the data.

In operation the above described configuration provides any application executed by the user to have the permissions owned by the user. In effect the application can do anything such as reading writing utilizing e.g. using email addresses and erasing data that the user has permission from the operating system to do.

Thus if the user inadvertently executes a malicious application that application will be able to steal erase maliciously utilize or otherwise damage files to which the user has permissions. This puts the user s data at substantial risk every time an unknown application is executed. The risk is compounded by attachments to email messages and files downloaded over the internet.

Conventional operating systems have sought to limit the damage that results from execution of malicious programs by structuring permissions such that many important files cannot be damaged by the user. Such a system can prevent a malicious application executed by the user from damaging important system files. For example the administrator may be given more permissions than the user who in turn may be given more permissions than a guest user. In particular the administrator may have permission to alter any file the user may have permission only to alter the user s files and the guest user may be barred from accessing the user s files and data. Such a structure has the benefit of limiting the damage that an application having been executed by users with lesser privileges can do. That is while a malicious application executed by the user may damage expose or delete the user s files objects and or data many system files may be protected from the application because the ACLs on the system files restrict access to the User ID.

However despite the protection given to some files conventional operating systems have failed to provide adequate protection to many of the user s files data etc. A particularly frequent example of this breakdown involves failure to protect the user s list of email addresses. This is particularly unfortunate because access to a user s email address list allows a malicious application to generate bogus email messages or spread via an email attachment.

Accordingly a need exists for new and better systems and methods wherein computer environments are configured to protect data files objects etc. More particularly a need exists for improvements to operating systems wherein data objects files etc are better protected.

Systems and methods are described that control attempts made by an application to access data. In one embodiment the application is associated with a security token that includes an application ID. In operation the system receives a request initiated by the application for access to the data. The system is configured to evaluate the request for access based in part on comparison of the security token and a listing of approved application IDs associated with the data.

The following discussion is directed to systems and methods that control attempts made by an application to access data. In one embodiment the application is associated with a security token including an application ID. The application is also associated with a user having a user ID who executed the application. In operation the system evaluates a request from the application for access to the data. The request is allowed or rejected based in part on comparison of the application ID from within the security token to a listing of approved application IDs. In other embodiments the user ID is also compared to a listing of approved user IDs associated with the data. Where both the application ID and the user ID are found in the listing of approved application IDs and user IDs associated with the data the application is given access to the data. In a principle advantage of the system and method of operation applications are prevented from accessing data for which they are not authorized to use. This prevents for example an application from accessing the email address list on a computer unless that list is configured to allow the application to make such an access. Accordingly computer data is better protected against misuse and corruption.

The following discussion is also directed to systems and methods that control the execution of applications. In one embodiment a process identifying security function is called by the CreateProcess API or a similar operating system structure. If the process identifying security function is able to obtain a strong application ID for the application and to locate that strong application ID within a database the application is allowed to execute. In a further embodiment the application is allowed to execute if the user provides a weak application ID. Allowing an application having only a weak application ID to execute is particularly useful for legacy applications in existence prior to implementation of the teachings discussed herein.

The application binary code and any other required files are developed in a conventional manner using a development environment one example of which is Microsoft s Visual Studio . The developer creates a developer signing key which is held in secret thereby allowing creation of a strong name for the application. The application metadata includes may include for example the application s name identity and publication key etc.

A build environment receives the application binary code files developer signing key and metadata . Using these inputs the build environment creates the installation package . The installation package may be configured for Internet download one or more CDs or another format as desired. In the example of the installation package includes an application manifest and the application install package . An installation package created at this stage is not yet trusted since it has not yet been signed.

In some implementations the developer signing key is used within the build environment to produce a strong name which can be located within the application manifest . The strong name is the signature public key associated with the developer signing key . In some configurations a strong application ID seen at in can be derived from the strong name .

The publisher certificate the user and policy input and the application install package including publisher signature are sent to an installation tool . The installation tool checks local machine policy and any user input and creates an application info store .

In one example the existing process may respond to the user double clicking an icon by generating the new process associated with the icon using information from the application info store . The existing user token is used together with information from the application info store to create the new security token which is associated with the new process in the kernel. The new security token may include the application ID provided by the application info store which thereby configures the application as a security principal.

Continuing to refer to the new process represents an application such as that created in the discussion of operating on a computer system. File may reside locally on the computer system or remotely on an alternate computer system. The new process is associated with a new security token typically in the kernel of the operating system. The new security token includes a user ID and an application ID . Where the application ID is cryptographically verified it can be considered a strong application ID. Thus the application ID may be strong or weak depending on whether it has been cryptographically verified. In a somewhat different implementation a strong application ID may be derived from the strong name . If the application running in process requests access to data in the file the application calls a function such as OpenFile in the example of a Windows environment which obtains authorization from a system security function .

Upon receiving the request the system security function examines the access control list ACL of the file . In one embodiment if the user ID associated with the application is found in the list of approved user IDs and also the application ID associated with the application is found in the list of approved application IDs then access is permitted . If one or more of the IDs from the security token are not found in the ACL then access is rejected . In another embodiment the application ID alone is checked against the approved application IDs to determine access permission.

Referring again to another characteristic of the process identifying security function is that it is configured to prevent the CreateProcess API from creating the new process if no application ID or an unsatisfactory application ID is established for the new process.

Exemplary methods for implementing aspects of controlling computer applications access to data will now be described with primary reference to the flow diagrams of . The methods apply generally to the operation of exemplary components discussed above with respect to . The elements of the described methods may be performed by any appropriate means including for example hardware logic blocks on an ASIC or by the execution of processor readable instructions defined on a processor readable medium.

A processor readable medium as used herein can be any means that can contain store communicate propagate or transport instructions for use by or execution by a processor. A processor readable medium can be without limitation an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples of a processor readable medium include among others an electrical connection having one or more wires a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a rewritable compact disc CD RW and a portable compact disc read only memory CDROM .

While one or more methods have been disclosed by means of flow diagrams and text associated with the blocks of the flow diagrams it is to be understood that the blocks do not necessarily have to be performed in the order in which they were presented and that an alternative order may result in similar advantages. Furthermore the methods are not exclusive and can be performed alone or in combination with one another.

At block an application is associated with a security token including the application s application ID thereby configuring the application as a security principal. Referring again to the example of the application is associated with a security token including the application ID . During operation of the application the security token and the application are associated in the kernel of the operating system.

At block a request typically made by the application and received by the operating system requests access to data. In the example embodiment of the application makes a request for data access to the operating system e.g. to OpenFile in a Windows environment which in turn requests authorization from a security system function .

At block the request to access data is evaluated based in part on comparison of the security token to a listing of approved application IDs. The example of shows that the system security function is configured to communicate with the access control list ACL . This communication allows the system security function to compare the application ID associated with the process with the list of approved applications IDs in the ACL. Note that the decision to allow or reject the request for data access may in one embodiment be based in part on a comparison of a user ID with a list of approved user IDs .

At block verification is made that an application ID of the application is a strong application ID. In a preferred embodiment the verification is made cryptographically such as by cryptographically verifying a signature. That is an application ID that has been cryptographically verified is a strong application ID . In embodiments illustrated by the strong name can be used to derive the strong application ID.

At block the security token is formed upon execution of the application. For example shows how the CreateProcess API or some analogous part of the operating system in use creates a new security token . As seen in the security token is associated with the process in the kernel of the operating system.

At block the application is configured as a security principal according to the strong application ID. In many implementations the user is also configured as a security principal. At block the strong application ID of the application is included within the security token thereby providing a cryptographically verified identity for the application.

At block the application is configured as a security principal upon verification of the application ID and at block the application ID is included within a second security token. Referring to the CreateProcess API or similarly configured process in the operating system utilized creates a new security token for the new process thereby configuring the application as a security principal. In the implementation of the new security token contains a strong application ID which is associated with the application in the kernel of the operating system.

At block the request is allowed if the application ID from the security token is contained within the access control list. More specifically as seen in where application ID is contained within the list of approved application IDs then the request for access to the data e.g. file is approved. Note that block describes a typical implementation wherein access to the data is allowed where both the user ID is included within the listing of approved user IDs and also the application ID is included within the listing of approved application IDs. In the example of the typical implementation would required that user ID is included within list of approved user IDs of the ACL and also that the application ID is included within the listing of approved application IDs before the process is allowed to access to the data file .

At block a strong application ID is identified. In one embodiment seen at block the identification is made cryptographically such as by performance of a verification using a public key. At block a confirmation is made that the verification provides evidence of the identity of the application. Typically the verification is made by comparing the result of the decryption to a known result where a match indicates validity of the strong application ID.

At block a token is configured including a strong application ID associated with the process and optionally including a user ID. Referring to the CreateProcess API creates the new process having a new security token . Referring to the new security token can include a user ID and an application ID . The application ID is a strong application ID if it has been authenticated cryptographically.

At block a determination is made if access to data should be permitted by comparing the token with an access control list associated with the data. Referring to the system security function determines if the OpenFile API will be allowed to open the file . The determination is made by comparing the token to the access control list . The application ID is compared to the approved application IDs and optionally the user ID is compared to the approved user IDs . Where the comparison s made indicates the system security function will give permission to the OpenFile API to open the file .

At block the application is allowed to update its own application code files if comparison of the security token with the access control list indicates. For example where the process has access to the file the process can update the binary code and configuration data files such as by downloading later revisions of this information via the Internet. Following the download some or all of the acquired data may be stored in file .

At block an application ID associated with the application is identified. Referring to the identification may be made by the process identifying security function . At block a strong application ID is identified. A strong name or strong application ID consists of the application s identity its simple text name version number and culture information if provided plus a public key and a digital signature. At block the application identity may be made by querying a database containing data associated with approved applications. Referring to the database is queried by the process identifying security function . The database can be queried to identify strong or weak application IDs associated with applications that are allowed to execute. Strong application IDs may be cryptographically verified while weak application IDs may be little more than the name of an application that is thereby given permission to execute.

At block an attempt is made to verify the application ID. In a preferred embodiment seen in block the application ID is verified using cryptography thereby establishing a strong application ID.

At block if the application s ID was not verified the user is asked to perform a validation of the application. Essentially the user is asked to vouch for the authenticity and or integrity of the application. For example the large numbers of applications currently in use do not provide a strong application ID and may be considered to be legacy applications. Where the user is certain that such a legacy application is benign the user may validate the application in response to the request to do so thereby establishing a weak application ID for the application. However if the user uncertain about the origin and or threat associated with the application the user may withhold verification of the application s ID.

At block if the application s ID was not verified the user is asked to provide access permissions to be granted to the new process. The access permissions indicate the files objects data etc. that the new process will be permitted to access. For example the user can decide whether to give the new process access to an email address list based on the reasonableness of the new process having a need to access that list.

At block where the application s ID was successfully verified the application is executed by creating a new process associated with the application. Referring to the new process is created by the CreateProcess API in response to success of the process identifying security function in establishing an application ID. At block in establishing the new process it is required that the code image to be used is part of the application associated with the verified application ID. Accordingly the code within the new process is known and trusted.

At block resources are allocated to the new process upon execution. In one embodiment seen at block the resources allocated are based on the type of ID established for the application from which the new process was formed. For example where a strong application ID was established more resources may be allocated than if a weak application ID was established. As seen in block the resources owned by the new process can be updated or otherwise altered by the new process.

The computing environment includes a general purpose computing system in the form of a computer . The components of computer can include but are not limited to one or more processors or processing units a system memory and a system bus that couples various system components including the processor to the system memory . The system bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus a Peripheral Component Interconnect PCI bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures.

Computer typically includes a variety of computer readable media. Such media can be any available media that is accessible by computer and includes both volatile and non volatile media removable and non removable media. The system memory includes computer readable media in the form of volatile memory such as random access memory RAM and or non volatile memory such as read only memory ROM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently operated on by the processing unit .

Computer can also include other removable non removable volatile non volatile computer storage media. By way of example illustrates a hard disk drive for reading from and writing to a non removable non volatile magnetic media not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from and or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are each connected to the system bus by one or more data media interfaces . Alternatively the hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a SCSI interface not shown .

The disk drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for computer . Although the example illustrates a hard disk a removable magnetic disk and a removable optical disk it is to be appreciated that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes or other magnetic storage devices flash memory cards CD ROM digital versatile disks DVD or other optical storage random access memories RAM read only memories ROM electrically erasable programmable read only memory EEPROM and the like can also be utilized to implement the exemplary computing system and environment.

Any number of program modules can be stored on the hard disk magnetic disk optical disk ROM and or RAM including by way of example an operating system one or more application programs other program modules and program data . Each of such operating system one or more application programs other program modules and program data or some combination thereof may include an embodiment of a caching scheme for user network access information.

Computer can include a variety of computer processor readable media identified as communication media. Communication media typically embodies computer readable instructions data structures program modules or other data and includes any information delivery media. By way of example and not limitation media includes computer readable media. Such media can be any available media that is accessible by a computer and includes by way of example volatile and non volatile media removable and non removable media and magnetic flash and optical media.

A user can enter commands and information into computer system via input devices such as a keyboard and a pointing device e.g. a mouse . Other input devices not shown specifically may include a microphone joystick game pad satellite dish serial port scanner and or the like. These and other input devices are connected to the processing unit via input output interfaces that are coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the monitor other output peripheral devices can include components such as speakers not shown and a printer which can be connected to computer via the input output interfaces .

Computer can operate in a networked environment using logical connections to one or more remote computers such as a remote computing device . By way of example the remote computing device can be a personal computer portable computer a server a router a network computer a peer device or other common network node and the like. The remote computing device is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computer system .

Logical connections between computer and the remote computer are depicted as a local area network LAN and a general wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. When implemented in a LAN networking environment the computer is connected to a local network via a network interface or adapter . When implemented in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the wide network . The modem which can be internal or external to computer can be connected to the system bus via the input output interfaces or other appropriate mechanisms. It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication link s between the computers and can be employed.

In a networked environment such as that illustrated with computing environment program modules depicted relative to the computer or portions thereof may be stored in a remote memory storage device. By way of example remote application programs reside on a memory device of remote computer . For purposes of illustration application programs and other executable program components such as the operating system are illustrated herein as discrete blocks although it is recognized that such programs and components reside at various times in different storage components of the computer system and are executed by the data processor s of the computer.

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed invention.

