---

title: Data cube script development and debugging systems and methodologies
abstract: The subject invention pertains to systems and methods that facilitate development and debugging of calculations in a multidimensional data environment or model. Data cube calculation scripts, including those provided in MDX (Multidimensional Expressions), can be executed or applied incrementally. Breakpoints can be set with respect to a calculation script and the cube state can be viewed and queried via a user interface. Users are enabled by the subject systems and methods to step through calculation scripts, identify the effects on a cube, and alter the script if the desired results failed to occur. In addition to debugging, the systems and methods can be employed for initial development of scripts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07694278&OS=07694278&RS=07694278
owner: Microsoft Corporation
number: 07694278
owner_city: Redmond
owner_country: US
publication_date: 20050520
---
This application claims the benefit of U.S. Provisional Application Ser. No. 60 586 586 filed Jul. 9 2004 entitled SYSTEMS AND METHODS OF CUSTOMIZING DATABASES. The entirety this application is incorporated herein by reference.

The subject invention relates generally to computers and more particularly toward development and debugging systems and methodologies and multidimensional data cubes.

Data warehousing and online analytical processing OLAP are widespread technologies employed to support business decisions and data analysis. A data warehouse is a nonvolatile repository for an enormous volume of organizational or enterprise information e.g. 100 MB TB . These data warehouses are populated at regular intervals with data from one or more heterogeneous data sources for example from multiple transactional systems. This aggregation of data provides a consolidated view of an organization from which valuable information can be derived. Though the sheer volume can be overwhelming the organization of data can help ensure timely retrieval of useful information.

Data warehouse data is often stored in accordance with a multidimensional database model. Conceptually in multidimensional database systems data is represented as cubes with a plurality of dimensions and measures rather than relational tables with rows and columns. A cube includes groups of data such as one or more dimensions and measures. A dimension describes an entity by which a user wants to analyze their data. A dimension is a collection of attributes that source the dimension s hierarchies and member properties. Accordingly data can be viewed at different levels of detail. Measures represent real values which are to be analyzed.

There are at least two primary reasons for the existence of multidimensional databases. First the multidimensional model is optimized to deal with large amounts of data. In other words it has a fast query response over large data volumes. Furthermore the multidimensional model is business user friendly. This enables users execute complex queries on a data cube. OLAP is almost synonymous with multidimensional databases.

OLAP is a key element in a data warehouse system. OLAP describes a category of technologies or tools utilized to retrieve data from a data warehouse. These tools can extract and present multidimensional data from different points of view to assist and support managers and other individuals examining and analyzing data. The multidimensional data model is advantageous with respect to OLAP as it allows users to easily formulate complex queries and filter or slice data into meaningful subsets among other things. There are two basic types of OLAP architectures MOLAP and ROLAP. MOLAP Multidimensional OLAP utilizes a true multidimensional database to store data. ROLAP Relational OLAP utilizes a relational database to store data but is mapped so that an OLAP tool sees the data as multidimensional. HOLAP Hybrid OLAP is an amalgam of both MOLAP and ROLAP.

Data cube cells and similarly members and the like can include either fact data or functions also referred to as calculations expressions . . . . Cells that include functions are called calculated cells. The value of these cells is defined by an expression in terms of one or more other cells and mathematical operations. The actual values of such cells are not known until runtime when the expressions or calculations are resolved. The formulas or expressions are defined and assigned to cells utilizing a calculation script for example specified in a multidimensional language such as MDX MultiDimensional eXpressions 

Even in simple OLAP applications there can be several intersections of calculations in the multidimensional space. When these intersections occur it is generally not clear which formula wins such is the nature of multidimensionality. Heretofore the process of building and debugging calculations scripts has been a difficult time consuming process that even the most advanced users consider to be tedious. Accordingly there is a need in the art for novel systems and methods to facilitate development and debugging of cube calculations scripts among other things.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

Briefly described the subject invention concerns novel development and debugging systems and methods for multidimensional data cubes. More particularly the systems and methods facilitate development and debugging of calculation scripts. Calculations scripts can specify formulas or expressions for cube cells members measures and the like. Development and debugging of calculations in a multidimensional model especially when complex is quite difficult and convoluted. The subject invention provides systems and methods to reduce the burden with respect to these processes.

In accordance with an aspect of the invention a development and debugging system is disclosed that includes an interface component and a debug engine. The interface component such as a graphical user interface receives and provides data to and from users. The debug engine obtains data and or instructions from the interface component and facilitates execution of calculation scripts identified via the interface component. The debug engine can also retrieve data from a cube and provide it back to the interface component. This enables users such as database administrators to analyze the cube state generated as a result of application of particular calculations. A user can then alter a calculation script and reapply the altered calculations in an iterative process to develop or debug calculation scripts including but not limited to MDX scripts.

Development and debugging methodologies are also disclosed in accordance with an aspect of the invention. For instance a method of calculation script development is disclosed that clears calculations on a cube within a session executes a calculation script and returns cube state data to a user interface. The method further includes receiving a clear calculation command to initiate clearing of calculations among other things.

In accordance with an aspect of the invention cube calculations can be cleared or rolled back to facilitate script development and debugging. In other words formula assignments can be stripped way from a cube returning the cube to its initial or pre script calculation state In this manner the impact of calculations and alterations thereof can be evaluated by a debugging entity independent of the cube s previous state. Rolling back can be initiated employing an instruction including but not limited to Clear Calculations in MDX. A server database management system query execution engine cube management system of the like can receive and execute such a command thereby removing the calculations on a particular cube.

In accordance with another aspect of the invention the debugging and development of a calculation script can occur within the scope of a user session. Through the isolation of a session multiple users can interact with the same cube that is simultaneously being debugged or produced. Clearing all the calculations can thus be limited to the scope of the session in which it is requested. Other users can still interact and query the cube without any disruption or change to the original model.

According to still another aspect of the invention the calculation script can be executed without the need to rebuild and redeploy the script after alterations are made. Thus modification can be made on the fly during a development or debug process such that a change can be made executed and results displayed.

In accordance with yet another aspect of the invention development and debugging is supported utilizing a plurality of user credentials or security roles. In this manner a user can change their user or security context on the fly during a development or debugging process. This is advantageous in detecting breaks in calculations in a number or different security contexts.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

The present invention is now described with reference to the annexed drawings wherein like numerals refer to like or corresponding elements throughout. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention.

As used in this application the terms component system engine and the like are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an instance an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

The word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Furthermore the present invention may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed invention. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the subject invention.

Turning initially to a multidimensional data structure debugging system is illustrated in accordance with an aspect of the subject invention. System includes an interface component and a debug engine . Interface component facilitates user interaction with the debugging system. The interface component can receive input and provide data to a user. This can be accomplished via text graphics sound and the like. Such interface objects can be organized in a fashion that makes user interaction therewith easy and intuitive. Users can input or specify a script or a series of commands and or statements for application against a multidimensional database structure such as a cube. In accordance with an aspect of the invention the script can be specified utilizing multidimensional expressions MDX . Such a script can be employed to populate a cube or cells thereof with calculations. In other words the script can assign expressions to cells that can be evaluated later upon query for instance. Interface component is communicatively coupled to the debug engine . Debug engine can execute or apply the script identified by the interface component and return result data back to the interface component . In particular a calculation script can be executed with respect to a data cube and the cube state can be returned to the interface component . If the cube state is not what is desired a user can modify the script utilizing interface component and then reapply the script to the cube. According to an aspect of the subject invention the debug engine does not need to be rebuilt and redeployed in response to the new script. The script can be treated as a loop thus eliminating these time consuming processes. Furthermore and in accordance with another aspect of the subject invention the debug system does not affect the ability of others to query a data cube being debugged. Debug operations and executions for a given cube are within the scope of an individual user session. Still further yet the debug system comprising the interface component and debug engine can be employed not only to debug an existing script but also to facilitate generation of a script.

Turning briefly to a script editor component is illustrated in further detail in accordance with an aspect of the subject invention. In particular the script editor component can include a code component and break component . Code component can display a script and receive alterations thereto including additions deletions as well as modifications. Furthermore the code component can provide additional functionality such as intelligent assistance. Break component is operative to set script breakpoints as specified by a user. A break point identifies a particular portion or point of code in which execution is to stop in all instances or in accordance with a set of criteria. The debug engine can execute up to the set breakpoint to allow analysis of the cube state at that point. Multiple breakpoints can be employed utilizing break component to enable analysis of state at different points. Additionally or alternatively the debug engine can be forced to step through script instructions thereby allowing state to be analyzed after every instruction.

Returning to browser component provides a mechanism to present state data received from the debug engine among other things. Browser component is related to script editor as the cube state presented by browser component results from the execution of a particular script loaded and or written using script editor component . Turning briefly to a browser component is illustrated in further detail in accordance with an aspect of the subject invention. More specifically browser component can include a view component and a query view component . The view component is a mechanism for presenting cube state data. For example the browser component can format received data into a graphical representation such as a table to aid in analyzing the state. The table data can be refreshed with every statement or command executed. Furthermore the view component can highlight cells or data that has changed since the last statement. In this manner a debugger could step through a script and easily identify the cells that changed as a result of application of calculation. View component can present a default view of a cube state. Browser component can also include a query view component for specification and presentation of custom data views. Query view component receives one or more statements or queries that produce particular a result set. By virtue of this component a user can specify particular queries to determine how a script affects a particular result set. The specified queries can be executed on the backend with the assistance of the debug engine and or a query execution engine. The results can then be displayed. Additionally the data changed as a result of application of a calculation or script command can be highlighted to facilitate debugging.

Turning briefly to an assist component is illustrated in further detail in accordance with an aspect of the subject invention. In particular assist component can include a metadata component a function component and a template component . The metadata component can present display or otherwise provide information regarding cube metadata. Upon opening or specifying a script metadata component can retrieve and present cube metadata to a user. This can help a user in both specification and debugging of a script on a cube. Assist component can also include a function component . Function component can provide popular or useful functions that a user may want to specify in a calculation script. Function component can thus provide functions for selection and inclusion in the calculations script. For example a user may cut and paste or drag a function into the script editor portion of the interface. Additionally or alternatively the function component can display a list of functions currently specified on the cube. Upon select of such a function the location of such a function can be identified in the script for example via highlighting. Furthermore the assist component can include a template component . The template component can provide or otherwise present one or more templates structures or patterns that can be employed to assist a user in creation of a calculations script.

The aforementioned systems have been described with respect to the interaction between several components. Furthermore for purposes of clarity and simplicity a number of systems were provided and described to emphasize an aspect of the subject invention. It should be appreciated that such systems can include those components specified therein some of the specified components and or additional components specified in other systems. For example a debug system can include an interface component that includes one or more subcomponents such as a script editor component a browser component a user selection component an assist component a project component or any combination thereof. The subcomponents can also include any combination of subcomponents as well. Additionally it should be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several subcomponents. The components may also interact with or be integrated with one or more other components or systems not specifically described herein but known by those of skill in the art. By way of example and not limitation aspects of the subject invention pertaining to development and debugging of data cube calculation scripts can be integrated into a more comprehensive integrated development environment IDE or system also known as integrated design environment or integrated debugging environment . Such IDEs can support the development and debugging of one or more programming languages or scripts.

Furthermore as will be appreciated by artisans of ordinary skill in this field various portions of the disclosed systems above and methods below may include or consist of artificial intelligence or knowledge based components sub components processes means or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as well as efficient.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the present invention will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the present invention is not limited by the order of the blocks as some blocks may in accordance with the present invention occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodology in accordance with the present invention.

Additionally it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media.

Turning to a script development methodology is provided in accordance with an aspect of the subject invention. At calculations are cleared from a cube. Cube cells can include either data from an underlying source i.e. fact data or user defined formulas or expressions defining how the cell data is to be computed. Initially a data cube is empty. It can subsequently be loaded or populated with fact data. Calculations can be specified for other cells that define cell data. At such calculations are cleared or rolled back returning a cube and associated cells to the initial state prior to assignment of calculations. At a calculation script can be executed or applied. In this manner calculations can be reapplied or assigned to cells or groups of cells one at a time. At cube data can be returned. For example if cell C was initially zero and the script assigned a formula C C C where C 4 and C 3 then the data returned would be seven as C 7. It should be appreciated that cube data can be returned incrementally at as calculations are applied. This enables the impact of each calculation to be assessed. Furthermore it should be noted that the execution at can be up to a specified breakpoint and that execution can proceed incrementally from breakpoint to breakpoint. Additionally execution with respect to breakpoints may include starting stopping and step over.

In order to provide a context for the various aspects of the invention as well as the following discussion are intended to provide a brief general description of a suitable computing environment in which the various aspects of the present invention may be implemented. While the invention has been described above in the general context of computer executable instructions of a computer program that runs on a computer and or computers those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multiprocessor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like. The illustrated aspects of the invention may also be practiced in distributed computing environments where task are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the invention can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects of the invention includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 11 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the present invention can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like displays e.g. flat panel and CRT speakers and printers among other output devices that require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 802.3 Token Ring IEEE 802.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems power modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the present invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly the present invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes has and having are used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

