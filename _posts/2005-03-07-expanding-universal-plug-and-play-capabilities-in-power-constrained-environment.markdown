---

title: Expanding universal plug and play capabilities in power constrained environment
abstract: This invention describes a method for expanding universal plug and play capabilities in a power constrained environment thus facilitating communication between two terminals with universal plug and play (UPnP) application capabilities, wherein one of the terminals is in a sleeping mode. The present invention can be applied (but not be limited) to mobile terminals, wireless devices, portable devices, mobile communication devices, mobile phones, etc. The invention describes a mechanism in which the UPnP application dynamically instructs the TCP/IP stack to tune-up its parameters so that it can tolerate longer delays and timeouts, due to the fact that it operates in a power constrained UPnP environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935405&OS=08935405&RS=08935405
owner: Nokia Corporation
number: 08935405
owner_city: Espoo
owner_country: FI
publication_date: 20050307
---
This invention generally relates to communication systems and more specifically to expanding universal plug and play capabilities in power constrained environment

Universal plug and play UPnP technology defines an architecture for pervasive peer to peer network connectivity of intelligent appliances wireless devices and PCs. It is designed to bring easy to use flexible standards based connectivity to e.g. ad hoc or unmanaged networks whether in the home in a small business public spaces or attached to the Internet. The UPnP technology provides a distributed open networking architecture that leverages TCP IP and the Web technologies to enable seamless proximity networking in addition to control and data transfer among networked devices.

The UPnP Device Architecture UDA is designed to support zero configuration invisible networking and automatic discovery for a breadth of device categories from a wide range of vendors. This means a device can dynamically join a network obtain an IP address convey its capabilities and learn about the presence and capabilities of other devices.

A Berkeley socket application programming interface API comprises a library for developing applications written in C programming language that access a computer network. Berkeley sockets also known as the BSD Berkeley software distribution socket API originated with the 4.2BSD system as an API. The BSD socket API forms the de facto standard abstraction for network sockets. Most other programming languages use a similar interface as the C API.

Existing standards e.g. UPnP protocols in the Digital Home are not friendly towards constrained devices that have a limited battery lifetime and also limited bearer bandwidth e.g. BLUETOOTH . The UPnP protocols do not have power saving requirements during design time which prevents mobile constrained devices to use power saving techniques in order to extend a battery lifetime. The UPnP protocols allow a device to be active present in the network in which case the device needs to have the communication subsystem up i.e. powered all the time or otherwise to be disconnected from the network. Obviously this limited behavior is not enough for constrained devices that want to preserve power by intelligently adapting the power states of communication subsystems.

Terminals can be connected to the network using a wired or a wireless including e.g. BLUETOOTH technology. Some of the terminals are always connected to a power source e.g. desktop computers TV sets personal video recorders etc. some are battery powered e.g. mobile phones personal digital assistants etc. and some can have both characteristics e.g. laptop computers . In order to increase the lifetime of a battery for portable electronic devices battery operated a quite common approach is to put the communication subsystem in a low power mode state e.g. a power saving mode for a WLAN wireless local area network or a sniff and hold mode for a BLUETOOTH. While the communication subsystem e.g. a terminal is in a power saving mode the ability to transmit and receive messages over the network to from that subsystem through the network is dramatically reduced making the responsiveness of that subsystem very low or non existent. To compensate this drawback an access point of the network is usually caching the messages until the sleeping device is woken up.

To further enhance this power saving scheme interworking functions can be added to access points so that they can intelligently filter the communications cached in the buffer. One of the interworking functions that can be implemented in access points operating in the UPnP networks is to filter the UDP user datagram protocol multicast traffic for the devices that are in the power saving mode. Moreover the interworking function detects when the TCP traffic is intended for the terminals which is e.g. in a sleeping mode and can immediately start the wake up procedure for the respective device. This prior art procedure is described e.g. in Finnish patent application No. 20040179 Optimization of Data Transfer between Networked Devices by Vlad Stirbu and Mika Saaranen filed on Feb. 6 2004

Furthermore the sleeping mode or similarly an intermediate mode i.e. less active than normal but more active than the sleeping mode provides high energy saving level with assumption that the terminal such as a mobile device can be woken up in a reasonable time. Even in case of a standby mode exploiting bearer level energy savings where the link can be activated by the incoming traffic it requires unreasonably significant time to wake up. Sleeping mode is by its definition slower slower than e.g. less stringent modes i.e. it requires more time to wake up the device and therefore more TCP protocol delays and re transmissions occur. So because the receiving device is in the standby mode it takes longer time for it to respond. This time may or generally will exceed a TCP retransmission time or even a socket time out may occur. The socket time out is a part of the socket implementation defining the time that can be used for establishing a connection before giving up this attempt. This is separate time out mechanism than defined for TCP protocol itself. This leads to a poor usage of networking resources quite frequently causing spurious errors visible to the users. This is naturally leading to a degraded user experience.

The object of the present invention is to provide a method for expanding universal plug and play capabilities in a power constrained environment thus facilitating communication between two terminals with available universal plug and play application capabilities on the terminals wherein one of them is in a sleeping mode.

According to a first aspect of the invention a method for communicating of a terminal with a further terminal through a network in a power constrained environment using a communication application available in the terminal comprises the steps of receiving by the terminal a notification about a power saving mode of the further terminal providing to the network by a protocol stack of the terminal a communication signal intended for the further terminal by transmitting the communication signal according to a pre selected procedure and receiving by the terminal after the further terminal is woken up an acknowledgement of receiving the communication signal by the further terminal wherein the terminal waits for the acknowledgement at least for a time interval needed for that further terminal to wake up before terminating the communicating based on a predetermined criterion facilitated by the communication application of the terminal.

Still further according to the first aspect of the invention the communication application may be a universal plug application the protocol stack may be a TCP IP stack and there may be no connection established between the terminal and the further terminal before the step of receiving by the terminal the notification and wherein before the step of the providing to the network by the terminal the communication signal the method may comprise the steps of creating by the universal plug and play application a new socket in the TCP IP stack of the terminal for communicating with the further terminal setting by the universal plug and play application a new socket option SO CONTIMEO defining in the TCP IP stack a time limit for establishing the connection with the further terminal and instructing the TCP IP stack by the universal plug and play application to establish the connection with the further terminal. Further the communication signal may be provided to the network in response to the instructing the communication signal may be a connection communication signal which initiates establishing of the connection the acknowledgement may be an acknowledgement for establishing a successful connection between the terminal and the further terminal and the time interval may be defined by the time limit defined by the new socket option SO CONTIMEO.

According further to the first aspect of the invention the communication application may be a universal plug application the protocol stack may be a TCP IP stack and there may be no connection established between the terminal and the further terminal before the step of receiving by the terminal the notification and wherein before the step of the providing to the network by the terminal the communication signal the method may comprise the steps of creating by the universal plug and play application a new socket in the TCP IP stack of the terminal for communicating with the further terminal and instructing the TCP IP stack by the universal plug and play application to establish the connection with the further terminal. Still further the communication signal may be a connection communication signal which initiates establishing of the connection and the acknowledgement may be an acknowledgement for establishing a successful connection between the terminal and the further terminal and wherein the step of the providing to the network by the terminal the communication signal may comprise the steps of providing to the network by the terminal the communication signal in response to the instructing by the re transmitting the communication signal according to the pre selected procedure receiving a time out error by the universal plug and play application further instructing the TCP IP stack by the universal plug and play application to establish the connection with the further terminal by the re transmitting the communication signal according to a pre selected procedure after a predetermined time period which is at least equal to the time interval needed for that further terminal to wake up and providing to the network by the terminal the communication signal in response to the further instructing by re transmitting the communication signal according to the pre selected procedure.

According still further to the first aspect of the invention the communication application may be a universal plug application the protocol stack may be a TCP IP stack and there may be a connection established between the terminal and the further terminal before the step of receiving by the terminal the notification and a socket may be already created by the universal plug and play application in the TCP IP stack of the terminal for communicating with the further terminal and wherein before the step of the providing to the network by the terminal the communication signal the method may comprise the steps of setting by the universal plug and play application a socket option SO SNDTIMEO defining in the TCP IP stack a time limit for sending the communication signal by the terminal and a socket option SO RCVTIMEO defining in the TCP IP stack a time limit for receiving response data from the further terminal and instructing the TCP IP stack by the universal plug and play application to send the communication signal to the further terminal. Further still the communication signal may be provided to the network in response to the instructing the communication signal may be a data communication signal containing data sent to the further terminal the acknowledgement may be an acknowledgement of successfully receiving the data communication signal by the further terminal and the time interval may be defined by the time limit defined by the socket option SO SNDTIMEO. Still further the first aspect of the invention may further comprise the step of sending a further data communication signal by the further terminal to the terminal and receiving the further data communication signal by the terminal if the time limit defined by the socket option SO RCVTIMEO for the receiving data from the further terminal is not expired.

According further still to the first aspect of the invention the operations performed on or by the protocol stack may be facilitated by a Berkeley software distribution BSD socket application programming interface API .

According yet further still to the first aspect of the invention the terminal or the further terminal may be a mobile terminal a wireless device a portable device a mobile communication device or a mobile phone.

According to a second aspect of the invention a computer program product comprises a computer readable storage structure embodying computer program code thereon for execution by a computer processor with the computer program code characterized in that it includes instructions for performing the steps of the first aspect of the invention indicated as being performed by any component or a combination of components of the terminal the further terminal or the network.

According to a third aspect of the invention a terminal capable of communicating with a further terminal through a network in a power constrained environment comprises a protocol stack responsive to a notification about a power saving mode of the further terminal for providing to the network a communication signal intended for the further terminal by transmitting the communication signal according to a pre selected procedure a communication application for providing to the protocol stack instructions according to a predetermined criterion defining a waiting period for receiving an acknowledgement of receiving the communication signal by the further terminal after the further terminal is woken up wherein the waiting period is at least as long as a time interval needed for the further terminal to wake up.

Further according to the third aspect of the invention the communication application may be a universal plug application the protocol stack may be a TCP IP stack and there may be no connection established between the terminal and the further terminal before receiving by the terminal the notification and wherein before the providing to the network by the terminal the communication signal the universal plug and play application may provide creation of a new socket in the TCP IP stack for communicating with the further terminal setting a new socket option SO CONTIMEO defining in the TCP IP stack a time limit for establishing the connection with the further terminal and instruction to the TCP IP stack for establishing the connection with the further terminal. Further the communication signal may be provided to the network in response to the instructing the communication signal may be a connection communication signal which initiates establishing of the connection the acknowledgement may be an acknowledgement for establishing a successful connection between the terminal and the further terminal and the time interval may be defined by the time limit defined by the new socket option SO CONTIMEO.

Still further according to the third aspect of the invention the communication application may be a universal plug application the protocol stack may be a TCP IP stack and there may be no connection established between the terminal and the further terminal before the step of receiving by the terminal the notification and wherein before the providing to the network by the terminal the communication signal the universal plug and play application may provide creation of a new socket in the TCP IP stack for communicating with the further terminal and instruction to the TCP IP stack for establishing the connection with the further terminal. Further the communication signal may be a connection communication signal which initiates establishing of the connection and the acknowledgement may be an acknowledgement for establishing a successful connection between the terminal and the further terminal and wherein providing to the network by the terminal the communication signal may comprise providing to the network by the terminal the communication signal in response to the instructing by the re transmitting the communication signal according to the pre selected procedure receiving a time out error by the universal plug and play application further instructing the TCP IP stack by the universal plug and play application to establish the connection with the further terminal by the re transmitting the communication signal according to a pre selected procedure after a predetermined time period which is at least equal to the time interval needed for that further terminal to wake up and providing to the network by the terminal the communication signal in response to the further instructing by re transmitting the communication signal according to the pre selected procedure.

According further to the third aspect of the invention the communication application may be a universal plug application the protocol stack may be a TCP IP stack and there may be a connection established between the terminal and the further terminal before receiving by the terminal the notification and a socket may be already created by the universal plug and play application in the TCP IP stack of the terminal for communicating with the further terminal and wherein before providing to the network by the terminal the communication signal the universal plug and play application may provide setting in the TCP IP stack a socket option SO SNDTIMEO defining a time limit for sending the communication signal by the terminal and a socket option SO RCVTIMEO defining a time limit for receiving data from the further terminal and instructing the TCP IP stack to send the pocket signal to the further terminal. Further the communication signal may be provided to the network in response to the instruction the communication signal may be a data communication signal containing data sent to the further terminal the acknowledgement may be an acknowledgement of successfully receiving the data communication signal by the further terminal and the time interval may be defined by the time limit defined by the socket option SO SNDTIMEO. Still further the further terminal after receiving the data communication signal from the terminal may send a further data communication signal to the terminal and the further data communication signal may be received by the terminal if the time limit defined by the socket option SO SNDTIMEO for the receiving data from the further terminal is not expired.

Further according to the third aspect of the invention the operations performed on or by the protocol stack may be facilitated by a Berkeley software distribution BSD socket application programming interface API .

According to a fourth aspect of the invention a communication system providing communicating in a power constrained environment comprises a further terminal being a power saving mode responsive to a wake up call a terminal responsive to a notification about a power saving mode of the further terminal for providing by the terminal a communication signal intended for the further terminal by transmitting the communication signal according to a pre selected procedure for providing a predetermined criterion defining a waiting period for receiving an acknowledgement of receiving the communication signal by the further terminal after the further terminal is woken up wherein the waiting period is at least as long as a time interval needed for that further terminal to wake up a network for providing the notification for providing the wake up call for waking up the further terminal in response to the communication signal for facilitating sending signals between the terminal and the further terminal wherein a universal plug and play application is available in the terminal and the further terminal.

According to a fifth aspect of the invention a method for communicating between a terminal and a further terminal through a network in a power constrained environment using a communication application available in the terminal and the further terminal comprises the steps of receiving by the terminal a notification about a power saving mode of the further terminal providing to the network by a protocol stack of the terminal a communication signal intended for the further terminal by transmitting the communication signal according to a pre selected procedure detecting the communication signal and starting a wake up process of the further terminal in response to the communication signal and receiving after the further terminal is woken up the communication signal by the further terminal and sending an acknowledgement of receiving the communication signal to the terminal by the further terminal wherein the terminal waits for the acknowledgement at least for a time interval needed for that further terminal to wake up before terminating the communicating based on a predetermined criterion facilitated by a communication application of the terminal.

The present invention reduces a number of spurious application errors due to a socket time out. For applications not aware of energy saving delays this invention will help users not to see errors because of energy saving delays.

The present invention also leads to more efficient use of the sockets there is only one socket used per session as there is no need to open a new one due to time out error.

The present invention provides a new methodology for expanding universal plug and play capabilities in a power constrained environment thus facilitating communication between two terminals with universal plug and play UPnP application capabilities wherein one of the terminals is in a sleeping mode. The present invention can be applied but not be limited to mobile terminals wireless devices portable devices mobile communication devices mobile phone etc.

The present invention describes a mechanism in which the UPnP application dynamically instructs the TCP IP stack involving network socket implementation to tune up its parameters so that it can tolerate longer delays and timeouts due to the fact that it operates in a power constrained UPnP environment.

The implementation of this invention can be related e.g. to a number of BSD Berkeley software distribution socket options for setting instructions according to a predetermined criterion in the TCP IP stack of a terminal i.e. the originating terminal which is trying to establish a connection with a further terminal or using said UPnP application based on the predetermined criterion as described below in detail. The UPnP application of the terminal is trying to communicate e.g. establishing a new communication session between the terminals or transmitting data after the further terminal went to a sleeping mode during a communication session with another UPnP application of the further terminal that is in a power saving mode e.g. in a sleeping mode and should accommodate the above mentioned parameters so that the further terminal is able to wake up in a time interval that is shorter than the timeout period according to the present invention.

The flow chart of represents only one possible scenario among many others. In a method according to the present invention in a first step the terminal A receives a notification about the terminal B being in the sleeping power saving mode. The information about the nature of the power saving mode of the terminal B further terminal can be contained e.g. as indications in the universal plug and play UPnP advertisement of the terminal B e.g. SSDP simple service discovery protocol low power specific headers or in the device description document.

In a next step the universal plug and play application of the terminal creates a new socket in the TCP IP stack A using e.g. socket function as shown in for communicating with the further terminal . In a next step the universal plug and play application sets a new socket option SO CONTIMEO using e.g. a setsocketopt function as shown in defining in the TCP IP stack A a time limit for establishing the connection with the further terminal terminal B in order to prevent the function connect described below to return a timeout error according to the predetermined criterion. Typically the SO CONTIMEO is set to a value that is slightly bigger than the time required for the Terminal B to wake up according to the present invention. In a next step the universal plug and play application instructs the TCP IP stack A to establish the connection using e.g. a connect function as shown in with the further terminal .

In a next step the TCP IP stack A transmits or re transmits a connection communication shown as a TCP SYN in to the network e.g. the access point according to a known retransmission algorithm e.g. by doubling the time between retransmissions . In a next step the network the interworking function detects the connection communication and starts a wake up process of the terminal B attempting to wake up the terminal B using e.g. a link layer specific technology or alternatively when the terminal B polls incoming packets it notices a connection establishment and moves to an active state . In a next step the terminal B is woken up receives the connection communication and sends an acknowledgement shown as the TCP SYN ACK in to the terminal A .

In a next step it is ascertained whether the acknowledgement is received before the expiration of the time period set by the new socket option SO CONTIMEO. As long as that is not the case the connection session is in the undetermined state and is closed in step . However if it is ascertained that the acknowledgement is received before the expiration of the time period set by the new socket option SO CONTIMEO in a next step the connection is established and the UPnP application A initiates sending data to the terminal B e.g. by calling a send function as shown in .

The flow chart of represents only one possible scenario among many others. In a method according to the present invention in a first step the terminal A receives the notification about the terminal B being in the sleeping power saving mode. The information about the nature of the power saving mode of the terminal B further terminal can be facilitated the same way as described in regard to step of i.e. step is similar to step of .

In a next step the universal plug and play application of the terminal creates a new socket in the TCP IP stack A using e.g. the socket function as shown in for communicating with the further terminal . In a next step the universal plug and play application instructs the TCP IP stack A to establish the connection using e.g. the connect function as shown in with the further terminal . In a next step the TCP IP stack A transmits re transmits a connection communication shown as a TCP SYN in to the network e.g. the access point according to the known retransmission algorithm e.g. by doubling the time between retransmissions . In a next step the network the interworking function detects the connection communication and starts the wake up process of the terminal B attempting to wake up the terminal B using e.g. a link layer specific technology or alternatively when the terminal B polls incoming packets it notices a connection establishment and moves to the active state . Step and are similar to steps and respectively of

In a next step the connection fails and an error signal is forwarded to the UPnP application A . Instead of informing the user about the connection failure that would be the prior art according to the predetermined criterion after receiving one or more such error signals and after waiting a further time interval from the original connect attempt typically slightly bigger than the time required for the terminal B to wake up in a next step after the terminal B is woken up the UPnP application A calls again the connect function for establishing the connection with the terminal B and the TCP IP stack A sends the connection communication TCP SYN to the network e.g. the access point again.

In a next step it is ascertained whether the connection fails. As long as that is the case the process goes back to step . This feedback process can have a set time limit e.g. 30 seconds . However if it is ascertained that the connection is successful in a next step the terminal B is woken up receives the connection communication and sends an acknowledgement shown as the TCP SYN ACK in to the terminal A . In a next step the connection is established and the UPnP application A initiates sending data to the terminal B e.g. by calling the send function as shown in .

The flow chart of represents only one possible scenario among many others. In a method according to the present invention in a first step the terminal A receives a notification about the terminal B being in the sleeping power saving mode. The information about the nature of the power saving mode of the terminal B the further terminal can be facilitated the same way as described in regard to step of i.e. step is similar to steps of and step of respectively .

In a next step the universal plug and play application sets using e.g. the setsocketopt function as shown in a socket option SO SNDTIMEO defining in said TCP IP stack a time limit for sending said communication signal by said terminal A and a socket option SO RCVTIMEO defining in said TCP IP stack a time limit for receiving data from said further terminal the terminal B based on the predetermined criterion. The SO SNDTIMEO option sets a timeout e.g. in milliseconds for send calls if a send call times out the connection is in an undetermined state and should be closed and SO RCVTIMEO option sets a timeout e.g. in milliseconds for receive calls if a receive call times out the connection is in an undetermined state and should be closed.

In a next step the universal plug and play application instructs the TCP IP stack A to send data using e.g. the data function as shown in to the further terminal .

In a next step the TCP IP stack A transmits re transmits a data communication signal shown as a TCP DATA in to the network e.g. the access point according to the known retransmission algorithm e.g. by doubling the time between retransmissions . In a next step the network the interworking function detects the data communication signal and starts the wake up process of the terminal B attempting to wake up the terminal B using e.g. a link layer specific technology or alternatively when the terminal B polls incoming packets it notices incoming data and moves to the active state . In a next step the terminal B is woken up receives the data communication signal and sends an acknowledgement shown as the TCP DATA ACK in to the terminal A .

In a next step it is ascertained whether the acknowledgement is received before expiration of the time period set by the new socket option SO SNDTIMEO. As long as that is not the case the connection session is in the undetermined state and is closed in step . However if it is ascertained that the acknowledgement is received before the expiration of the time period set by the new socket option SO SNDTIMEO in a next step the connection stays on and the terminal B sends a response data communication signal to the terminal A . If the response data communication signal is received by the terminal A before the expiration of the time period set by the new socket option SO RCVTIMEO the response data communication signal is accepted and acknowledged by the terminal A otherwise if the time period set by the new socket option SO RCVTIMEO is expired the connection session is in the undetermined state and should be closed as pointed out above.

It is noted that the examples presented in and represent only one implementation utilizing the universal plug and play application A or B the TCP IP stack A or B and the Berkeley software distribution BSD socket application programming interface API or . According to the present invention alternative implementations can include generally a communication application the universal plug and play application A or B being only one such communication application a protocol stack the TCP IP stack A or B being only one such protocol stack and different socket applications facilitated by various APIs different from the BSD API or .

It is to be understood that the above described arrangements are only illustrative of the application of the principles of the present invention. Numerous modifications and alternative arrangements may be devised by those skilled in the art without departing from the scope of the present invention and the appended claims are intended to cover such modifications and arrangements.

