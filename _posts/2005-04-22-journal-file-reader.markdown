---

title: Journal file reader
abstract: A system and process for enabling programmatic access to the contents of documents containing electronic ink are described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730399&OS=07730399&RS=07730399
owner: Microsoft Corporation
number: 07730399
owner_city: Redmond
owner_country: US
publication_date: 20050422
---
Aspects of the present system relate to computing systems. More particularly aspects of the present invention relate to enabling programmatic access to the contents of proprietary binary documents such as those containing electronic ink.

In addition to working with text input computers now have the ability to record and modify electronic ink. Electronic ink may be kept in its native form or may be run through an analyzer to recognize text and annotations. Software applications are integrating the use and analysis of electronic ink into their functionality enhancing the ability of users to create and edit documents.

Proprietary binary formatted documents may be used by software applications to store some combination of drawings text images and so forth. One such format is a Journal document which may be generated by software such as Microsoft s Windows Journal software application. Other proprietary binary formats may include Adobe s portable document format PDF or Microsoft s PowerPoint file format. Journal documents in particular allow for collecting and arranging of electronic ink alongside drawings text images and so forth. While useful within Microsoft s Journal product the proprietary and undocumented format of these files may not be easily accessible by other software applications. This may be due to such obstacles as a lack of documentation or complex compression algorithms built into the format. Software applications and even individual users who wish to programmatically access the contents of a Journal document presently find it prohibitively difficult to do so. Software applications are not readily able to examine the contents of these proprietary binary documents.

Methods and systems for enabling programmatic access to the contents of proprietary binary document formats such as Journal documents are needed.

Aspects of the present invention address one or more of the problems described above thereby providing a way of enabling programmatic access to the contents of Journal documents.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope and spirit of the present invention.

This document is divided into sections to assist the reader. These sections include an overview characteristics of ink terms general purpose computing environment accessing binary documents and a conclusion.

According to various embodiments of the invention proprietary binary documents may contain some combination of text images drawings formatting and so forth. Journal documents in particular are electronic files which may include electronic ink e.g. handwriting or drawings text images and so forth. These documents may be created by software applications such as Microsoft Journal on computers which allow for the entry of electronic ink e.g. a tablet PC with a touch sensitive display or a PC with a mouse or drawing tablet attached . The electronic files which store these documents may include Journal documents having a file extension of .jnt or .jtp or other extensions.

Software developers and individual users may wish to programmatically access the contents of these proprietary binary documents. For example a user may wish to extract all of her own handwriting i.e. electronic ink from one or more Journal documents. Alternatively a desktop search agent may wish to access the textual contents of one or more Journal documents including text recognized from electronic ink in order to index the contents of the file s . Aspects of the invention provide a facility for accomplishing these goals.

As known to users of pens markers crayons pencils and other marking implements physical ink the kind laid down on paper using pen and ink or other writing and drawing implements may convey more information than a series of coordinates connected by line segments. For example physical ink can reflect pen pressure by the thickness of the ink pen angle by the shape of the line or curve segments and the behavior of the ink around discreet points and the speed of the nib of the pen by the straightness line width and line width changes over the course of a line or curve . Further examples include the way ink is absorbed into the fibers of paper or other surface it is deposited on. These subtle characteristics also aid in conveying the above listed properties. Because of these additional properties emotion personality emphasis and so forth can be more instantaneously conveyed than with uniform line width between points.

Electronic ink or ink relates to the capture and display of electronic information captured when a user uses a stylus based input device. Electronic ink refers to a sequence or any arbitrary collection of strokes where each stroke is comprised of a sequence of points. The strokes may have been drawn or collected at the same time or may have been drawn or collected at independent times and locations and for independent reasons. The points may be represented using a variety of known techniques including Cartesian coordinates X Y polar coordinates r and other techniques as known in the art. Electronic ink may include representations of properties of real ink including pressure angle speed color stylus size and ink opacity. Electronic ink may further include other properties including the order of how ink was deposited on a page a raster pattern of left to right then down for most western languages a timestamp indicating when the ink was deposited indication of the author of the ink and the originating device at least one of an identification of a machine upon which the ink was drawn or an identification of the pen used to deposit the ink among other information. Among the characteristics described above the temporal order of strokes and a stroke being a series of coordinates may primarily be used.

Electronic ink may be submitted for analysis and recognition. Ink representing words and paragraphs may be analyzed in order to determine what words are intended. In analyzing ink alternative recognition solutions may arise. For example a person may handwrite the word theme but an ink analyzer may not be sure if the ink represents the single word theme or the words the me depending on the person s handwriting. As such an ink analyzer may use rules of grammar the context of other nearby words and other factors to infer a more correct analysis. In so doing the ink may store a list of alternate words which were not selected along with the binary ink information.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In some aspects a pen digitizer and accompanying pen or stylus are provided in order to digitally capture freehand input. Pen digitizer may further use capacitive or resistive technologies enabling an active stylus or a passive stylus e.g. a finger or other pointing device . Although a direct connection between the pen digitizer and the user input interface is shown in practice the pen digitizer may be coupled to the processing unit directly parallel port or other interface and the system bus by any technique including wirelessly. Also the pen may have a camera associated with it and a transceiver for wirelessly transmitting image information captured by the camera to an interface interacting with bus . Further the pen may have other sensing systems in addition to or in place of the camera for determining strokes of electronic ink including accelerometers magnetometers and gyroscopes.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to calculate the square of an input by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of code Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

Aspects of the invention provide for a programmatic method for accessing the contents of proprietary binary document . This programmatic method may include providing a model of proprietary binary document in a standardized fashion such as extensible markup language XML as depicted in . Alternatively the programmatic method may comprise providing an application programming interface exposing a model of proprietary binary document as readable objects or interfaces. Tags and objects exposed by the methods and systems described herein are by way of example. Other tags objects interfaces attributes and so forth may be added without changing the underlying spirit of the invention.

Proprietary binary document here is converted to an XML stream conforming to standards used for the interchange of information. XML provides a flexible architecture for information interchange between and among computers applications and users. Each of the components contained within proprietary binary document e.g. electronic ink text stationery and so forth are converted into textual tags which are delivered in structured fashion. Although not every aspect of proprietary binary document may be provided in the XML tags enough information is provided to either reconstruct the layout of the document or at least access the information contained therein.

XML schema depicted in shows how the containment of tags within tags may be structured when creating XML stream . When a first tag is visually contained within a second tag in instances of the first tag may appear contained within instances of the second tag in XML stream . XML documents are typically created using only textual characters and as such have no particular means for conveying binary information such as the contents of an image or ink object. As such binary data may be conveyed in an XML document by converting the binary information to text using an encoding scheme such as base64.

When creating XML stream the outermost XML tag may be JournalDocument which includes attributes possibly including document version schema version default page width default page height and so forth. Contained within JournalDocument there may be Stationery which provides default stationery settings for pages within a Journal document. Stationery may include attributes such as a background images and or colors title display region information and location and style of rule lines.

In addition to Stationery JournalDocument may include one or more JournalPages . Each JournalPage tag represents a page within a Journal document. JournalPage may include attributes including page number and page width and height. Within a JournalPage contained tags may include Stationery DocImage TitleInfo and Content . Stationery is virtually identical in structure to Stationery except that its attributes apply merely to the specific journal page rather than to the whole document as a default.

DocImage may supply information about an image underlying a page within a Journal document. For example a page within Journal document may include a matched pair of background image and document metadata. Such combinations of background image and metadata may be generated by software acting as a print driver such that an image of a printed page e.g. an agenda or a presentation slide can be automatically captured and inserted into a Journal document where it can be annotated by a user. DocImage provides a tag for conveying such underlying images. The binary contents of the images may be conveyed within this tag using an encoding scheme such as base64. TitleInfo may include attributes such as title text as well as a date and time for the page. Finally Content tag provides a collection of tags embodying the remaining content of a page in within a Journal document.

Within Content a sequential collection of element tags provide information on each of the different types of content which may be displayed on a page. Many of the elements within Content include location and bounding information including a top coordinate a left coordinate a height and a width. In addition many of the content elements may also include scalar transform information describing how the element or group of elements has been resized rotated moved or otherwise modified.

Paragraph may contain information about a block of handwritten electronic ink. Paragraph may include other tags within it tags which break down the ink into lines and words. If the ink has been analyzed and recognized as words then embedded within these tags there may be additional recognition information. This may include a list of recognition alternatives confidence levels and so forth. Binary ink objects included with the paragraph e.g. stroke data may be included as base64 encoded text. Similarly InkWord may be included as free standing words within Content or embedded within Paragraph . InkWord may also include base64 encoded ink objects alternate lists and so forth.

Drawing tags may also be included within Content representing electronic ink sketches and drawings. The ink object or objects which make up a drawing may be encoded as above as base64 text. Text tags may be included within Content providing the content of text entered onto a page of JournalPage . Image tags may provide access to any inserted pictures or images providing the binary content of these inserted items using base64 encoding or another encoding scheme . Flag tags provide information about flags inserted into a Journal document recognizing such useful elements as to do items.

The last two element tags which may be embedded within Content are actually collections of elements. GroupNode tags provide information about elements which are grouped together and may include any of the described content elements including other GroupNodes. Reflow tags work similarly allowing for the embedding of other elements including other Reflow tags. Reflow may be useful for handling the repositioning of content along page breaks.

A user or software application invoking a conversion of proprietary binary document into XML stream may receive an XML document which has been built and possibly validated against a schema such as XML schema . With XML stream the user or software application is able to access an entirely textual form of the document. Using an XML parser or by merely traversing the tags and text a software application may be able to selectively access the text ink images and so forth. This information may be used for searching or for creating new documents usable by other programs.

As stated above additional aspects of the invention may provide access to the contents of proprietary binary document using document models other than XML. Other standard or non standard textual representations may be available. Additionally the information contained in proprietary binary document may be provided in one or more database tables. As stated above other methods of enabling access to the content of proprietary binary document known to those of skill in the art may also be available.

The content of proprietary binary document may alternatively be provided as a collection of objects using a common interface standard e.g. Component Object Model COM or Common Object Request Broker Architecture CORBA . The objects provided may be queried in order to derive the content of a Journal document. is a class diagram illustrating one possible class hierarchy which may be used to produce an object model of a Journal document. Other class hierarchies may be available for Journal documents and for other proprietary binary formats.

An instance of JournalFile may be used to represent a Journal document and may include attributes including document name version default page width and so forth. JournalFile may include references to instances of Stationery which includes information about background colors title display and location and style of rule lines. JournalFile may also include a reference to an instance of PageList which merely contains further references to one or more instances of JournalPage .

JournalPage representing a page within a Journal document may include a reference to an instance of Background which provides images to be used in the background of a page. JournalPage may also contain a reference to an instance of PageElements which provides a collection of references to individual instances of JournalElement or more precisely to instances of subclasses of JournalElement .

Subclasses of JournalElement may include InkElement ImageElement and TextElement . Each subclass may provide information about page location transparency and so forth. InkElement may also provide information about a particular ink element such as handwriting or a drawing. This information may include recognition results and recognition alternates. ImageElement may provide access to a binary representation of an image on a page and provide other information about the image. Finally instances of TextElement may provide access to the text of a textual element on a page and further provide information about formatting and so forth.

At step a request for access to proprietary binary document is received. The document may be presently in memory or may be stored as a file on a hard drive e.g. TestFile.jnt . The request to access proprietary binary document may come in the form of an application programming interface API call making the request. Such an API call may take as input a pathname or universal resource locator URL locating a file. Alternatively the call may take as input a programmatic reference to the document in memory.

At step proprietary binary document is accessed. This may mean accessing proprietary binary document in memory or opening a file containing the document. At step the contents of proprietary binary document are traversed in order to create a representation of the contents and structure which is programmatically accessible. This representation may comprise an intermediate catalogue or model of proprietary binary document . The next step is selected based on the output format desired or implemented. Although two methods of enabling access to the contents of proprietary binary document are provided herein other methods may be available which are in keeping with the spirit of the invention.

At step XML stream is created using the contents of proprietary binary document . The XML may be assembled simultaneous to the content traversal of step or it may occur after the contents have been catalogued. In generating XML tags the placement of contents within a page may need to be adjusted for different coordinate systems. For example coordinates may be converted from inches to himetric or twips. Also binary data may be converted to a textual representation such as base64.

At step XML stream is output. XML stream may be output progressively as the contents of proprietary binary document are being traversed and catalogued or the entire stream may be delivered all at once. The output XML stream may be provided as a return value to an original API call or alternatively it may be written to a file.

At step as an alternative to step an object collection is instantiated using the contents of proprietary binary document . As with XML the objects may be instantiated simultaneous to the content traversal of step or it may occur once the contents have been catalogued. At step individual objects are generated using the contents of the proprietary binary document . Their attributes are set and the relationships among the objects are also set. The output may be provided as a reference to a parent object such as JournalFile which in turn may contain references to other newly instantiated objects. Finally at step access to proprietary binary document is ended. In the case of an open file the file may be closed.

Once a user application or software developer has accessed a model of proprietary binary document they may modify or otherwise adjust the contents of the model and have the new contents converted back into the proprietary binary document. They may even be able to create new documents in this fashion. For example an outputted XML stream may be modified to include new tags representing page elements. These new tags may then appear as elements within the proprietary binary document. Similarly new objects could be added or existing objects modified within the outputted object hierarchy discussed above. In this fashion users and software applications may modify and create proprietary binary documents e.g. Journal documents without having to utilize the conventional and possibly restrictive interface associated with the proprietary format.

The present invention has been described in terms of illustrative embodiments thereof. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure. Although the software components and methods described above provide for accessing Journal documents they may be utilized to enable access to other proprietary binary document formats which include non textual data. Examples of other proprietary binary document formats which may benefit from these software components and methods include Adobe portable document format PDF Microsoft PowerPoint file format word processing documents and so forth.

