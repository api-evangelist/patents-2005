---

title: Items on workplaces
abstract: This document discusses, among other things, a system and a method for using a meta-model to manage relationships between software artifacts, the method comprising determining a meta-model; identifying one or more available artifacts in one or more software applications; using the meta-model to define one or more relationships between the one or more available artifacts, wherein each relationship is a specific instance of a possible association defined in the meta-model; and providing the one or more relationships as one or more configurations to the one or more software applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761850&OS=07761850&RS=07761850
owner: SAP AG
number: 07761850
owner_city: Walldorf
owner_country: DE
publication_date: 20051222
---
This patent document pertains generally to software management and more particularly but not by way of limitation to the relating of items on workplaces.

In the electronic age computers have become a common appliance. This is most evident in the business world where daily activities include using word processors and spreadsheet programs to create documents using email and fax programs to communicate from the computer desktop and using database tools to manage personal contacts and company resources and assets. Typically a wide array of disparate software programs are used to create and manage the various documents and other objects e.g. contacts to do items company assets . For example personal contacts and communication are managed in personal information management PIM applications while enterprise resources are managed in enterprise resource planning ERP systems. Initially the programs that handled these tasks were limited however in recent years integrated applications have become popular. A typical example of an integrated PIM is Microsoft Outlook produced by Microsoft Corporation of Redmond Wash. Outlook integrates an email client a calendar a task manager and an address book. By grouping several functional areas under one common program umbrella Microsoft is able to provide relationships between different objects within Outlook. For example when creating an email to quickly find an email address a user can access their address book to obtain a list of personal contacts. This relationship among others is hard coded into the software application. However typically the number and types of relationships are fixed which leaves a user two choices to either work within the application s constraints or find a different application. To improve workplace efficiency and program usability it is desirable to provide a system that allows a user to define dynamic relationships between discrete objects within one software program or among several programs.

This document describes among other things systems and methods for using a meta model to manage relationships between different software objects also referred to as artifacts. Typically software artifacts include items such as a contact a task item an email a calendar entry a document and enterprise resources such as employees orders organizational data materials customers and assets. In general a software artifact may be any object that is created or managed using software.

According to one example there is a method for creating and maintaining relationships between software applications the method comprising determining a meta model identifying one or more available artifacts in one or more software applications using the meta model to define one or more relationships between the one or more available artifacts wherein each relationship is a specific instance of a possible association defined in the meta model and providing the one or more relationships as one or more configurations to the one or more software applications.

According to another example there is a system for managing relationships between software applications the system comprising a processor coupled to a memory a user interface coupled to the processor a gather artifacts module to run on the processor to identify and manage any available artifacts in one or more software applications a presentation module to run on the processor to use a meta model and the available artifacts in a modeling environment wherein the modeling environment is such that a user can interact and manage one or more relationships between the available artifacts using a definition provided by the meta model and a configuration output module to run on the processor to provide the one or more relationships as one or more configurations.

This summary is intended to provide an overview of certain subject matter of the present patent application. It is not intended to provide an exclusive or exhaustive explanation of the invention. The detailed description is included to provide further information about the subject matter of the present invention.

The following detailed description includes references to the accompanying drawings which form a part of the detailed description. The drawings show by way of illustration specific embodiments in which the invention may be practiced. These embodiments which are also referred to herein as examples are described in enough detail to enable those of ordinary skill in the art to practice the invention. The embodiments may be combined other embodiments may be utilized or structural logical and electrical changes may be made without departing from the scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

In this document the terms a or an are used as is common in patent documents to include one or more than one. In this document the term or is used to refer to a nonexclusive or unless otherwise indicated.

The present inventor has recognized that static programming has restricted a computer user from obtaining full efficiency and functionality when using software. Among other things this document describes a flexible and powerful way of defining and maintaining relationships between software artifacts such as an email file a contact record or a task item to provide more functionality and usability to a typical user. In particular in this example a standardized modeling language is used to manage the relationships between artifacts. The Meta Object Facility MOF is a standardized language that provides a framework for specifying constructing and managing meta models. A meta model is an abstract representation of some kind of meta data. The Unified Modeling Language UML is one example of a meta model that can be defined by the MOF meta metamodel language. Using a meta modeling language a system of abstract relationships between software artifacts can be further defined instantiated as a concrete model. In certain examples the meta modeling language is UML. In other examples any concrete meta model expressed as an instance of the MOF could be used to define the space. Using a model editor in conjunction with a meta model a user can centrally manage relationships between various software artifacts. In this detailed description a networked environment is described however similar systems and methods could be used in stand alone environments.

In this example a processor is connected to interact with a memory . A wide array of possible processor and memory combinations are available. The processor may include commercial units e.g. Pentium Motorola 68000 series PowerPC or specialized units made for use in specific applications. The memory can include any conventional memory such as solid state magnetic or optical media.

A user interface is typically connected to the processor memory combination . This user interface typically includes an input device and an output device . The input device can be one or more of a keyboard a mouse a touchpad a microphone a sensing device a monitoring device or any other type of device that allows a computer to receive commands and input data from a user. The output device can include such things as a monitor a printer a speaker or any other type of device that allows a system to represent resultant data to the user.

In one example a user can input a command with an input device that initiates execution of a method that manages relationships between software components on the processor memory combination . First a meta model is read by the Meta Model Reader module . Then any available software artifacts A B C . . . N are identified by the Gather Artifacts module . The Presentation module interacts with the user interface to allow the user to manage the relationships. Then one or more configuration files A B C . . . N are generated from the changes made by the user and saved in the Configuration Output module . Then in one example the results are displayed on the output device for the user.

Referring to four classes are shown an Email class a Task class a Contact class and a Calendar Event class . Typically each class may include attributes operations and exceptions along with other characteristics as defined by the UML Specification. In this example the Email class has several attributes A B C and two operations A B. Similarly other classes in the model have defined attributes and operations.

At available artifacts provided by one or more software applications are gathered and organized. In certain examples the software application that exposes each particular software artifact can control which elements e.g. attribute operation exception of each class are viewable in a model editor. Each software application could use a specific file format to expose their available artifacts or a standardized format such as XML or in the specific form of XMI could be implemented. In other examples the model editor may build the detailed view of each class using a central repository a known specification e.g. an application programming interface API or some other internally or externally available configuration mechanism.

At associations between available artifacts are created modified and deleted. The creation and modification of associations are constrained by the meta model determined at .

At specific associations are provided to the software applications. In one example the configurations are saved as one or more configuration files. In some examples a separate configuration file is provided to each participating software application. In certain examples each configuration file is saved in a standard interface language format such as the XML Metadata Interchange XMI standard. In other examples a global configuration file is available for one or more software applications to access. Alternatively a global configuration may be stored in a database server as illustrated in to be accessed by the applications on each of the local client workstations and remote client workstations . Alternatively the configuration of an application is directly communicated to the application itself e.g. using technologies such as Microsoft s Component Object Model COM and Distributed Component Object Model DCOM the Object Management Group s Common Object Request Broker Architecture CORBA or a Web service technology.

Based on the meta model a user can use the model editor and or the modeling environment to modify associations between available artifacts. In certain examples the model editor uses a graphical interface and allows the user to create and manage the relationships using a visual programming technique. In some examples the user can only define associations at a general level of granularity. For example the user may want to provide a relationship between an email object and a calendar entry object. Using the model editor the user can define a generic relationship which the specific software application e.g. Microsoft Outlook will then interpret and provide a user interface element that allows a user to manage the certain relationship e.g. a menu bar command . In other examples the model editor user can define associations at a finer level of granularity specifying the exact user interface that will be available to the desktop application user e.g. only allowing user to add an email object to a calendar entry object using a context menu .

The meta model is also available to one or more software applications A B . . . N. These applications use the meta model to define artifacts A B . . . N which will be exposed to the model editor . Any software application that exposes artifacts to a model editor or a modeling environment is assumed to know of the meta model and provide artifacts that conform to the meta model . The model editor obtains the group of artifacts from the group of applications . Using the meta model to constrain the types of possible associations such as those illustrated in a user edits the associations between the artifacts using the model editor and saves a configuration file A B . . . N for each application . At runtime each application uses their configuration file to provide methods to manage the associations to a user. For example to create associations between objects an application could provide new context menus a drag and drop ability new menu items shortcut keyboard commands or other user interfaces to enable association dissociation. Applications could also provide searching or reporting tools to provide alternate displays of related artifacts.

As an illustrative example a first artifact Ais produced by a first application Aand a second artifact Bis produced by a second application B. The applications have exposed these artifacts to a modeling environment. A model provides for certain relationships between Aand Band the applications Aand Bare aware of these possible relationships. A user can create an association a specific instance of a relationship between Aand Busing methods such as drag and drop or drag and relate. For example when the user drops Aonto Bthere is some information flow e.g. via DCOM which sends an identifier or URL of Ato B. Bperforms an internal operation that stores the identifier or URL and associates it with B. The user can then access Aby opening Band by clicking on an icon or link that represents A.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of transfer protocols e.g. HTTP .

While the machine readable medium is shown in an example to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing encoding or carrying data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. For example the above described embodiments and or aspects thereof may be used in combination with each other. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. Also in the following claims the terms including and comprising are open ended that is a system device article or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover in the following claims the terms first second and third etc. are used merely as labels and are not intended to impose numerical requirements on their objects.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description various features may be grouped together to streamline the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter may lie in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

