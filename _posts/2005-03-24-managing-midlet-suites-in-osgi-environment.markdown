---

title: Managing midlet suites in OSGI environment
abstract: The invention discloses deploying MIDlet suites in an Open Services Gateway Initiative environment. A MIDlet suite is re-packaged by adding to it an interface element to the Open Services Gateway Initiative environment. The invention allows using deployed MIDlet suites in an Open Services Gateway Initiative environment in a way that requires significantly less user interaction than prior art arrangements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640542&OS=07640542&RS=07640542
owner: Nokia Corporation
number: 07640542
owner_city: Espoo
owner_country: FI
publication_date: 20050324
---
The invention relates to MIDlet suites and Open Services Gateway Initiative. In particular the invention relates to a novel and improved way of deploying MIDlet suites in an Open Services Gateway Initiative environment.

Today more and more various terminal devices and embedded devices include a Java programming language platform to allow running of Java applications. One of these Java platforms is Java 2 Platform Micro Edition J2ME . J2ME is targeted particularly at embedded systems with limited resources such as mobile phones pagers personal digital assistants smart cards and set top boxes. Due to differences in capabilities of devices implementing J2ME J2ME has been segmented via configurations and profiles. A configuration profile pair defines a minimum set of application programming interfaces or APIs a device must support. Typically this set can be extended with additional optional libraries. Two of the configurations included in J2ME are Connected Limited Device Configuration CLDC and Connected Device Configuration CDC .

CLDC is targeted at devices with limited resources such as mid and low end mobile phones for example. CLDC defines a virtual machine and a set of libraries which are scaled down compared to those specified in the Java Language Specification. Mobile Information Device Profile MIDP is a profile specified especially for the CLDC. MIDP defines a simple model for application programming including an application model a user interface e.g. textboxes forms and networking.

CDC is targeted at relatively powerful devices which are less resource limited than those targeted by CLDC such as e.g. smart phones communicators and personal digital assistants. CDC defines a virtual machine that is fully compliant with the Java Language Specification. CDC is usually accompanied by a Foundation Profile FP which extends the basic set of libraries of the CDC for e.g. input output networking and security. However FP does not specify an application model. The application model and user interface libraries are disclosed by a Personal Profile PP .

A Java application that conforms to MIDP and CLDC is called a MIDlet. MIDlets are typically targeted at devices that provide some level of network connectivity. The devices that will run MIDlets typically also have several common attributes limited screen size memory and processing power. As described above MIDP and CLDC are designed to address these constraints.

MIDlets are often packaged and distributed as MIDlet Suites. A MIDlet Suite is a set of one or more MIDlets plus resource files that may be required by these MIDlets. The MIDlet Suite is typically deployed as a Java Archive JAR file. Furthermore a Java Application Descriptor JAD file may be associated with the JAR file. The JAR file comprises one or more Java class files and a manifest file describing the contents of the JAR file. The JAR file may further comprise resources such as e.g. images and application data. The manifest file included in the JAR file is typically a text file containing various attributes related to the MIDlet Suite such as a name of the MIDlet Suite a version number of the MIDlet Suite a vendor name of the MIDlet Suite a J2ME Profile required by the MIDlet Suite and a J2ME Configuration required by the MIDlet Suite. The JAD file is typically a text file containing administrative information about the MIDlet Suite and the JAR file the MIDlet suite is packed into such as a name JAR file size version number vendor information and a Uniform Resource Locator URL address of the JAR file. An object of the JAD file is to facilitate getting information about the JAR file since typically the JAD file is significantly smaller than the JAR file which comprises the entire MIDlet suite it is faster to download only the JAD file rather than the JAR file.

In recent years MIDP in combination with CLDC has become extremely popular. In mobile phones it is today the dominant Java platform for third party applications. In other words there is a vast amount of MIDlets already developed and more are being developed.

Yet the platform consisting of MIDP and CLDC has also met more and more criticism for not being rich and attractive enough and for remaining behind the standard Java platform in terms of APIs and applied virtual machine technologies.

One of proposed solutions to the above criticism is called Open Service Gateway Initiative OSGi which provides a richer application framework than the platform consisting of MIDP and CLDC. E.g. Java Specification Request JSR 232 proposes using OSGi as an underlying application framework for mobile devices. OSGi is a generic service centric execution environment. It specifies a generic framework and a core set of service interfaces that enable delivery of multiple value added service implementations potentially from different vendors. OSGi provides a general purpose secure and managed Java framework that supports the deployment of extensible and downloadable service applications known as bundles.

OSGi compliant devices can download and install OSGi bundles and remove them when they are no longer required. Bundles can register a number of services that can be shared with other bundles under control of OSGi. OSGi can run on top of CDC and FP. In OSGi several bundles can be run simultaneously on a single virtual machine whereas in previous Java frameworks only one Java application may be run on one virtual machine. As opposed to the platform consisting of MIDP and CLDC with OSGi there is no need to load and execute the virtual machine as many times as the number of running Java applications. Thus memory consumption is reduced.

However OSGi does not support managing or executing MIDlets. Yet such support is imperative due to the vast amount of MIDlets developed.

An attempt at enabling execution of MIDlet suites on OSGi is provided by a corporation called Prosyst http www.prosyst.com . The solution by Prosyst is a bundle called MIDPLauncher that when started shows the installed MIDlet suites on a graphical user interface and registers a service that can be used by other bundles to install start stop uninstall or update a MIDlet suite.

However there is a significant drawback to the above solution by Prosyst it requires extensive and cumbersome user interaction. Once the MIDPLauncher is stopped the MIDlet suites become completely unavailable to the user and the OSGi environment. Therefore when the user wants to execute a MIDlet and the MIDPLauncher is not already running the user is first required to launch the MIDPLauncher in order to enable execution of the MIDlet. Likewise if the MIDlet suite comprises several MIDlets the user is required to launch the MIDPLauncher before being able to select a MIDlet to be executed. Furthermore even while the MIDPLauncher is running the OSGi environment sees only the MIDPLauncher bundle rather than the separate MIDlet suites.

Therefore an object of the present invention is to alleviate the problems described above and to introduce a mechanism that allows using deployed MIDlet suites in an Open Services Gateway Initiative environment with no user interaction or at least with significantly less user interaction than with prior art arrangements. A further object of the present invention is to allow starting stopping and uninstalling the deployed MIDlet suites without requiring a management application or any other application associated with the Open Services Gateway Initiative environment to be running at the same time. Yet a further object of the present invention is to allow executing multiple MIDlets in parallel in the Open Services Gateway Initiative environment.

A first aspect of the present invention is a method of deploying MIDlet suites in an Open Services Gateway Initiative environment. According to the method a MIDlet suite is re packaged by adding to it an interface element to the Open Services Gateway Initiative environment. It is to be understood that in the context of the present invention the term interface element refers to an element providing a connection between the Open Services Gateway Initiative environment and the re packaged MIDlet suite in order to enable the Open Services Gateway Initiative environment to launch and stop at least one MIDlet of the re packaged MIDlet suite.

A second aspect of the present invention is a device for deploying MIDlet suites in an Open Services Gateway Initiative environment. The device comprises a re packager arranged to re package a MIDlet suite by adding to it an interface element to the Open Services Gateway Initiative environment.

A third aspect of the present invention is a computer program product embodied on a computer readable medium for deploying MIDlet suites in an Open Services Gateway Initiative environment. The computer program controls a data processing device to perform the step of re packaging a MIDlet suite by adding to it an interface element to the Open Services Gateway Initiative environment.

In an embodiment of the invention at least one configuration parameter specific to the Open Services Gateway Initiative environment is added to the MIDlet suite in addition to the interface element while re packaging the MIDlet suite.

In an embodiment of the invention prior to the re packaging Connected Limited Device Configuration compliancy of the MIDlet suite is validated.

In an embodiment of the invention at least one Mobile Information Device Profile application programming interface package is exported to a namespace database maintained by the Open Services Gateway Initiative environment. This allows the exported at least one Mobile Information Device Profile application programming interface package to be shared by re packaged MIDlet suites.

In an embodiment of the invention at least one of the added interface element and the added at least one configuration parameter is utilized for at least one of installing the re packaged MIDlet suite and executing the installed MIDlet suite as a standard Open Services Gateway Initiative application.

In an embodiment of the invention at least one configuration parameter is arranged into one of a manifest file and an additional configuration parameter file.

The invention allows using deployed MIDlet suites in an Open Services Gateway Initiative environment in a way that requires significantly less user interaction than prior art. For example the invention allows starting stopping and uninstalling the deployed MIDlet suites without requiring a management application or any other application associated with an Open Services Gateway Initiative environment to be running at the same time. That is once a MIDlet suite has been re packaged in accordance with the invention it can be launched directly i.e. without having to first launch a management application such as e.g. the above prior art MIDPLauncher. Furthermore the invention provides MIDP functionality in an Open Services Gateway Initiative environment. Furthermore the invention allows executing multiple MIDlets in parallel in an Open Services Gateway Initiative environment. Furthermore the invention reduces memory footprint of each installed MIDlet suite since the MIDlet suites are deployed and executed on a single virtual machine. Furthermore the invention minimizes the overhead of each re packaged MIDlet suite by relying on the namespace database of the OSGi environment to share the standard MIDP APIs as well as the runtime management APIs.

Reference will now be made in detail to the embodiments of the invention examples of which are illustrated in the accompanying drawings.

Among the API packages exported may be e.g. standard MIDP API packages such as e.g. javax.microedition.io javax.microedition.rms javax.microedition.lcdui and javax.microedition.midlet internal implementation packages of the MIDP additional runtime management API packages and one or more packages which contain MIDlet suite management service interfaces. Exporting the MIDP API packages ensures sharing the MIDP API implementation. By sharing the MIDP packages memory footprint of each installed MIDlet suite is reduced as MIDP API classes need to be loaded only once. The above standard MIDP APIs are those specified in the MIDP specification. The above runtime management APIs are internal APIs responsible for enabling a user to select the MIDlet to be launched if the embedded MIDlet suite contains more than one MIDlet and to dispatch the MIDlet.

In the embodiment of the invention illustrated in CLDC compliancy of the MIDlet suite is validated step . The reason for the validation is the fact that due to compatibility between the CDC and CLDC APIs the CLDC APIs may sometimes be replaced with the corresponding CDC APIs and consequently the MIDP may be implemented on top of CDC. However by replacing the CLDC APIs with the CDC APIs correctness of a MIDlet cannot be detected. A correct or well behaved MIDlet must use only that subset of the CDC APIs which is also present in the CLDC APIs whereas an ill behaved MIDlet may use the entire set of CDC APIs. Therefore in order to rule out the ill behaved MIDlets the CLDC compliancy of the MIDlet suite is validated or checked. This may be achieved e.g. by scanning the constant pool of the MIDlet class files. If the MIDlet suite is found to be non CLDC compliant the MIDlet suite deployment process will be aborted. Thus the validation step ensures that only correct MIDP applications will be deployed.

Next at step the validated MIDlet suite is re packaged into a standard OSGi bundle by adding to it an interface element to the Open Services Gateway Initiative environment. In the embodiment of the invention illustrated in the step of re packaging further comprises adding to the MIDlet suite at least one configuration parameter specific to the OSGi environment. The object of the interface element is to enable the OSGi environment to connect to the re packaged MIDlet suite in order to launch and stop at least one MIDlet of the re packaged MIDlet suite. The interface element may comprise at least one Java class file. For example the interface element may comprise e.g. an implementation of org.osgi.framework.BundleActivator interface class file.

Alternatively if the OSGi environment supports declarative services the interface element may comprise at least one file e.g. an Extensible Markup Language XML file configured to declare a service for launching and stopping the re packaged MIDlet suite.

It is to be understood that the term declarative service refers to a feature of OSGi known in itself to a person skilled in the art for providing services. In an OSGi environment supporting declarative services an OSGi bundle can declare in an XML file that it provides services to the rest of the system. These services are registered by a Service Component Runtime SCR on behalf of the bundle based on the contents of the XML file.

At least one OSGi environment specific configuration parameter may be comprised e.g. in a manifest file. Since the JAR file in which the MIDlet suite is contained typically already comprises a manifest file describing the contents of the JAR file in an embodiment of the invention this former manifest file is replaced with the manifest file of the invention. The former manifest file may be e.g. renamed and the manifest file of the invention added in its place. Furthermore if there is a JAD file associated with the JAR file of the MIDlet suite the JAD file may be packed into the re packaged MIDlet suite as well. The configuration parameters comprised in the manifest file may specify e.g. at least one of an activator class of the re packaged MIDlet suite and package import statements. Furthermore one or more configuration parameters including but not limited to requested permissions and policies may be comprised in one or more additional configuration parameter files.

At step the re packaged MIDlet suite is installed as a standard OSGi application by utilizing at least one of the added interface element and the at least one configuration parameter. The installation may be performed by the OSGi environment since the re packaged MIDlet suite is a standard OSGi bundle from the point of view of the OSGi environment. Finally the installed MIDlet suite is executed as a standard Open Services Gateway Initiative application by utilizing at least one of the added interface element and the at least one configuration parameter step .

In an embodiment of the invention the runtime management APIs enable human users to choose a MIDlet for execution if the re packaged MIDlet suite contains more than one MIDlet.

In another embodiment of the invention the selection service is available to other OSGi bundles as well. In this embodiment each re packaged MIDlet suite registers a service object with a service registry of the OSGi environment. The service object may share information about the content of the re packaged MIDlet suite. In addition the service object may take over some of the responsibilities of the org.osgi.framework.BundleActivator implementation of the re packaged MIDlet suite so that the MIDlet will be launched and stopped through the service object.

In an embodiment of the invention each re packaged MIDlet suite is started in a new thread and a context class loader of the respective re packaged MIDlet suite is stored in that thread. That is the newly created thread of the re packaged MIDlet suite will inherit the context class loader from the first thread. The MIDP APIs are then able to use the information represented by the context class loader to distinguish between various re packaged MIDlet suites. Thus the invention allows running multiple re packaged MIDlet suites in parallel.

The terminal device further comprises a downloader configured to download a MIDlet suite e.g. directly from a given Uniform Resource Locator URL address. Alternatively additionally the downloader may be configured to download MIDlet suites via a Bluetooth connection infrared connection a cable connection or a Universal Serial Bus USB connection or from a local storage. The terminal device further comprises a validator configured to validate Connected Limited Device Configuration compliancy of the downloaded MIDlet suite. The terminal device further comprises a re packager configured to re package the downloaded MIDlet suite by adding to it an interface element to the Open Services Gateway Initiative environment . In an embodiment of the invention the re packager is further configured to add to the downloaded MIDlet suite at least one configuration parameter specific to the Open Services Gateway Initiative environment . At least one of the exporter validator downloader and re packager may be implemented in software hardware or in a combination of software and hardware.

In an embodiment of the invention at least one of the exporter validator and re packager may be implemented on a network server rather than on a terminal device. This embodiment allows deploying a MIDlet by pushing rather than by pulling. That is the process of transferring the MIDlet suite to the terminal device may be initiated by the network server which pushes the MIDlet suite to the terminal device instead of the user initiating download of the MIDlet suite with the terminal device.

The Original MyMIDlet Suite comprises a JAD file and an Original JAR file . The Original JAR file comprises an Original Manifest file MyMIDlet Java class files and as well as MyMIDlet resource files and . The MyMIDlet Java class files and comprise the actual MIDlet or MIDlets not illustrated in of the Original MyMIDlet Suite . The MyMIDlet resource files and comprise resources needed by the MIDlets of the Original MyMIDlet Suite such as e.g. images and application data. The Original Manifest file comprises various attributes related to the Original MyMIDlet Suite such as e.g. the name of the Original MyMIDlet Suite the version number of the Original MyMIDlet Suite the vendor name of the Original MyMIDlet Suite the name icon and the main class of each MIDlet included in the Original MyMIDlet Suite minimum profile requirement by the Original MyMIDlet Suite and or minimum configuration requirement by the Original MyMIDlet Suite . The JAD file is e.g. a text file and it comprises administrative information about the Original MyMIDlet Suite and the Original JAR file such as the name of the Original MyMIDlet Suite the size of the JAR file the version number of the Original MyMIDlet Suite the vendor name of the Original MyMIDlet Suite and an URL address of the Original JAR file .

As illustrated in the Re Packaged MyMIDlet Suite comprises a Re Packaged JAR file . The Re Packaged JAR file comprises the above MyMIDlet Java class files and . The Re Packaged JAR file further comprises the above MyMIDlet resource files and . The Re Packaged JAR file further comprises the above JAD file . The Re Packaged JAR file further comprises the above Original Manifest file . In other words the present invention requires no changes to the contents of the Java class files resource files JAD file or manifest file of a MIDlet suite to be deployed. However as illustrated in in the Re Packaged MyMIDlet Suite the JAD file may be moved into the Re Packaged JAR file whereas in the Original MyMIDlet Suite it was outside the Original JAR file . Furthermore in the Re Packaged MyMIDlet Suite the Original Manifest file may be renamed for reasons explained below.

The Re Packaged JAR file further comprises an Interface element to the OSGi environment not illustrated in in which the Re Packaged MyMIDlet Suite is to be deployed. The Interface element may comprise at least one Java class file. For example the Interface element may comprise an implementation of org.osgi.framework.BundleActivator interface class file. Alternatively the Interface element may comprise a file e.g. an XML file configured to declare a service for launching and stopping Re Packaged MyMIDlet Suite .

The Re Packaged JAR file further comprises a New Manifest file which describes the contents of the Re Packaged JAR file and provides information about the Re Packaged MyMIDlet Suite . The New Manifest file uses headers to specify parameters that the OSGI environment needs in order to correctly install and activate the Re Packaged MyMIDlet Suite . Also the New Manifest file states dependencies on other resources such as Java packages that must be available to the Re Packaged MyMIDlet Suite before it can run. The OSGI environment resolves these Java packages prior to launching the Re Packaged MyMIDlet Suite . The New Manifest file may designate the at least one Java class file comprised in the Interface element to act as a bundle activator for launching and stopping the Re Packaged MyMIDlet Suite . The OSGI environment will instantiate this Java class file and invoke methods to launch or stop the Re Packaged MyMIDlet Suite respectively. Since MIDlet suites may typically have only one manifest file the Original Manifest file is e.g. renamed so as not to be confused with the New Manifest file .

Furthermore in the embodiment of the invention illustrated in the Re Packaged JAR file further comprises an Additional configuration parameter file which may comprise e.g. permissions requested by the Re Packaged MyMIDlet Suite policies and an URL address of the JAD file . The URL address may be utilized e.g. if the Re Packaged MyMIDlet Suite needs to be updated. Alternatively the URL address may be included in the New Manifest file . It is to be understood that even though only one additional configuration parameter file is illustrated in in other embodiments of the invention there may be more than one additional configuration parameter files if needed. One or more of the additional configuration parameter files may be e.g. text files.

It is obvious to a person skilled in the art that with the advancement of technology the basic idea of the invention may be implemented in various ways. The invention and its embodiments are thus not limited to the examples described above instead they may vary within the scope of the claims.

