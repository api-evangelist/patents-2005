---

title: Systems and methods for embedding messages in look-up tables
abstract: System and methods provide a message, generated based on a message authentication code (MAC), embedded in a look-up table associated with an image. The embedding of the message does not affect the image. The message may be used to authenticate the image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07558961&OS=07558961&RS=07558961
owner: Xerox Corporation
number: 07558961
owner_city: Norwalk
owner_country: US
publication_date: 20050421
---
Many electronic images have an associated look up table that describes pixel values found in an image. For example a palettized color image may have an associated color palette table that describes the colors found in the image. Typically this color table is 256 or 65 536 entries long and contains RGB red green blue values associated with the image pixels. The image pixels are associated with the RGB values via indices.

Watermarking of digital images provides a way for copyright enforcement and image authentication or verification. For example watermarking may be used to detect changes in image data thus verify whether a given image came from a trusted source.

Watermarks are typically designed to implement directly on image data. They usually require that the image data be preserved in the watermarked state. Thus images that are palettized such as color mapped to begin with can usually not be stored in the original palettized form after watermarking. More generally for a vector quantized image with pixels corresponding to codebook entries watermarking will result in pixel values which no longer correspond to the original codebook entries. Consequently the image cannot be saved in the original vector quantized form.

The order in which the RGB values occur in a palette table does not affect the image itself. In particular the order in which the RGB values occur in the table may be arbitrary. For example in an image with a palette of N colors the number of possible different orders or arrangements in which palette entries may be entered is N . Permuting the positions of two entries in the table will not change the image if corresponding permutation is also made to the association between the pixels and the entries. Thus a message may be embedded in the table by choosing a unique order in which the entries are entered in the table. In particular instead of working directly on image data to obtain a watermark a message may be embedded in the color table or a look up table LUT by selecting a particular order of palette entries. The embedded message may function as a watermark. In particular the embedded message may be subsequently extracted for verification of image integrity i.e. by detecting if the image has been altered or manipulated in any way.

For example a method may be provided for embedding a message in a look up table LUT for a data set the LUT including a plurality of entries for a plurality of values each of the plurality of values providing information regarding the data set each of the plurality of entries capable of being used for one of the plurality of values the plurality of values capable of being arranged in the entries of the LUT in a plurality of arrangements. The method may include obtaining a message the message providing information other than the information regarding the data set selecting an arrangement from the plurality of arrangements based on the message and arranging the plurality of values in the LUT based on the selected arrangement.

Also a method may be provided for verifying an image using a message authentication code MAC embedded in a lookup table LUT of the image the LUT containing values the message authentication code MAC generated by encrypting a characteristic of the image using a private key of an encryption system. The method may include determining a sequenced set of indices from the LUT contained in the image extracting a message by examining the sequenced indices and obtaining the message authentication code MAC from the extracted message.

A look up table LUT for a data set may include a plurality of entries and a plurality of values each of the plurality of values providing information regarding the data set each of the plurality of entries capable of being used for one of the plurality of values the plurality of values capable of being arranged in the entries of the LUT in a plurality of arrangements the LUT may further include a message embedded in the LUT by a selection of an arrangement from the plurality of arrangements the message providing information other than the information regarding the data set wherein the plurality of values are arranged in the plurality of entries based on the selection of the arrangement.

These and other features and details are described in or are apparent from the following detailed description.

Entries of a lookup table may be arranged in the lookup table in any order. For example the entries may be entered in the lookup table in an order in which values associated with the entries sequentially increase. For example for a lookup table having four spaces for four entries 0 1 2 and 3 these entries may be entered with 0 being entered in the first space 1 being entered in the second space followed by 3 and 4 being entered in the third and fourth spaces respectively. In such an order the values of the entries sequentially increase from the first space to the fourth space.

Alternatively the entries 0 1 2 and 3 may be entered in other orders. For example 2 may be entered in the first space 0 the second space followed by 1 and 3 in the third and fourth spaces respectively. In this way the values of the entries fluctuate instead of sequentially increasing from the first space to the fourth space.

When the lookup table is associated with an image changing the order of the entries from the first order to the second order as discussed above will not affect the image as long as the association between the image pixels and the entries remains the same. The association may remain the same if corresponding changes are made to the assignment between the image pixels and the spaces in the lookup table. In the example above the image will not be affected if a pixel associated with entry 0 remains associated with entry 0. This may be accomplished by correspondingly changing the assignment of the pixel from the first space to the second space.

Thus the order of the entries may be intentionally altered to embed a message. In particular the message may be generated based on an encryption of a characteristic of for example the image associated with the lookup table. The lookup table may then be transmitted to a receiver. The characteristic may also be transmitted to the receiver. The transmission of the characteristic may be in the form of transmitting the image.

Upon receiving the lookup table and the characteristic the receiver may compare the order in which entries are entered in the lookup table against a standard order such as for example a sequentially increasing order. The embedded message may be extracted based on the comparison. The extracted message may be subsequently decrypted to reveal the characteristic. The decrypted characteristic and the received characteristic may be compared. Such a comparison may be used in an authentication process.

For example when authenticating an online token which may be used as online currency the image of the token may be authenticated by the lookup table associated with the image. A system that performs such authentication may be implemented in an apparatus such as for example an apparatus installed in a shopping center a portable apparatus carried around by an inspector or the like. Similar applications include authentication of electronic signatures electronic art work and the like. Also a system that embeds a message may be implemented in an apparatus such as for example an apparatus installed in a shopping center for customers to make payment using online token a portable apparatus to be carried around by customers to make payment or the like.

Thus as discussed in greater detail below systems and methods provide a message generated based on a message authentication code MAC embedded in a look up table associated with an image. The embedding of the message does not affect the image. The message may be used to authenticate the image.

The following description frequently refers to palettized color images with associated palette tables such as for example color code tables. However the same principles are applicable to systems and methods for embedding messages in any look up tables by uniquely ordering values in the look up table. More generally the same principles are applicable to vector quantized VQ images through the manipulation of VQ codebooks.

For color mapped images each image pixel may be represented by a symbol such as an 8 bit symbol which is interpreted as a color value based on the palette associated with the color image. The palette may be a table that lists symbols with their corresponding color values.

The symbols in the palette table may be permuted in any order with the image remaining unchanged provided that the same permutation is also applied to the symbols constituting the image. Thus the ordering of the symbols may itself be used as a message. For example for a color palette stored along with a color image the information on the ordering of the symbols in the palette may be used to store a message. For example if entries having values normally would be entered in a table in such an order that the values would sequentially increase an order in which the values do not sequentially increase will indicate a special order and that a message is embedded by use of this special order.

The image may contain a plurality of pixels . Each pixel may be associated with an index. Each index may correspond to a position in the look up table . For example the positions may correspond to a sequence number in the order of entry in the look up table .

The look up table may contain a plurality of values. Each value is associated with a position . For example in the value V is associated with and identified by a position corresponding to an index I. Similarly a value W in the look up table may be associated with and identified by a position that is associated with the index J. 

When the positions of the values V and W are changed in the look up table the image will not be affected if the indices I and J are also changed accordingly. For example in the positions of the values V and W are switched as compared to their positions in . The corresponding indices I and J of the pixels in image are also switched accordingly. Thus the pixel associated with value V via index I in is still associated with value V with the index J. Thus the image remains unchanged because its pixels remain associated with the original values. Accordingly the values in the look up table may be rearranged to a particular order without affecting the image .

As shown in each index indicates a position in a look up table . The look up table may be a palette having values with the position of each value indicated by position . For example the value 100 resides at position 1 which is the first entry position of look up table . The value 100 may indicate a particular RGB combination resulting in a particular color.

In the positions of the values 400 and 1000 are switched as compared to their positions shown in . Consequently the association of the index 2 and 3 with the values is changed. However the image remains unaffected as long as the association between pixels P 1 1 and P 1 0 and the indices 2 and 3 respectively is also switched as shown in .

The right hand side column of table is a bit plane containing the least significant bits LSB of the indices. The left hand side column of table contains the second least significant bit second LSB of the indices. In the example shown in the second least significant bit is also the most significant bit MSB because each index only has two bits.

For the look up table in there are only four entries to accommodate the four values. Thus the number of indices is four. Accordingly in each of bit planes and has four binary bits. Also because each of the indices and appears only once in the look up table on in each of the bit planes and of there are two and only two zeros 0 and ones 1 . In particular in each bit plane the number of zeros in each bit plane is half the number of the indices. That is when the number of indices is 4 the number of zeros is two. Similarly the number of ones in each bit plane is also half the number of the indices.

As discussed above the values in the look up table may be rearranged to embed a message without affecting the image associated with the look up table. illustrates a method in which a message 0100 is embedded in the bit planes of the indices as discussed below.

In the example shown in the embedding starts at the least significant bit plane of the table . Thus the first two bits 01 of the message 0100 are entered into the top two spaces in the least significant bit plane .

As discussed above the number of zeros or the number of ones in a bit plane is half the number of the indices. When the number of the indices is four the number of zeros in bit plane may only be up to two. Thus the last two bits 00 of the message 0100 may not be entered into the bottom two spaces of the least significant bit plane because such an entry would result in the least significant bit plane having three zeros which is greater than two.

In general according to the method showing in only the top two bits in the least significant bit plane may be used in embedding a message. This is to ensure the flexibility of embedding a message which may contain an arbitrary number of zeros and ones without violating the restriction that the number of zeros or ones in each bit plane may only be as large as half of the number of indices. For example if the message is 0000 or 0001 allowing the 3rd or 4th bits in the least significant bit plane to represent the message would result in having three or four zeros in that bit plane thus violating the restriction. Thus the bottom half bits of the least significant bit plane are not used for embedding the message.

In particular in the example shown in the bottom two bits in the least significant bit plane are not used for representing the last two bits 00 of the message 0100. Rather the bottom two spaces in this bit plane are provided with values 1 0 that supplement the values 0 1 entered in the top two spaces such that the number of zeros and the number of ones in this bit plane are both two half the number of the indices.

The last two bits 00 of the message 0100 are entered in the second least significant bit plane . In particular as shown in a 0 is entered in the top space of the bit plane . Such an entry may be made without any concern of the requirement that the total number of zeros or ones may not exceed a certain number or the requirement that the binary expression of any index may not appear more than once in table . Generally the first entry of a bit plane is available for any entry.

However starting from the second space in the bit plane a concern may arise regarding restrictions that the entries in the first and second rows in table should not be the same. For example the first row of table is already 0 0. If the second space in bit plane were zero no zero would be permitted to enter in the second space in the bit plane because such an entry would make the second row of table 0 0 which would be identical to the first row. Consequently both the first and second rows of table would impermissibly correspond to the binary expression of the index 0. Under such circumstances the second space of the bit plane would become unavailable for representing the message and the last bit 0 of the message 0100 would have to be entered in one of the bottom two spaces of the bit plane .

In the example shown in because the second space of the bit plane contains a 1 the last bit 0 of the message 0100 may be entered in the second space of the bit plane . Thereafter the bottom two spaces of bit plane are filled with 1 1 which are the only numbers that remain available. At this point the complete message 0100 has been embedded in the bit planes of the indices.

As shown in after embedding the message 0100 the row row row and row of table now read 0 0 0 1 1 1 and 1 0 respectively. They correspond to the binary expressions of indices and respectively as shown in along the axis original index. The order in which these expressions are listed in table does not follow an order in which the indices sequentially increase. In particular rows of table now correspond to an order of 0 1 3 2 instead of the sequentially increasing order of 0 1 2 3. Thus the indices as listed in table are now out of order. They are no longer in a sequentially increasing order.

The indices may be altered or renamed to restore an order such as a sequentially increasing order of 0 1 2 and 3 as shown in along the axis altered index. In the altered indices the index 2 and 3 are switched relative to the original indices. illustrates a look up table resulting from a rearrangement of values according to the embedding of the message discussed in connection with . As shown in the bottom two values in look up table are switched relative to the bottom two values in the look up table in .

The altered indices as shown in do not correspond to the binary expressions in table . For example the binary expression in the third row of table which is 1 1 does not correspond to the altered index 2. Thus after embedding a message and altering the indices to restore an original order such as a sequentially increasing order of the indices the binary expressions of the altered indices will not correspond to the binary expressions listed in the bit planes. Of course as discussed above such an alteration index order in the color table will not affect the image as long as the association of image pixel with the indices is correspondingly altered. A purpose of altering the indices is to embedded a message which may be detected by a process that is reverse to the above discussed embedding process as discussed in greater detail below.

The method for embedding a message in the bit planes may be used in reverse in a process for detecting a message embedded in the bit planes of the indices of a look up table. For example after receiving an image with a look up table such as the look up table of a receiver may extract an embedded message from the LUT using the such a reverse process. The receiver may also be a user who manually detects the message. It then may verify that message using the hash function of the image or using the remaining bits in each bit plane as a confirmation. For example the bits in the bit plane not used for messaging may be in reverse or mirror order of the message bits of that plane.

When comparing the values in table against a reference order such as an order in which the values should sequentially increase the receiver may find that the third value 1000 in table should have an index 3 in the sequentially increasing order and that the fourth value 400 should have an index 2. Thus when the values in table are substituted by their indices in the sequentially increasing order the receiver may identify a list 0 1 3 2. This list corresponds to the original index in .

In the reverse method the reference order may be an order other than a sequentially increasing order as long as the order is known to the receiver. More generally if a reference order is not explicitly provided an order may be implied or assumed based on a standard order that may be used for comparison.

Using the list 0 1 3 2 the receiver may obtain a table with each row of the table corresponding to the binary expression of the element in the list. Such a table would be substantially identical to table of . Subsequently the receiver may extract the first two bits 01 from the least significantly bit plane as the first two bits of a message. Similarly the receiver may extract the third bit 0 of the message from the top space of the second least significantly bit plane .

The receiver may further determine that the second space of bit plane could have contained either 0 or 1 because entering either 0 or 1 would not have violated any restrictions in a message embedding process. Thus the receiver may determine that the 0 in the second space of bit plane is the last bit of the message. Accordingly the receiver may extract the whole message 0100. 

In the message 0100 was embedded by first filling the available spaces in the least significant bit plane . However the embedding process did not have to begin with the least significant bit plane . For example the embedding process may begin with the second least significant bit plane .

In addition the embedding process may begin with the first or second least significant bit plane or respectively starting from the bottom instead of from the top.

The binary expressions of the indices are listed in table of with each row of table corresponding to the binary expression of an index in a sequentially increasing order. As shown in table contains three bit planes including the least significant bit plane the second least significant bit plane and the third least significant bit plane . The third least significant bit plane corresponds to the most significant bit plane in this case.

As shown in the first four ones are entered in the top four spaces in the bit plane without violating any restrictions. Accordingly four zeros are entered in the bottom four spaces of bit plane because out of the eight spaces in the bit plane there may only be four ones. Thus the remaining four spaces at the bottom of bit plane must be filled with zeros.

The fifth and sixth ones are entered in the top two spaces in bit plane . However the seventh and eighth ones may not be entered into the third and fourth spaces of the bit plane because such entries would violate the restrictions discussed above. Thus the seventh and eighth ones are entered in the fifth and sixth spaces of the bit plane where the entries are permissible. Accordingly the third fourth seventh and eighth spaces of the bit plane are filled with zeros.

Based on the restrictions discussed above the ninth through twelfth ones of the message may only be entered in the first third fifth and seventh spaces of bit plane respectively. Accordingly zeros are entered into the second fourth sixth and eighth spaces of bit plane . At this point the message embedding process is now completed.

As shown in the message embedding process rearranged the indices in an order 7 3 5 1 6 2 4 0. When the original indices are altered or renamed according to the sequence of table into a sequentially increasing order the values Vare rearranged in look up table . The locations or entries of the rearranged values in the look up table are shown in .

As discussed in connection with when a look up table has four entries the bit plane table will have two bit planes. Each bit plane contains four bits. The number of bits in each bit plane available for message embedding is two half of four which is the number of entries in the look up table. The total number of bits in the message that can be embedded is four.

On the other hand when the look up table has eight entries as discussed in connection with the bit plane table has three bit planes. Each bit plane contains eight bits. The number of bits in each bit plane available for image embedding is four half of eight which is the number of entries in the look up table. The total number of bits in the message that can be embedded is 12.

Based on the above description the method may generalize to a look up table of any size. The following describes an example in which the LUT size is a power of 2. For LUT sizes that are not powers of 2 may require a further modification such as using the nearest power of 2 or decomposition as a sum of powers of 2. In general if the length the look up table is N there are log N bit planes with each bit plane capable of storing N 2 bits. Thus the total number of bits that can be embedded is N 2 log N . This number is more than half of a theoretical limit of log N bits. The embedding process begins with embedding N 2 bits by placing these in the top half of the LSB bit plane and their inverses in the bottom half. In each subsequent bit plane the bit locations are partitioned into a number of sets such that in each set the values of the bits in all previous bit locations are identical. Within each set the top half of the locations are used for inserting message bits and the inverses of corresponding bits are placed in the bottom half of the locations. Since the bits and their inverses have exactly N 2 zeros and N 2 ones where N is the number of LUT entries the process splits the set of locations having exactly the same values for the preceding bit planes into two halves and prefixes a one before the first half and a zero before the first half in the current bit plane. In general for a LUT with N entries there are log N bit planes at the kth LSB plane the table is split into 2sets each having N 2entries. At the final stage i.e. at the point of embedding in the log N th bit plane there are two locations each for which all the previous log N 1 bit planes are identical and the embedding process for the log N th plane pre fixes a 1 and a 0 before these two locations thereby making them distinct. The process thus assures that no two rows of bits are identical and the LUT indices represented by the binary values in the bit planes are actually a re arrangement or permutation of the numbers 0 through N 1 .

The length of the message may be based on an industry standard such as for example 4 bits or 8 bits. Alternatively the length of the message may be dynamically indicated in the message. For example a special character such as the ASCII EOF end of file character or string may be used to indicate the end of the message. When the number of bits available for embedding a message in the bit planes is greater than that of the message the message may be embedded in the first available bits in the bit planes leaving for example the last bit plane unused. Alternatively the message may be embedded across all bit planes but only occupying part of the available bits in each bit plane. A receiver may detect the embedded message as long as the receiver is aware of the way in which the message is embedded.

When the number of entries of a look up table is not enough for a message some entries of the look up table may be replicated with different symbols assigned the same values such as RGB values. The replication of the entries may enlarge the number of entries of the look up table. However it is not required that symbols be replicated. For example alternatively new unused values of RGB may be used to increase the capacity of the look up table since no pixel in the image points to those unused values.

In exemplary systems using electronic images with associated look up tables the indices of the look up table entries may not be stored at all and may be implicit. For instance in a palettized image only a sequence of RGB triplets may be stored with the implicit assumption that the first triplet corresponds to index 0 the second to index 1 and so on till the final Nth triplet corresponds to index N 1 where N is the number of entries in the palette. The above method of embedding the information in the LUT indices may still be employed for such a system with a suitable modification. The embedder and decoder may agree on a natural ordering of RGB entries based on their values alone or based on for example the first occurrence of the entries in the image . Note that the method assumes that RGB triplets are distinct a constraint that is easily met as discussed above. Any ordering of the entire possible range of RGB values that maps distinct RGB values to distinct numerical values may be utilized for this purpose. For instance in the case of 8 bit RGB values one such ordering is in the increasing order of the value R 256 G 256 256 B for each of the entries. In general the bits representing RGB values may be permuted in any fashion and concatenated together producing a new number which may be sorted to represent the ordering. The receiver may then determine the permutation required to re arrange set of RGB palette entries from the embedded sequence to the natural ordering and extract the information from this embedding instead of requiring the LUT indices in the image .

In an exemplary implementation the encoder may first embed messages in the LUT indices as indicated in the preceding description. illustrates an exemplary look up table LUT with a message embedded in look up table LUT indices including a column of LUT indices carrying embedded information and corresponding LUT entries that carry information for reconstructing an RGB image. The LUT thus generated is a tabular list with two columns and N rows as shown in . For each row the first column contains an index of the LUT and the second column carries the RGB triplet values corresponding to the index in the first column. The associated image not shown contains at each pixel a LUT index that encodes for the RGB triplet corresponding to the entry in the LUT. Note that with this representation two types of transformations may be made to the LUT without changing any of the intrinsic image pixel values i.e. the RGB values associated with each pixel location 1 rows in the LUT may be re ordered and 2 Any permutation re ordering may be applied to both the indices in the LUT and in the image.

With reference to a detailed implementation may be seen. The LUT labeled is the LUT obtained from the embedding process described earlier. In the first step two columns are added to the tabular list of the LUT producing a tabular list with four columns Column 1 having LUT indices with embedded message Column 2 containing corresponding RGB values Column 3 containing the numbers 0 through N 1 in ascending order and Column 4 having its kth row entry R 256 G 256 256 B where RGBis the triplet of RGB values in the second column of the kth row. Column 2 is for the purpose of clearly illustrating the effect of each step and is not required otherwise. Step 1 of the embedding process can be accomplished by a three sub step sequence a In step the rows of the newly created table are sorted in ascending order of the fourth column to obtain a new tabular list b next in step the inverse permutation is formed by mapping the LUT indices from the re ordered table to the original order of c . Next in step the inverse permutation of is applied to both the indices in the LUT and to the indices representing image pixel values the resulting tabular list from this operation is shown in . The same permutation may equivalently be applied to the indices of the LUT in however for clarity of presentation we assume that the LUT of is used.

The second step of the embedding process is then shown as where the rows of the tabular list of are sorting in ascending order of the LUT indices in column to obtain the tabular list . In the LUT indices are the numbers 0 through N 1 in sequence and may therefore be omitted from the embedded LUT entirely. In step the second column of the tabular list of is extracted to form the LUT with implicit indices that is embedded in the image in step producing an image with an implicit LUT with the message embedded within the LUT.

The process of extraction of the message embedded in an image having a LUT with implicit LUT indices is illustrated in . In the first step the sequence of LUT RGB values is extracted from the image LUT which has no indices . Next two columns are added to this tabular list producing a new tabular list with three columns column having the RGB entries in the LUT column having the implicit LUT indices as the sequence of numbers 0 through N 1 and column having its kth row entry R 256 G 256 256 B where RGBis the triplet of RGB values in the second column of the kth row. The rows of the resulting tabular list are then sorted in ascending order of the entries in the third column. The corresponding column of indices is then extracted and the embedded message is extracted from these indices. Note that if the image is unaltered since the embedding process of the step of re ordering reverses the step of and the indices recovered in are the same as the indices in the first column of or or the and therefore the extracted message is identical to the embedded message.

The above discussed message that is to be embedded in a look up table may be generated based on a characteristic of the image such as a CRC cyclic redundancy check or hash function of the image. For example the hash function of the image may be computed using the method introduced in The MD5 Message Digest Algorithm by R. L. Rivest 1321 April 1992. The MD5 message digest algorithm takes a binary message of arbitrary length and produces a 128 bit fingerprint or message digest of the message. While both a CRC or an MD5 message digest provide the capability to detect modifications in the message their capabilities and therefore the purposes for which they may be employed differ. Based on the CRC code selected the CRC offers a guarantee of detecting specific changes for example up to a certain number of random changes or changes occurring in bursts of specific lengths . The MD5 message digest offers the property that creating a different message with the same message digest is computationally difficult using current knowledge. This property has the cryptographic advantage that in spite of knowing the message digest an adversary would considerable difficulty in creating a different message which has the same message digest. Thus the message digest or fingerprint is bound to the message for which it is computed and it is not easy to forge another message for which the fingerprint is the same this property does not hold for conventional CRCs . In the following discussion we assume that the image characteristic consists of a MD5 message digest. It is understood that the characteristic could alternately be a CRC or another known or later developed cryptographic hash function for example one generated using the secure hash algorithm as described in Applied Cryptography by Bruce Schneier 2Edition John Wiley 1996 pp. 442 445 .

The characteristic of the image may be encrypted with for example a private key of an encryption system to generate a message authentication code MAC for the image. Once again a MAC based on the combination of MD 5 algorithm and encryption is chosen for the purpose of illustration here and any general message authentication code MAC may be used in this process. Details of MACs may be found in standard Cryptography texts handbooks such as Applied Cryptography by Bruce Schneier 2Edition John Wiley 1996 pages 455 459. This MAC may be used as the message that is to be embedded. Alternatively the MAC may be combined with additional information and the combination of the MAC and the additional information may be used as the message to be embedded. Alternatively a one to one transformation of the hash function instead of the hash function itself may be used for encryption to generate the MAC for subsequently generating the message to be embedded. The encryption system may be a private key cryptosystem or a public key system.

The message may be subsequently embedded in the look up table associated with the image. A receiver after receiving the image and the look up table may determine the characteristic from the image. At the same time the receiver may extract the message from the look up table and decrypt the encrypted characteristic of the image by using a key of the encryption system. A publicly available public key out of the private public key pair would be utilized in a public key based cryptosystem and a secret private key would be utilized in a private key cryptosystem. The receiver may subsequently compare the determined characteristic and the decrypted characteristic of the image. The two characteristics should agree if the image is from a trusted source. If the two characteristics do not agree the image is likely to be from an untrusted source or to have been altered.

In step S a characteristic of the image is generated from the bit stream. The characteristic may be a cryptographic hash function of the image. Then in step S the characteristic is encrypted with for example a private key of an encryption system to generate for example a message authentication code MAC . As indicated earlier alternate cryptographic techniques for generating a MAC or a digital signature may also be used in this process.

Next in step S a message is generated from the encrypted characteristic and if any ancillary information. The ancillary information may include copyright information name and or address of a corporation version of the image etc. Then the look up table is rearranged to embed the message. The message may be embedded in the bit planes of the indices of the values of the look up table. Process of the method then proceeds to step S.

In step S the image is rearranged according to the altered look up table. In particular the pixels of the image are associated with different indices if necessary so as to be associated with the original values in the look up table. Next in step S the rearranged image and look up table are output. Thereafter process of the method proceeds to step S where the method ends.

In the first branch at step S the pixels of the image are substituted with look up table values to generate a bit stream. The bit stream is generated by scanning the bits of the pixels in a predefined order such as the same order in which the bits are scanned for generating the bit stream in step S of . Next in step S a characteristic of the image is generated from the bit stream. The characteristic may be a CRC or hash function of the image.

In the second branch a message is obtained from the look up table at step S. The method for obtaining the message from the look up table may be the reverse method discussed in connection with . Next in step S the message is analyzed to extract data presumed to be the MAC. The message may be the presumed MAC itself in which case the extraction of the message accomplishes the extraction of the presumed MAC. Alternatively as discussed above the message may be a combination of a MAC data and additional ancillary information. Under such circumstances the ancillary information is separated in the message to extract the presumed MAC. Thereafter in step S the presumed MAC is decrypted to obtain a presumed characteristic of the image. The decryption may use a public key of the encryption system by which the characteristic was encrypted. For example the public may be the other half of a key pair the private key of which was used in encrypting the characteristic.

As shown in the two branches combine at step S where the decrypted presumed characteristic from the look up table and the characteristic generated from the bit stream are compared. Next in step S the result of the comparison is output. If the two characteristics agree with each other it may be determined that the image is from a trusted source. On the other hand if the characteristics do not agree authentication of the image fails. Thereafter process of the method proceeds to step S where the method ends.

The methods illustrated in may be implemented in a computer program product that can be executed on a computer. The computer program product may be a computer readable recording medium on which a control program is recorded or it may be a transmittable carrier wave in which the control program is embodied as a data signal.

In operation under control of the controller the input output interface receives an image and associated look up table from input device . The bit stream generating circuit routine or application replaces the pixels in the image with their corresponding look up table values to generate a bit stream by scanning the bits of the pixels in a predefined order. In the predefined order the image may be scanned for example horizontally from left to right progressing vertically from top to bottom. It will be appreciated that the scanning may take any order. The predefined order may be stored in the memory or may be implemented by a program stored in the memory .

The characteristic generating circuit routine or application generates a characteristic of the bit stream such as a CRC or hash function of the image. The encryptor encrypts the characteristic by using for example a private key of an encryption system. The private key may be in pair with a public key. The public key may be used in decrypting the characteristic. The encryption may be used as a message authentication code MAC .

The ancillary information generating circuit routine or application generates a message based on the encrypted characteristic and by adding ancillary information if any. For example the message may be generated as a combination of a MAC and ancillary information. The look up table and image rearranging circuit routine or application rearranges the look up table to embed the message and rearranges the pixels of the image based on the rearranged look up table. Embedding the message may automatically embed the MAC. The input output interface outputs the rearranged image and look up table via output device .

During operation of the system the memory may store data produced by the input output interface the bit stream generating circuit routine or application the characteristic generating circuit routine or application the encryptor the ancillary information generating circuit routine or application and or the look up table and image rearranging circuit routine or application . The memory may also store any program needed to perform the processing. Although depicted as a single entity the memory may be distributed as a plurality of entities.

The input output interface interfaces with an input device and an output device . The input device and the output device are connected to the system via links and respectively. The memory stores data made available by the input output interface the bit stream generating circuit routine or application the characteristic generating circuit routine or application the ancillary information extracting circuit routine or application the decryptor and or the authenticator .

In operation under the control of controller the input output interface receives an image and a look up table. The look up table may contain a MAC. The bit stream generating circuit routine or application substitutes the pixels of the image by their corresponding look up table values to generate a bit stream. The bit stream may be generated by scanning the bits of the pixels in a predetermined order such as the order in which the bits were scanned in a process in which the MAC was embedded.

The characteristic generating circuit routine or application obtains a characteristic from the bit stream such as a CRC or hash function. The ancillary information extracting circuit routine or application obtains a message from the look up table extracts ancillary information if any from the message and separates the presumed MAC from the ancillary information. The decryptor decrypts the presumed MAC to obtain a characteristic that was presumably encrypted in the MAC. The authenticator compares the decrypted characteristic from the look up table and the characteristic obtained from the bit stream and indicates a success or failure based on whether the two characteristics agree or disagree respectively. The input output interface outputs the indication via the output device .

The indication may take one or more of a variety of forms. For example in an application to verify whether an online token used as online currency is authentic the indication may be a written message or voice message such as for example token authentic if the comparison is successful. The indication may be an alarm sound or written message if the comparison is a failure. Alternatively the indication may be in the form of red or green light a display of a symbol e.g. a if authentic or an X if not authentic or the like.

During operation of the system the memory may store data produced by the input output interface the bit stream generating circuit routine or application the characteristic generating circuit routine or application the ancillary information extracting circuit routine or application the decryptor and the authenticator . The memory may also store any program needed to perform the processing. Although depicted as a single entity the memory may be distributed as a plurality of entities.

It will be appreciated that various of the above disclosed and other features and functions or alternatives thereof may be desirably combined into many other different systems or applications. Also various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims.

