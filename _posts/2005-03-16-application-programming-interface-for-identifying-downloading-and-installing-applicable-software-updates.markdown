---

title: Application programming interface for identifying, downloading and installing applicable software updates
abstract: An application programming interface (API) provides a set of functions for application developers to build software programs that automatically detect, download, and install desired software updates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07987459&OS=07987459&RS=07987459
owner: Microsoft Corporation
number: 07987459
owner_city: Redmond
owner_country: US
publication_date: 20050316
---
The present invention relates to computer software and in particular to an application programming interface.

Most software products undergo a continual revision process to repair or update features of the software. Each revision of a software product frequently requires adding new files replacing existing files with newer revisions deleting obsolete files or various combinations of these actions. This process of replacing older files adding new files and deleting obsolete files of a software product is usually referred to as updating the product. The data collection including binary files data files update instructions metadata and the like used in updating the product is usually referred to as a software update or more simply as an update. 

Once a software provider has created an update for a software product either to fix a problem enhance security or add new features the software provider will want to make that update widely available to its customer base. Quite often such as when the update is directed at correcting a flaw in the product or addressing a critical security issue the software provider will want that update installed on the customers computers as soon as possible. Indeed most software providers have a business incentive to distribute software updates to their customers as quickly and in as trouble free a manner as possible.

However a customer of a software product may not easily discover that his or her software product needs one or more specific updates. Generally an update can be deployed through a Web site or through media such as a CD. A customer may download and install the update from the Web site or the media. However these mechanisms do not enable a customer to easily discover what updates are applicable to the software product.

Therefore there exists a need for automatically identifying one or more updates that are applicable to a software product. Furthermore it is desirable to automatically download one or more updates that a customer selects to download. It is also desirable to automatically install one or more updates that a customer selects to install.

The invention addresses the above identified needs by providing a set of application programming interfaces hereinafter API . The API enables an application developer to identify download and install software updates meeting one or more criteria.

One aspect of the invention provides a software architecture for a distributed computing system. The software architecture includes one or more software programs configured to access software updates existing in the distributed computing system. A software program can be an operating system or a software application that performs a specific task for a computer user. The software architecture further includes the above mentioned API which presents functions used by a software program to access the software updates. Preferably the distributed computing system includes one or more client devices and one or more server devices wherein a server device handles a request from a client device for accessing the software updates.

In accordance with another aspect of the invention a computing system including one or more data processors and one or more software programs is provided. The one or more software applications utilize the API to access software updates.

The API provides multiple groups of services for searching downloading and installing software updates applicable to a software program. For example the API includes a first group of services related to searching downloading and installing software updates. The first group of services includes services for searching software updates that meet one or more criteria. A criterion may identify a property of an update such as the type of an update or the name of an update. The search services may provide functions concerning a software update the history of a software update and an exception generated by a software update. The search services may also provide functions concerning properties of a software update such as the category of a software update and or the download size of one or more software updates. The first group of services further includes services for downloading one or more of the found software updates. The first group of services also includes a group of services for installing one or more of the downloaded software updates and or for un installing one or more of the downloaded software updates that have been installed previously. The first group of services may also include services related to accessing software updates on the Internet.

Preferably the API also includes a second group of services for automatically installing or un installing software updates. Such services may notify a user upon the occurrence of an automatic installation or un installation of software updates. Preferably the API further includes a third group of services for providing data about a client device that requests one or more software updates. Such information includes for example the hardware configuration and system reboot requirements of the client device. Preferably the API also includes a fourth group of services for identifying one or more services from which a software program may access available software updates.

In summary the invention provides an API that enables an application developer to identify download and install software updates meeting specific requirements. As a result scripts or software programs can be written to identify software updates that are currently available for a computing system to download and to install such updates. The API can be used to scan for updates suitable for a local computer. System administrators can use the API to programmatically determine what updates should be applied to a computer download these updates and install them with little or no user intervention. Application developers can also integrate features provided by the API into computer update management software to provide a seamless operating environment.

Embodiments of the invention provide an API that enables an application developer to identify download and install or un install software updates that meet specific criteria. More specifically the API enables an application developer to identify available software updates that meet specific criteria. Such software updates can exist on the Internet or a local network. The API also enables an application developer to automatically download software updates. The API also enables an application developer to install or un install updates. Preferably the API enables an application developer to automatically install or un install updates and or to notify a user of an automatic event. Preferably the API also enables an application developer to obtain information about the hardware configurations and the system reboot requirements of a client device that requests access to software updates. The API may also enable an application developer to identify one or more services through which a software program can access available software updates.

The computing architecture also includes one or more software updates . The software updates may be associated with a server on a network . The computing architecture may include one or more servers through which a client device queries and or accesses available software updates. The client devices A Z access the software updates through the network . The client devices A Z may communicate with each other through the network using standard network protocols. The network may be a Local Area Network LAN or a larger network such as a Wide Area Network WAN or the Internet. As known to those skilled in the art and others the computing architecture may be configured to exchange documents commands and other types of data among the computing devices A Z. As will be appreciated by those skilled in the art and others the computing architecture shown in is a simplified example of one system suitable for implementing embodiments of the invention.

As shown in a client device such as the representative client device B contains one or more applications an update management API and an operating system . An application or an operating system can also be called a software program. As known by those skilled in the art an application is any software program designed to perform a specific task for a computer user such as solving a mathematical equation or supporting word processing. An operating system is a software program that manages and controls the hardware of the client device B. The goal of an operating system is to make the computing resources available to an application developer while at the same time hiding the complexity necessary to actually control the computing resources. In general an operating system such as the operating system makes computing resources available to an application via functions that are collectively known as an application programming interface or API. Conventionally the term API is also used in reference to a single one of these functions. The functions are often grouped in terms of what resource or service they provide to an application developer. An application requests resources by calling individual API functions. API functions also serve as the means by which messages and information provided by the operating system are relayed back to the application software. Embodiments of the invention provide a set of updated management API that enables an application to identify software updates applicable to a client device B. Upon identifying such software updates the update management API also enables an application to download and install or un install such software updates. The update management API only exposes read only functionality on a target device such as the server . The update management API does not allow an application such as the application to modify the state of a target device.

More specifically the update management API represents groups of functions that an application can call to search download and install or un install software updates applicable to a client device B. illustrates exemplary groups of functions in the update management API . These groups of functions can also be called namespaces. A namespace essentially defines a collection of classes interfaces delegates enumerations and structures that provide a specific set of related functionalities. As known by those skilled in the related art a class is a blueprint of an object which comprises data structures and methods for operating on a particular set of data. An interface describes how a user of a class may interact with the class. A delegate is an object oriented function pointer. An enumeration is a special kind of value type that represents named constants. A structure represents static allocated data that has value assignment semantics.

As shown in the updated management API includes multiple exemplary namespaces an Update Session namespace an Automatic Updates namespace a System Information namespace and an Update Service namespace . The Automatic Updates namespace enables an application developer to begin pause or resume automatic installation of updates on a client device. The Automatic Updates namespace may include a class that obtains information on or configures the day and the time to automatically install updates this class may also specify how to notify a user of an automatic update event. The System Information namespace provides information about hardware and system reboot requirements on the client device. The Update Service namespace provides information about one or more services that have registered to provide an application access to available software updates.

The Update Session namespace provides functionalities to start a session to search download and install un install updates for an application such as the application illustrated in . The Update Session namespace includes multiple sub namespaces such as Update Searcher Update Downloader Update Installer and Web Proxy . The Web Proxy namespace contains one or more classes enabling an application developer to obtain and configure Web Proxy settings that provide a client device access to the Internet. illustrate in detail the other exemplary three sub namespaces included in the Update Session namespace i.e. the Update Searcher namespace the Update Downloader namespace and the Update Installer namespace respectively.

As shown in an Update Searcher namespace contains multiple classes that enable an application developer to search for updates applicable to a client device such as the client device B illustrated in . For example the Update Searcher namespace includes an Update Searcher class that enables an application developer to search synchronously or asynchronously for updates matching one or more criteria such as the type of update the ID of the update or the category of the update. The Update Searcher namespace may include an UpdateHistoryEntryCollection class the object of which provides access to multiple objects of an UpdateHistoryEntry class . The UpdateHistoryEntry object provides information about an update that has been installed or un installed previously on a client device through the use of the update management API . Such an update may no longer be applicable to the client device. Information provided by the UpdateHistoryEntry object includes for example the application that processed the update date of the installation or un installation and description of the update.

The Update Searcher namespace may also include a SearchResult class . An object of the SearchResult class includes information about the result of a search for categories or updates. Such an object provides a collection of categories found on the client device by a search. Such an object also provides a collection of updates found on the client device through a search. In an exemplary embodiment of the invention an object of the SearchResult class may provide an object of an UpdateCollection class . An object of the UpdateCollection class provides access to multiple objects of an Update class . An object of the Update class provides information concerning an individual update. Such information may include the identity of the update description of the update un install options for the update download priority of the update size of the update and expiration date of the update. For example an update may have a normal or higher priority for a download operation. In addition an object of the SearchResult class may provide an object of a CategoryCollection class . An object of the CategoryCollection class provides access to multiple objects of a Category class . An object of the Category class provides information about the category of an update. Such information includes the name ID description owner and intended product of the category. An object of the Category class may also provide a collection of updates that belong to this particular category. An object of the Category class may also provide a collection of the parent categories or the children categories of this particular category. In addition an object of the SearchResult class may also provide an object of an UpdateExceptionCollection class which provides access to multiple objects of an UpdateException class . An object of the UpdateException class provides the description and the context of an exception that is generated when an update error occurs.

Preferably a user interface is provided so that a user can enter the search criteria. The user interface may also show the user the collection of updates contained in the object of the SearchResult class . The user may select the updates to be downloaded i.e. the desired updates. The application then may send information about the desired updates to an object of the UpdateDownloader class . Preferably the desired updates will be contained in an object of the UpdateCollection class . The object of the UpdateDownloader class then downloads the required files for the desired updates from the server constructs and returns an object of the DownloadResult class that contains the download result for each of the desired updates. The user interface then may present a list of the downloaded updates to the user and let the user choose when to install them. Sometimes one or more of the downloaded updates may have been installed on the application previously. Preferably a user may also select to un install one or more of the downloaded updates.

Once a user selects to install one or more of the downloaded updates the application creates an object of the UpdateInstaller class passing it information about the updates to be installed. The object of the UpdateInstaller class then installs each requested update constructs and returns an object of the InstallationResult class that provides details of the installation result for each requested update.

Although not required the invention will be described in the context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. As noted above the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

It should be further understood that the present invention may also be applied in the context of accessing software updates on the Internet via a browser thus the present invention may apply to much lower end devices that may not have many of the components described in reference to e.g. hard disks etc. .

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer . The personal computer includes a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM .

The personal computer further includes a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer .

Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . For example the application programs may comprise the application illustrated in .

A user may enter commands and information into the personal computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial port USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks Intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

