---

title: Method and system for generating schema to java mapping descriptors
abstract: A method and system for generating schema to Java descriptors. In one embodiment, a second object having customized schema to Java mapping information is created. The second object is placed within a first object. Via the first object, schema to Java generation is initiated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700681&OS=08700681&RS=08700681
owner: SAP AG
number: 08700681
owner_city: Walldorf
owner_country: DE
publication_date: 20050928
---
Embodiments of the invention generally relate to the field of web services and more particularly to generating schema to Java mapping descriptors using schema to Java generation architecture.

Efforts are being made to more easily conduct business in a web based environment. Web Services is loosely understood to mean the ability to discover and conduct business in a web based environment. For example a user e.g. a web based application or person with a web browser may 1 search through an online registry of businesses and or services 2 find a listing in the registry for web based access to a service that that the user desires to have performed and then 3 engage in a web based business relationship with the service application including the passing of relevant information e.g. pricing terms and conditions over the network. In other words web services generally refer to offerings of services by one application to another via the World Wide Web.

Given the nature and use of web services and the rapid increase in their demand interoperability of web services across clients and servers is becoming increasingly important and cumbersome. Some attempts have been made to achieve interoperability across a wide range of platforms and runtimes. For example using open standards like extensible Markup Language XML Simple Object Access Protocol SOAP Web Services Description Language WSDL and Universal Description Discovery and Integration UDDI some interoperability has been achieved.

However the open standards are not evolving fast enough to keep up with the increasing demand for web services and needs of additional flexibility and control on the client side. One of the problems today is the convoluted relationships and mappings between relevant standards. Neither the interoperability nor the client side flexibility are sufficiently achieved because of the conventional separation of standards models and entities for web services WS and web services client WSC . illustrates a prior art web services model . The illustrated web services model includes Web service definition which includes the description of design time configuration of a web service. Web service configurations refer to the description of the run time configurations of a web service. The web services model further includes a virtual interface . A virtual interface refers to an abstract interface.

Referring now to it illustrates a prior art web services client model . In the illustrated web services client model schema to Java STJ mappings contain serializer classes and deserializer classes of the XML Schema Definition XSD Types. However the conventional STJ mappings do not contain any field or operation specific mappings. The conventional model further includes logical ports that are limited to containing merely runtime RT relevant configurations and do not contain design time DT configurations. Finally the illustrated WSDL contains a parsed WSDL structure.

Although the conventional models provide some flexibility further improvements are needed to achieve interoperability. For example the conventional model provides provider oriented inside out approach for web services but it does not support consumer based outside in approach for web services which is becoming increasingly important. The conventional models do not provide similar modeling approach for developing web services and web services client which leads to usability deficiencies.

A method and system are provided for generating schema to Java descriptors using schema to Java generation architecture. In one embodiment a second object having customized schema to Java mapping information is created. The second object is placed within a first object. Via the first object schema to Java generation is initiated. The first object further includes default customized schema to Java mapping information.

Described below is a system and method for generating schema to Java mapping descriptors using schema to Java generation architecture. Throughout the description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the present invention.

In the following description numerous specific details such as logic implementations opcodes resource partitioning resource sharing and resource duplication implementations types and interrelationships of system components and logic partitioning integration choices may be set forth in order to provide a more thorough understanding of various embodiments of the present invention. It will be appreciated however to one skilled in the art that the embodiments of the present invention may be practiced without such specific details based on the disclosure provided. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

Various embodiments of the present invention will be described below. The various embodiments may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor or a machine or logic circuits programmed with the instructions to perform the various embodiments. Alternatively the various embodiments may be performed by a combination of hardware and software.

Various embodiments of the present invention may be provided as a computer program product which may include a machine readable medium having stored thereon instructions which may be used to program a computer or other electronic devices to perform a process according to various embodiments of the present invention. The machine readable medium may include but is not limited to floppy diskette optical disk compact disk read only memory CD ROM Digital Video Disk ROM DVD ROM magneto optical disk read only memory ROM random access memory RAM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM magnetic or optical card flash memory or another type of media machine readable medium suitable for storing electronic instructions. Moreover various embodiments of the present invention may also be downloaded as a computer program product wherein the program may be transferred from a remote computer to a requesting computer by way of data signals embodied in a carrier wave or other propagation medium via a communication link e.g. a modem or network connection .

The illustrated Schema to Java mappings model is used for describing mappings between XSD types and Java classes representing these types such as the names of the fields. The configuration model includes the design time and runtime configuration of web services and web services client. The configuration model logically references the WSDL model and the WSDL IM model which in turn references the STJ mappings model .

As illustrated in one embodiment a common model is provided for WS and WSC frameworks to perform development deployment and configuration of applications with relative ease. WS and WSC frameworks may reside on a Java 2 Enterprise Edition J2EE engine. In one embodiment the common model is migrated to the J2EE engine to run and use the WS WSC proxy on the J2EE engine to provide a common model for WS and WSC frameworks. Such migration can be performed using various migration controllers and interfaces that are used for application development. In one embodiment the common configuration is achieved by having a common configuration entity in the configuration model . Common design utilities are provided using a common interface mapping model and a common schema to Java mapping model while common deployment entities are provided with insignificant differences between client and server.

In one embodiment common models are managed by a common framework at the J2EE engine. The common model is created by first identifying those elements features and components components or properties that are common to both web services model and web services client model. Once such common components are identified they are then extracted and put together to create a common WS model. It is contemplated that those components that are necessary and or preferred are used to create the common framework while those components that are not regarded as necessary and or preferred may not be used. Further the use of such common components helps support the deployment of web services and web services client in a common way. For example SAP administrative tools model can be converted in light of the common framework to separate the WS tools in the SAP Administrative tools from the J2EE engine because of the different requirements associated with the SAP Administrative tools and the J2EE engine. Examples of administrative tools include various Integrated Development Environment IDE tools e.g. IDE wizard and IDE views and other SAP based IDE and administrative tools such as SAP NetWeaver Developer Studio SAP Visual Administrator and SAP NetWeaver Administrator. Further SAP s IDE can be based on the Eclipse IDE and may contain additional SAP developed plugins.

In the illustrated embodiment the common model combines the requirements from both the provider and consumer scenarios and is suitable to be used by both the service and client platforms. This is performed such that the common elements of functionality are adopted while the uncommon elements work side by side not only without interfering with each other but by complementing each other in the common model . In one embodiment common models are generated and employed and further they are directly mapped in a common model via any number of programming languages that are right for the time e.g. C C C Java and ABAP . Further a generator such as a proxy generator or a code generator modules interfaces and components are employed to form common models generate WSDL model form direct mapping between models and between web services interfaces and Java interfaces.

The common model eliminates the need for the conventional virtual interface for storing the data e.g. description of the interface and its types . In one embodiment web services interface data is separate between the WSDL model and the two mapping models . Using this technique SOAP extensions are no longer necessary as the need for VI to WSDL conversion is eliminated. Using the common model web interfaces are described in the WSDL model as opposed to a virtual interface. Further the interface mapping information is used to describe the mapping of web interfaces to Java interfaces e.g. Java SE . Then multiple design time configurations can be attached to a single interface as an alternative.

Furthermore the web services definition which can be used to describe an alternative design time configuration is made part of the design time part of the configuration model . This helps eliminate the need for generating several portTypes based on the web services definition which would otherwise be necessary because the configuration would have to be expressed in the form of WSDL extensions. In one embodiment a WS policy standard is used to express configuration of web services and consequently several alternative configurations can be expressed using one WSDL portType. A WS policy standard can be dynamically created in which various parameters can be defined as necessary or desired. Further a client proxy generated out of such WSDL may contain a single service endpoint interface SEI which has a superior use for the application developer using it as proxy. An SEI can be used to specify methods of the Java class that are to be exposed as web services operations which are included and published in the WSDL model as the portType that a client application uses to invoke web services.

In one embodiment the STJ mappings model contains not only serializer and deserializer classes but also other field and operation specific mappings information. Using the STJ mappings model having such information helps facilitate various kinds of mappings such as names of getter setter methods of a specific field if an attribute is presented as a data member or with getters setters etc.

The illustrated WSDL model includes a WSDL file that specifies the WSDL structure including message formats Internet protocols and addresses that a client may use to communicate with a particular web service. A WSDL document contains sections to describe web services data structures using XML schema. A WSDL document contains various components and elements e.g. biding import message operation portType service and types that are rooted in the root element e.g. definitions element of the WSDL document. The types WSDL element contains XML schemas inlined or references to standalone XSD documents.

The binding element is used to assign portTypes and its operation elements to a particular protocol e.g. SOAP and encoding style. The import element is used to import WSDL definitions from other WSDL documents such as those similar to an XML schema document import element . The message element describes the message s payload using XML schema built in types complex types and or elements defined in the WSDL document s type elements. The operation and portType elements describe web service s interface and define its methods and are similar to Java interfaces and their method declarations. The service element is used for assigning an Internet address to a particular binding. The type element uses the XML schema language to declare complex data types and elements that are used elsewhere in the WSDL document. The WSDL IM model is used for describing the mappings between the Java SEI and its WSDL representation.

The STJ mappings model contains a model for describing mappings between XSD types and Java classes representing a group of classes and interfaces in Java packages a set of Java content interfaces representing the content models declared within the schema and a set of Java element interfaces representing element declarations occurring within the schema.

In one embodiment the WSDL IM model contains reference to and uses elements of interfaces with the WSDL model . The WSDL IM model further contains reference to the STJ mappings model . The STJ mappings model on the other hand references to the WSDL model and uses elements from the WSDL model . Examples of the elements that the STJ mappings model uses include elements of XSD and or type elements such as complex type and simple type. The configuration model contains reference to the WSDL model and the WSDL IM model .

A virtual interface refers to an abstract interface and or a type description system that is created based on a programming language interface e.g. Java interface and ABAP methods . A virtual interface can be used to decouple the language specific implementation from interface description. A web service refers to an interface of the web service as described by the WSDL file at the WSDL model which describes web services methods and web services type systems such as the XML messages transmitted upon the web services invocation. When the web service interface is generated via the virtual interface it is done by having Java classes build the virtual interface to generate the WSDL file web interface . This process of WSDL generation is carried in the engine by the WS runtime while the virtual interface contains hints for WSDL generation details called SOAP extensions. A WSDL file provides proxy generator which generates Java classes web services client proxy and logical ports that contain web services client configuration . Using the web services client proxy classes application invoke the web services described by the WSDL file. Also using logical ports applications configure the web services client proxy.

In one embodiment virtual interfaces and the virtual interface model are eliminated by having the web services development based on WSDL web services interface at the WSDL model in an outside in scenario. For example on the server side WSDL provides proxy generator which generates default mappings that are then changed e.g. updated as the desired by the developer or as necessitated using an administrative and or IDE tool such as an IDE wizard SAP Visual Administrator SAP NetWeaver Developer Studio etc. This is then used by the proxy generator to generate Java beans with mapped Java methods and WSDL and mappings and the configuration model . A developer can implement methods logic of the bean and thus providing logic to the web services methods. Furthermore the conventional inside out scenario can be customized using administrative tools and or IDE tools to be compatible with the new model . For example in one embodiment Java classes can create a virtual interface that generates default WSDL which proves a proxy generator which further generates default mappings. These default mappings e.g. default Java mappings are then changed or updated or customized to reflect the original Java interface for which the common WS model can be used by using reusing the outside in deployment. On the client side in one embodiment WSDL at the WSDL model provides a proxy generate which generates Java files and mappings and the configuration model . This mechanism provides having the same deployment entities for adapting various scenarios e.g. inside out and outside in and allows the common model for development of such scenarios.

In one embodiment the configuration object refers to an object including default and customized schema to Java configuration mapping information. The configuration object may also include default mapping information as necessitated. Further the mapping information contained of the configuration object is changeable to update and customization. Using the configuration object and schema files the schema to Java generator generates Java classes files interfaces serializers and the configuration data . The configuration data contains schema to Java mapping information and serializer information. The schema to Java mapping information at the configuration data includes customized mapping information and may also include default mapping information for generating schema to Java mapping. The schema to Java mapping information at the configuration data is then represented as the configuration object for the schema to Java generation. The configuration data resides at an external file e.g. types.xml file .

In one embodiment the schema to Java mapping information contained in the configuration data saved at the types.xml file can then be loaded as the configuration object . For example the original default mapping information can be amended at generation resulting in customized mapping information at the configuration data residing at the types.xml file which can then be reloaded as the configuration object . The configuration data further includes serializer information e.g. names of serializers relating to configured serializers to facilitate initialization of serializers and Java files classes and. or interfaces.

In one embodiment the customized and configured information relating to schema to Java mapping is used to generate customized schema to Java mapping and initialization of the serialization framework after the generation process is completed. The mapping information may include description of relationships between the XML schema and Java classes or files . Such mapping information is further used to identify how and which Java files or classes are to be generated and loaded. Further the configuration data can be modified and customized as necessitated or desired. For example to change the nature of schema to Java mapping information such as class names field names and the like can be amended to achieve the desired results. The configuration data also includes Java class information e.g. names of Java classes relating to generated Java classes .

In one embodiment the configuration data includes a list of serializers description of relationships between serializers and the necessary files that the runtime serializers can load. A serializer refers to a special class with special functionality to implement special interfaces and to serialize specific Java objects into specific a XML format. In other words a serializer provides an interface to the parameters to an object which can be converted into XML or vice versa. Furthermore Java representation for XML schema types is generated Java types using customized mapping rules are generated mapping rules without type generation are exported and in some instances Java types may also be generated using default mapping rules.

Further using the contents e.g. default and customized schema to Java mapping information represented by the configuration object and the configuration data . The schema to Java generator can be used to integrate multiple web services implementations into one binding framework so that the reliance on a single default implementation is not necessary. For example the illustrated architecture can have a single binding framework that can be used for those schema to Java generations that are not just specifically fitted for the requirements of a single or default implementation e.g. JAX RPC but can also be used with various other web services implementations e.g. JAX RPC Portals XI and WS runtime mapping in the same XML binding framework.

Using the configuration object and the configuration data the functionality of the binding framework can be further extended in usability to include various other functions. Such other functions include describing the mapping of XML schema to Java via schema to Java mapping information initializing serialization runtime and using plugging extensions to serialization runtime by adding XML type specific serializers and or Java class specific serializers that are invoked by serialization runtime.

In one embodiment the generation process is initiated at the web services framework with triggers the generation of schema to Java generator . In the illustrated embodiment the schema to Java generator generates serializers interfaces and configuration data . The configuration data includes serialization information and schema to Java mapping information at an external XML file. In one embodiment the configuration data is generated by providing customized configuration object to the schema to Java generator or in another embodiment default mapping information is provided to the schema to Java generator but it is then amended at the schema to Java generator to obtain particular customized configuration data .

In one embodiment as illustrated the content of the configuration data from the external file is then used as the Schema Type Info Set object which provides customized schema to Java mapping information. The Schema Type Info Set object is wrapped with other necessary and or default mapping information as represented by the configuration object . Further a Schema Type Info object is provided to allow access to the mapping information of the configuration object and the Schema Type Info Set object . The generation process is triggered with the loading of the schema mapping information of configuration object and the Schema Type Info Set object . The generation is then invoked and results are obtained.

In one embodiment configuration information for each schema type can be described using the Schema Type Info object . This configuration information may include the description of which schema type to what Java type is mapped and which serializer is responsible for this schema type and what the constructor parameters are going to be for this serializer. The configuration information may further include properties that customize the schema to Java field mappings. Also schema mappings of the Schema Type Info object are combined in schema mapping sets in the Schema Type Info Set object . The Schema Type Info Set object can also include default schema mapping information as necessitated or desired.

For those types that do not have mapping information represented by the Schema Type Info Set object the schema to Java generator can generate serializers and Java classes and can add the mapping information to the Schema Type Info Set object . There may be separation between the schema to Java mapping and schema to serailizer mapping in the information represented by the Schema Type Info object and the Schema Type Info Set object . This is for example to reuse serializers in multiple use cases with minimum modifications. Also for example one serializer with different parameters can be used for different simple types.

As illustrated configuration object is an object representing default mapping information that could include manual mapping information as set forth in the configuration object by the programmer or developer. Schema Type Info Set object and Schema Type Info object are also illustrated representing schema to Java mapping information including default and or customized mapping information and interfaces necessary to allow access to such information.

At processing block the configuration object including the Schema Type Info Set object is loaded or reloaded with its default and customized mapping information. With the start of the mapping information and schema files loading the generation process is invoked at processing block . At processing block the schema to Java generator generates results including schema to Java configuration data serializers and Java files classes and or interfaces. The results are then queried and obtained in accordance with the command placed at the initiation of the generation process at processing block . As described elsewhere in this document the command includes Load Container Framework and or All to help customize the results according to the user s needs or desires.

Client systems are used to execute multiple applications or application interfaces. Each instance of an application or an application interface can constitute a user session. Each user session can generate one or more requests to be processed by the server . The requests may include instructions or code to be executed on a runtime system e.g. the virtual machine VM on the server . A VM is an abstract machine that can include an instruction set a set of registers a stack a heap and a method area like a real machine or processor. A VM essentially acts as an interface between program code and the actual processor or hardware platform on which the program code is to be executed. The program code includes instructions from the VM instruction set that manipulates the resources of the VM .

A hard drive or other storage device may be used by the system for storing information and instructions. The storage device may include a magnetic disk or optical disc and its corresponding drive flash memory or other nonvolatile memory or other memory device. Such elements may be combined together or may be separate components. The system may include a read only memory ROM or other static storage device for storing static information and instructions for the processors through .

A keyboard or other input device may be coupled to the bus for communicating information or command selections to the processors through . The input device may include a keyboard a keypad a touch screen and stylus a voice activated system or other input device or combinations of such devices. The computer may further include a mouse or other cursor control device which may be a mouse a trackball or cursor direction keys to communicate direction information and command selections to the processors and to control cursor movement on a display device. The system may include a computer display device such as a cathode ray tube CRT liquid crystal display LCD or other display technology to display information to a user. In some environments the display device may be a touch screen that is also utilized as at least a part of an input device. In some environments the computer display device may be or may include an auditory device such as a speaker for providing auditory information.

A communication device may also be coupled to the bus . The communication device may include a modem a transceiver a wireless modem or other interface device. The system may be linked to a network or to other device using via an interface which may include links to the Internet a local area network or another environment. The system may comprise a server that connects to multiple devices. In one embodiment the system comprises a Java compatible server that is connected to user devices and to external resources.

While the machine readable medium is illustrated in an exemplary embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine of the system and that causes the machine to perform any one or more of the methodologies of the present invention. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as but is not limited to one or more memories e.g. one or more flash memories random access memories static dynamic or other optical disks CD ROMs DVD ROMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

Furthermore it is appreciated that a lesser or more equipped computer system than the example described above may be desirable for certain implementations. Therefore the configuration of system may vary from implementation to implementation depending upon numerous factors such as price constraints performance requirements technological improvements and or other circumstances.

It is noted that processes taught by the discussion above can be practiced within various software environments such as for example object oriented and non object oriented programming environments Java based environments such as a J2EE environment or environments defined by other releases of the Java standard or other environments e.g. a .NET environment a Windows NT environment each provided by Microsoft Corporation .

It should be noted that while the embodiments described herein may be performed under the control of a programmed processor such as processors through in alternative embodiments the embodiments may be fully or partially implemented by any programmable or hardcoded logic such as field programmable gate arrays FPGAs TTL logic or application specific integrated circuits ASICs . Additionally the embodiments of the present invention may be performed by any combination of programmed general purpose computer components and or custom hardware components. Therefore nothing disclosed herein should be construed as limiting the various embodiments of the present invention to a particular embodiment wherein the recited embodiments may be performed by a specific combination of hardware components.

It should be appreciated that reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore it is emphasized and should be appreciated that two or more references to an embodiment or one embodiment or an alternative embodiment in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined as suitable in one or more embodiments of the invention.

Similarly it should be appreciated that in the foregoing description of exemplary embodiments of the invention various features of the invention are sometimes grouped together in a single embodiment figure or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure however is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather as the following claims reflect inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus the claims following the detailed description are hereby expressly incorporated into this detailed description with each claim standing on its own as a separate embodiment of this invention.

While certain exemplary embodiments have been described and shown in the accompanying drawings it is to be understood that such embodiments are merely illustrative of and not restrictive and that the embodiments of the present invention are not to be limited to specific constructions and arrangements shown and described since various other modifications may occur to those ordinarily skilled in the art upon studying this disclosure.

