---

title: Automatically processing dynamic business rules in a content management system
abstract: A business rule processing system automatically processes dynamic business rules in a content management system, allowing frequent updates to the business rules. The updates can be automatically adapted by the system without restarting the content management system. The system utilizes a stand-alone rule engine. Business logic is encoded as business rule definition files using a platform-independent language; the business rule definition files are stored in a central business rule repository. The business rules are managed and executed by the rules engine; the rules engine provides business rule processing services to other parts of the content management system. The system reduces development and maintenance cost, accelerates the business rule update cycle, and simplifies administration efforts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08140362&OS=08140362&RS=08140362
owner: International Business Machines Corporation
number: 08140362
owner_city: Armonk
owner_country: US
publication_date: 20050830
---
The present application is related to co pending U.S. patent application titled System Method and Service for Automatically and Dynamically Composing Document Management Applications Ser. No. 10 980 716 which was filed on Nov. 3 2004 and to co pending U.S. patent application titled System and Method for Defining and Generating Document Management Applications for Model Driven Document Management Ser. No. 11 123 735 which was filed on May 5 2005 both of which are assigned to the same assignee as the present application and are incorporated herein by reference.

The present invention generally relates to content management. More specifically the present system pertains to a business rule engine in a content management application that applies dynamic selectable business rules to data items the business rules manage processing of the data items and execute actions based on information in the data items.

Content management CM is defined as software that builds organizes manages and stores collections of digital works in any medium or format. Content management refers to the process of handling various types of structured and unstructured information including images and documents that may contain billing data customer service information or other types of content. Content management further refers to the process of capturing storing sorting codifying integrating updating and protecting any and all information. Studies estimate that more than 75 of enterprise data is unstructured and document related.

Key technologies in the content management market comprise traditional document management Web content management digital asset management and records management. Users of content management are in document heavy industries where document management is often essential for regulatory or compliance reasons. A real time enterprise needs content management so it can create access and transfer information as needed to meet business goals of the enterprise.

While outwardly dissimilar these forms of enterprise content have similar management needs. To be truly useful a content management solution is required to address requirements for mass storage search and access personalization integration with business applications access and version control and rapid delivery over the Internet. From a data point of view the difference from conventional relational databases is the support for unstructured content.

Business rule processing is a vital aspect of content management and enterprise information systems. A business rule is a statement that defines or constraints some aspect of a business. The business rule asserts business structure the business rule further controls or influences the behavior of the business. These constraints are present in many business applications such as negotiations including procurements and auction configuration financial applications catalogs and storefronts as well as security authorization and trust management. Specific examples of business rules are 

Conventional business rules applications comprise a standard vocabulary for knitting together business organizations and constraining various business behaviors. One conventional technology utilizes business rule classification methodologies and specification languages to model business rules. Another conventional technology comprises a conceptual model that covers business rule terminology semantic definitions business rule classification methodologies and information system integration. Yet another conventional approach identifies the quick change in business rule specifications as an issue and suggests a robust and flexible business rule management scenario for enterprises to solve the problem. A further conventional application proposes a metamodel for business rule specification a metamodel for business rule vocabulary an XML representation for business rules and vocabularies based on XML.

Conventional active databases are closely related to business rule processing in information systems. Traditional databases also called passive databases perform CRUD create retrieve update and delete operations at the request of users or client applications. Active databases enhance passive database capabilities by adding triggers and assertions that automatically perform operations based on predefined business rules. Those business rules usually have the recurring pattern of Event Condition Action ECA event determines when the business rules need to be evaluated condition defines what is to be evaluated and action specifies what to do when the condition is satisfied. Some conventional systems support business rule processing in the form of triggers and procedures.

Although this technology has proven to be useful it would be desirable to present additional improvements. Directly applying those active database systems to business rule processing encounters limitations events conditions and actions are mostly limited to database operations business rules have poor portability due to lack of standards in trigger syntax semantics and execution behavior there are limitations on number of triggers per table trigger scheduling and interaction capabilities are limited and integration with external applications is unsatisfactory.

Expert systems are related to business rule processing. An expert system is an information system that can solve problems in a domain by using information and analytical techniques developed by domain experts. Domain knowledge is usually encoded in business rules and an inference engine makes decisions based on these business rules and other available facts. Expert system business rules are in the form of Condition Action CA the inference engine matches the business rule conditions with the facts in the working memory and then executes actions in the matching business rules. One expert system uses a forward chaining inference engine and programs search working memory to find matching business rules for execution.

Although business rule processing for conventional technology has proven to be useful it would be desirable to present additional improvements. Business rules are not static business rules change frequently due to the changes in user requirements company policies government regulations economic trends etc. In conventional systems business rule logic is embedded into the application logic. In conventional systems business rule processing capabilities are widely dispersed and deeply embedded in many parts of the content management system such as in the client application in the middle tier and in the backend repository. Consequently it is difficult to identify and change the business rule logic as required by dynamic business scenarios. Developers are required to know implementation details about where to make changes without affecting existing code.

Some conventional business rule applications comprise commercial off the shelf products that are developed by different parties. In this case the change process is more difficult since interface standardization and compatibility problems may arise. When the upgrade to the business rule processing is completed comprehensive testing and trial processing is required. The upgrade to the business rule processing can be disruptive because the existing content management system is typically brought offline before the upgraded system is operational.

In most existing architecture designs the business logic and constraints are not abstracted out as business rules. Rather the business logic and constraints are spread across various parts of system in the client application in the middle tier and in the backend repository. These designs reveal many problems the architecture is not resilient to frequent business logic changes system development and maintenance cost is high because business rule processing implementation is tightly coupled and there is no central fine grained managerial control over the business rule execution monitoring and logging.

What is therefore needed is a system a computer program product and an associated method for automatically processing dynamic business rules in a content management system. The need for such a solution has heretofore remained unsatisfied.

The present invention satisfies this need and presents a system a service a computer program product and an associated method collectively referred to herein as the system or the present system for automatically processing dynamic business rules in a content management system. The present system operates separately from the content management system allowing frequent updates to the business rules that can be automatically adapted by the business rule processing system. While the present system is described in terms of a content management system it should be clear that the present system is applicable as well to any repository such as for example file systems relational databases object oriented database XML databases etc.

The present system utilizes a stand alone business rule engine. Business logic is encoded as business rule definition files using a platform independent language business rule definition files are stored in a central business rule repository. The business rules are managed and executed by a business rule engine that provides business rule processing services to other parts of a content management system. The present system reduces development and maintenance cost accelerates the business rule update cycle and simplifies administration efforts.

The present system comprises a centralized business rule processing system that comprises a separate layer dedicated for business rule processing. Business rules in the present system are externalized from the application code of the content management system and are executed in a stand alone business rule engine. The present system comprises an architecture that is loosely coupled to the content management application the present system further comprises a well defined interface between different parts of the content management system. The present system simplifies development of business rules and provides portability and reusability of business rules. When the specifications for the business rules change only the business rules are updated. Business rules can be independently authored and deployed into the runtime environment of the content management system without restarting transactional runtime systems thus enabling dynamic upgrades of the business rule processing system that are automatically incorporated into operation of the business rule processing system.

Business rules are encoded as text files using a business rule definition language that is independent of programming languages or computing platforms. A business rule repository stores the business rule definition files and provides query and management facilities. The business rule engine executes the business rules in a certain order according to a specified inference engine type forward chaining backward chaining etc. and provides corresponding services to other parts of the content management system. The business rule engine is typically invoked by specific events in the system such as for example arrival of new data for validation. The business rule engine queries the business rule repository locates matching business rules and related resources and executes the located business rules.

Business rulesets are partitioned according to the data types and action types so that the relevant business rules can be located efficiently. Conditions in the business rule definition are checked and actions executed based on the results of condition evaluation. Examples of actions comprise passing messages to client applications data operations on the repository routing data for further processing in a workflow etc. The repository is the persistent storage of data metadata and content similar to repositories of traditional information systems.

Business rules are executed on a server side rather than a client side. Consequently the same validation module does not need to be implemented for individual client applications on different platforms avoiding potential incompatibility problems. Execution of the present system is transparent to client applications only data and event messages are exchanged between clients and the server. No changes need to be made in individual clients when business rules are modified. A user can update business rules on the server side the updated rules are applied to the next data item that matches the modified business rules. Furthermore the present system enables fine grain control such as access control based on client types user profiles etc.

Typically for any action the present system executes one or more business rules in the form of business rulesets either before taking an action during an action or after an action. The present system classifies business rulesets into different types according to the data processing stages ENTRY stage ACTION stage and POST stage. When input data initially enters the business rule engine ENTRY business rulesets are applied to the input data. After the ENTRY business rulesets are evaluated the present system executes ACTION business rulesets in the ACTION stage. The ACTION business rulesets modify the content management repository. After the state of the content management repository is modified by the ACTION business rulesets the present system triggers other possible actions based on the modified state of the content management repository . These business rulesets are categorized as POST business rulesets and this business rule processing stage is the POST stage.

In conventional systems ACTION and POST business rulesets are usually not possible to implement in client applications for design security and performance considerations. Client applications typically require direct access to the content management repository and other parts of the content management system in a middle tier for ACTION and POST business rulesets to be coded into the client layer. This design of deep coupling is not flexible for frequent changes either at the client side or the server side. Implementing ACTION and POST business rules in conventional systems further imposes potential security threats because a bug in the client application can open the door to malicious attackers to the overall content management system. Frequent data and command flow back and forward can affect the system performance as well. In comparison the present system can incorporate ACTION and POST business rulesets in a business rule engine without exhibiting the above mentioned behaviors.

The present system decouples business logic from other parts of the content management system. Business logic is not dependent on the mechanisms for obtaining data or executing actions. The architecture of the present system provides standard interfaces between a data event layer the business rule processing layer and a repository layer. Business logic is managed in a centralized way. Business logic is encoded into small pieces called business rules. The present system precisely controls execution of business rules execution timing and execution sequence.

Changes to the business logic are simply translated as creating updating or deleting the matching business rules. Conflicts and anomalies are quickly and easily resolved and fixed. Furthermore the total cost of ownership of a content management system utilizing the present system is lower than that of conventional systems because maintenance and development is significantly reduced the business rule update cycle is accelerated and the administration process is simplified. The present system allows implementation of additional facilities such as for example logging auditing and testing.

A useful application of the present system is in enforcing regulatory compliance. For example the present system can comprise business rules that control when an item can be deleted or updated by the content management system. Adapting to changing regulations is made easier due to the separation of the business rules from the application logic of the content management system.

The following definitions and explanations provide background information pertaining to the technical field of the present invention and are intended to facilitate the understanding of the present invention without limiting its scope 

Business Rule A statement defining or constraining some aspect of a business. The business rule is intended to assert business structure or to control or influence the behavior of the business.

HTML Hypertext Markup Language A standard language for attaching presentation and linking attributes to informational content within documents.

XML extensible Markup Language. A standard format used to describe semi structured documents and data.

While system is referenced in terms of a data item generated by a user through interaction with a user interface system can be used to process one or more business rules associated with any data type or form that can be electronically transmitted processed and stored such as for example paper or electronic documents photographs video recordings audio recordings etc. Furthermore while the system is described in terms of a content management system it should be clear that the present system is applicable as well to any repository such as for example file systems relational databases object oriented database XML databases etc. Moreover while system is described in terms of Java it should be clear that the present system is applicable as well to any object oriented programming language that is platform independent.

Building blocks of a data model of the content management system are item types and attributes. In database terminology an item type corresponds to a table or relation and an attribute corresponds to a table attribute. However unlike a flat relational table an item type can have a hierarchical tree like structure much like an object in object oriented languages. Attributes for an item type can be structured with parent and child relationships that match the hierarchical structure found in real world customer application environments. This feature is used to modeling repeating groups in which multiple instances or values of attributes may be present.

For example a customer insurance policy can have multiple operators and multiple vehicles to be insured. The root node is called the root component and the inner nodes are called child components. Item types also capture information regarding versioning policy and retention period for the items. Application data comprises instances of these item types called items .

The content management system comprises a client layer the business rule processing server and a content management repository . The client layer comprises various types of client applications that allow a user to enter information in forms the entered data is referenced as input data or data items. Exemplary client applications comprise an HTML form client and an XForm client . The HTML form client and the XForm client submit information to system and the content management repository through an application server . The HTML form client and the XForm client represent web based clients. Other clients submit information to system and the content management repository directly. The content management repository comprises a repository server and a repository storage .

The application server and the other clients can access the business rule processing server and the content management repository through a network . The business rule processing server accesses the content management repository and the client layer through network .

The application server the other clients the business rule processing server and the repository server each comprise software that allows a secure interface over network . The business rule server and the repository server are each connected to network via a communications link respectively. The communications link comprises links such as a telephone cable or satellite link. The application server and the other clients can be connected to network via communications links such as a telephone cable or satellite link. The application server and the other clients are connected to network via a communications link respectively.

While system is described in terms of network the application server the other clients the business rule processing server and the repository server may also communicate via a local area network a wide area network or any other network that allows communication between the application server the other clients the business rule processing server and the repository server . Furthermore any one or more of the application server the other clients the business rule processing server and the repository server may be co located communicating over a network such as for example a local area network while others of the application server the other clients the business rule processing server and the repository server are located remotely connecting over a network such as for example the Internet.

Client interfaces supported by system comprise web clients such as the XFORM client and the HTML form client and the other clients that communicate directly with the business rule engine by calling the business rule processing API . Web clients comprise a Web browser that supports for example HTML XHTML XForm etc. Users input data into the Web browser which performs a mapping between the input data and a data model schema in the content management repository .

The Web client submits the data and the mapping information to the application server . The application server performs processing and invokes system passing the data via the API methods of the business rule processing API . Response from system is returned and rendered at the Web clients. Direct communication from the other clients to the business rule processing server is set up locally or over the network through network file systems RMI or Web services.

The business rule processing API accepts data and events from the client layer and feeds processing results back to the client layer . The business rule repository stores business rule definition files. The business rule configuration file functions as a business rule querying mechanism. A business rule processing connector comprises a library the business rule processing connector is a connector between the business rule engine and the content management repository providing content management related operations for temporary in memory objects and persistent in repository objects stored in the content management repository .

The business rule engine performs actions comprising querying the business rule repository to find matching business rules parsing and executing business rules with related actions communicating with the content management repository to carry out create retrieve update and delete CRUD operations and reporting business rule processing results to client applications in the client layer .

The business rule processing connector assumes the responsibilities of communicating between the content management repository and the business rule engine . The business rule processing connector is a library class that comprises various methods to perform create retrieve update and delete operations on item instances that are stored in memory or in repository in the content management repository .

The rule module utilizes one or more business rule definitions file stored in the business rule repository . The business rule definition file is also referenced as a business ruleset because the business rule definition file comprises many business rule blocks. Each business rule block itself comprises many small pieces of business rule definitions. The business rule definition file comprises text format and XML format. An exemplary structure of business rule definition file in text format is as follows 

Examples of business rule blocks comprise init preprocess process postprocess processTimerEvent processAbleEvent quitall and catch . At runtime an instance of a business ruleset bean is created as in memory representation of the business ruleset definition file. Business rule blocks can be invoked by calling corresponding methods on the instance of the business ruleset bean. Process is a block in which users define the core business rules that express the main purpose of the business ruleset definition file. Other blocks manage initialization preprocessing and post processing timer based business rules event based business rules exit and exception handling etc. Each business ruleset accepts an array of input variables and produces another array of output variables. For extensibility reasons the business ruleset can import classes and methods for example from external Java packages. Users can also define inner classes and functions inside the business ruleset definition.

The rule engine comprises an inference engine that executes rules in a certain order according to the inference engine. There are many types of inference engines that can be used by the rule engine script forward chaining backward chaining fuzzy pattern matching etc. The script inference engine for example sequentially executes selected business rules defined in a business rule block.

Applications of the content management system typically have different item types defined corresponding to the different entity types with which the application deals. For example an auto insurance company may have item types like Insurance Policy Claim Police Report Accident Photo and a Claim Case Folder. An exemplary business rule definition file used by the rule engine is as follows 

The business rule definition files are stored and managed in the business rule repository . In one embodiment a file system provides physical storage for the business rule repository . The business rule engine employs the business rule configuration file to determine which business rules are associated with an input data type and where to find the business rule definition files. The business rulesets are further classified according to action types and business ruleset types so that an appropriate subset of business rulesets is applied to each input datatype. Classification of business rulesets improves scalability when the number of business rules is large.

The exemplary business rule configuration file shows business ruleset information for a claim item in an insurance application. The exemplary business rule configuration file defines available business ruleset definitions business ruleset elements for each item type ItemType element . The ItemType element has the following attributes ITName is a string for the ItemType name StopOnFirstViolation is a Boolean to indicate whether the business rule engine stops processing a business ruleset when it encounters the initial violation. In each business ruleset system can have one or more related business rule definitions and one item instance can violate one or more of the related business rule definitions. If StopOnFirstViolation is false the business rule engine does not stop processing at the initial business rule violation.

In one embodiment the business rule configuration file comprises XML as illustrated by the schema view of . The business rule configuration file comprises a business ruleset mapping . The business ruleset mapping provides a mapping between a business ruleset and a data type. The business ruleset mapping comprises one or more item types such as item type through item type N collectively referenced as item types . In general the item types correspond to a table or a relation and comprise a hierarchical tree structure.

Each of the item types comprises zero or more business ruleset elements. For example item type comprises business ruleset through business ruleset N collectively referenced as business ruleset . Item type N comprises business ruleset N through business ruleset N N collectively referenced as business ruleset N . Each of the business ruleset elements i.e. business ruleset through business ruleset N comprises the following child elements ActionType RSType RSName RSFileType and RSFileLocation. In child elements are shown for business rule set ActionType RSType RSName RSFileType and RSFileLocation .

In general ActionType captures information about what action triggers the business rule. Client applications may need to invoke the business rule engine at different times while performing different actions on data items. System comprises the following action types INSERT for creating a new item instance in the content management repository UPDATE for changing content of an existing item instance in the content management repository and DELETE for removing an existing item instance from the content management repository . Action types can comprise other actions such as moving an item from one stage to the next in a workflow etc. RSName assigns a string to each business ruleset bean as a name. RSFileType selects the format type of the ruleset file such as for example text or XML. RSFileLocation comprises a string for a path in the file system where the business rule definition file can be located.

RSType contains a string that specifies the business ruleset type. Typically for any action system executes one or more business rules either before taking an action during an action or after an action. System classifies business rulesets into different types according to the data processing stages ENTRY stage ACTION stage and POST stage.

When input data initially enters the business rule engine ENTRY business rulesets are applied to the input data. ENTRY business rulesets can be used to validate a data item before taking an action. In an auto fill feature ENTRY business rulesets can be used to automatically set some attributes of the data item based on predetermined conditions. ENTRY business rulesets can perform queries on the content management repository to obtain attribute values based on pre defined primary foreign key relationships on the data model of the content management system . The query results are used to automatically replace invalid attribute values and fill missing attribute values.

For example the business rule set mapping comprises a policy item type insurance policy and claim item type claim filed for an accident . The policy item type and claim item type comprise a PolicyNumber attribute and a NamedInsured attribute. The PolicyNumber attribute can be used as a primary key on the policy item type and a foreign key on the claim item type. If an instance of the policy item type in the content management repository comprises a PolicyNumber that matches the PolicyNumber of the incoming instance of the claim item type system knows that the instance of the claim item type is valid because the claimed PolicyNumber exists. Further system can automatically assign the NamedInsured value on the instance of the Policy item type to the NamedInsured attribute on the instance of the claim item type.

The auto fill feature can avoid invalid input data and reduce input effort. After validation and auto fill the remaining ENTRY business rulesets are executed on the input data to test constraints on value boundary relationship cardinality and other user specified conditions. For example system can comprise a business ruleset that checks whether the age of a person falls between 18 and 24 young driver or between 50 and 70 senior driver as a group for special insurance rates.

In one embodiment validation functionality such as validation performed by ENTRY business rulesets is implemented in the client applications i.e. validation using JavaScript in a Web browser.

After the ENTRY business rulesets are evaluated system executes ACTION business rulesets. ACTION business rulesets perform operations on the input data such as for example insert a new item instance into the content management repository or update existing item instances in the content management repository .

After the state of the content management repository is modified by the ACTION business rulesets system triggers other possible actions based on the modified state of the content management repository . These business rulesets are categorized as POST business rulesets and this business rule processing stage is the POST stage. For example an exemplary POST business ruleset is defined as when all the auto insurance application documents are ready and verified create a new folder a special item type in the content management repository and notify manager Jack for endorsement . This POST business ruleset generates a new folder in the content management repository places the application documents in the generated folder and routes the generated folder to a workflow system for approval by the manager.

POST business rulesets provide a mechanism to initiate further steps after an action has been taken to update the state of the content management repository . POST business rulesets can be used to initiate and execute a business process and to support event based actions and notifications. A POST action may trigger cascading calls into the business rule engine since the generation of another item can require execution of the ENTRY ACTION and POST business rules for that generated item.

System exposes the following public API methods for an application in the client layer to use a validate method validate and a commit method commit . The validate method requests the business rule engine to execute the ENTRY business rulesets on the input data in memory. The commit method requests the business rule engine to process the applicable business rulesets in for example the following order ENTRY business rulesets ACTION business rulesets and POST business rulesets. Consequently the validate method allows applications in the client layer to initiate pre submit validation ensuring that input data are valid. The validate method further automatically fills certain missing data through queries to the content management repository . When the applications in the client layer are ready to submit the data to the content management repository the commit method is called. The business rules associated with the input data type are executed to change the state of the content management repository and trigger future operations based on the modified state of the content management repository .

Based on the input data event types and attributes the business rule engine queries the business rule configuration file and retrieves business rule definition files associated with the data from the business rule repository step .

If at decision step it is determined that validation is not required the business rule engine identifies the business rule repository ENTRY business ruleset s that match the input data step . The ENTRY business rulesets contain the validation rules for the input data as well as rules for auto filling certain fields of the data.

The business rule engine performs the identified ENTRY business ruleset s that match the input data step . The business rule engine then returns the validation results along with the auto filled fields to the client step . The client presents this information to the user through the user interface. The user reviews and updates as needed data on the commit form step .

Based on the user interaction the client determines whether a user commit is required for the input data decision step . If a user commit is required the client applications of the user provide input data with or without the application server to system by calling the commit method of the business rule processing API step . The business rule engine identifies in the business rule repository ENTRY business ruleset s that match the input data step . The business rule engine performs the identified ENTRY business ruleset s that match the input data step .

After applying the ENTRY rules the business rule engine identifies in the business rule repository ACTION business ruleset s that match the input data step . The business rule engine performs the identified ACTION business ruleset s that match the input data step . The business rule engine identifies in the business rule repository POST business ruleset s that match the input data step . The business rule engine performs the identified POST business ruleset s that match the input data step .

During the business rule execution process the business rule engine communicates with the content management repository to perform create retrieve update and delete operations. The data model for client applications in the client layer is pre defined in the content management repository and the business rule engine knows the mapping between input data and the data model. Consequently the business rule engine can recognize input data types and applications can be notified of results in the desired format. The results further trigger other type of actions if the business rule engine is integrated with applications such as for example process management or workflow systems.

As illustrated in by a method of system system enables dynamic scenarios in which business rules may change over time due to changes in the business requirements company policies government regulations etc. The business rule engine monitors the business rule configuration file and the business rule definition files in the business rule repository for changes step . If changes are not found decision step the business rule engine continues monitoring in step .

When changes are found decision step the business rule engine updates the memory data structure of the business rule engine with new or updated business rule configuration file s and the new or updated business rule definition file s step . The new or updated business rule definition file s and the new or updated business rule configuration files s are effective on the next invocation of the business rule engine . The business rule engine applies to subsequent input data the new or updated business rule configuration file s and the new or updated business rule definition file s step . Consequently the business rulesets can be dynamically updated without having to explicitly shut down the server applications. The business rule engine returns to step and continues to monitor the business rule configuration file and the business rule definition files.

An exemplary application of system comprises auto insurance management. Definitions of the insurance management data model comprise the following item types Auto Policy Police Report Auto Claim Damage Photo and Claim Folder. The Auto Policy item type is presented in Table 1. The Police Report item type is presented in Table 2. The Auto Claim item type is presented in Table 3. The Damage Photo item type is presented in Table 4. The Claim Folder item type is presented in Table 5.

Each item type has a set of attributes and may have child components sub structures with given cardinality. For example Table 1 shows the attribute names and value types for Auto Policy item type. It comprises the following child components Insured Vehicle with cardinality 1 . . . 4 minimum 1 vehicle and maximum 4 vehicles and Operator with cardinality 1 . . . 2. Primary key and foreign key relationships are also established for referential integrity checks and query processing between item types. For example a primary key is defined on Policy Number attribute on Auto Policy item type and a foreign key is defined on Policy Number on Auto Claim item type.

Separate business rule definition files are prepared for each item type with different action types and business ruleset types business rule processing stages . For example a Claim item type can have a business rule definition file for INSERT action at an ENTRY stage called claim insert entry.arl. Using this business rule definition the business rule engine checks input data on a claim against whether a vehicle in an accident has a record within one policy in the content management repository . If not the business rule engine reports the data input as an invalid claim.

The business rule engine performs null value checks on the attributes with a boundary check on Accident Date to ensure the entered Accident Date is no later than current time. The business rule block is defined to automatically fill the Named Insured attribute using the primary key and foreign key relationship on the Policy Number attribute. In a similar manner other business rule definitions can be defined.

It is to be understood that the specific embodiments of the invention that have been described are merely illustrative of certain applications of the principle of the present invention. Numerous modifications may be made to the system the computer program product and the associated method for automatically processing dynamic business rules in a content management system described herein without departing from the spirit and scope of the present invention.

