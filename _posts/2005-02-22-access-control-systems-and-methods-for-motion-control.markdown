---

title: Access control systems and methods for motion control
abstract: A method of generating control commands to be executed by a motion control system under control of a plurality of system users to move an object in a desired manner. At least one restricted program element associated with the motion control system is identified. An application program used by the system users when controlling the motion control system is provided. The application program employs the at least one restricted program element. A plurality of access levels are determined. Each restricted program element is associated with one of the access levels. Each of the plurality of system users is associated with one of the access levels. Motion control commands are generated based on the application program, the access level of each system user, and the access level of each restricted program element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07035697&OS=07035697&RS=07035697
owner: Roy-G-Biv Corporation
number: 07035697
owner_city: Bingen
owner_country: US
publication_date: 20050222
---
This application is a Continuation of U.S. patent application Ser. No. 10 447 185 filed May 27 2003 now U.S. Pat. No. 6 859 671 which is a Continuation of U.S. patent application Ser. No. 09 565 627 filed May 4 2000 now U.S. Pat. No. 6 571 141 which claims priority of U.S. Provisional Application Ser. No. 60 132 693 filed May 4 1999 and is a Continuation In Part of U.S. patent application Ser. No. 09 205 627 filed Dec. 3 1998 now U.S. Pat. No. 6 209 037 which claims priority of U.S. Provisional Application Ser. No. 60 067 466 filed Dec. 4 1997 and is a Continuation In Part of U.S. patent application Ser. No. 09 191 981 filed Nov. 13 1998 now abandoned which is a Continuation of U.S. patent application Ser. No. 08 656 421 filed May 30 1996 now U.S. Pat. No. 5 867 385 which is a Continuation In Part of U.S. patent application Ser. No. 08 454 736 filed May 30 1995 now U.S. Pat. No. 5 691 897.

The present invention relates to motion control systems and more particularly to interface software that facilitates the creation of hardware independent motion control software that generates control commands based on an application program.

The purpose of a motion control device is to move an object in a desired manner. The basic components of a motion control device are a controller and a mechanical system. The mechanical system translates signals generated by the controller into movement of an object.

While the mechanical system commonly comprises a drive and an electrical motor a number of other systems such as hydraulic or vibrational systems can be used to cause movement of an object based on a control signal. Additionally it is possible for a motion control device to comprise a plurality of drives and motors to allow multi axis control of the movement of the object.

The present invention is of particular importance in the context of a mechanical system including at least one drive and electrical motor having a rotating shaft connected in some way to the object to be moved and that application will be described in detail herein. But the principles of the present invention are generally applicable to any mechanical system that generates movement based on a control signal. The scope of the present invention should thus be determined based on the claims appended hereto and not the following detailed description.

In a mechanical system comprising a controller a drive and an electrical motor the motor is physically connected to the object to be moved such that rotation of the motor shaft is translated into movement of the object. The drive is an electronic power amplifier adapted to provide power to a motor to rotate the motor shaft in a controlled manner. Based on control commands the controller controls the drive such that the object is moved in the desired manner.

These basic components are normally placed into a larger system to accomplish a specific task. For example one controller may operate in conjunction with several drives and motors in a multi axis system for moving a tool along a predetermined path relative to a workpiece.

Additionally the basic components described above are often used in conjunction with a host computer or programmable logic controller PLC . The host computer or PLC allows the use of a high level programming language to generate control commands that are passed to the controller. Software running on the host computer is thus designed to simplify the task of programming the controller.

Companies that manufacture motion control devices are traditionally hardware oriented companies that manufacture software dedicated to the hardware that they manufacture. These software products may be referred to as low level programs. Low level programs usually work directly with the motion control command language specific to a given motion control device. While such low level programs offer the programmer substantially complete control over the hardware these programs are highly hardware dependent.

In contrast to low level programs high level software programs referred to sometimes as factory automation applications allow a factory system designer to develop application programs that combine large numbers of input output I O devices including motion control devices into a complex system used to automate a factory floor environment. These factory automation applications allow any number of I O devices to be used in a given system as long as these devices are supported by the high level program. Custom applications developed by other software developers cannot be developed to take advantage of the simple motion control functionality offered by the factory automation program.

Additionally these programs do not allow the programmer a great degree of control over the each motion control device in the system. Each program developed with a factory automation application must run within the context of that application.

In this overall context a number of different individuals are involved with creating and operating a motion control system dedicated to performing a particular task. Usually these individuals have specialized backgrounds that enable them to perform a specific task in the overall process of creating a motion control system. The need thus exists for systems and methods that facilitate collaboration between individuals of disparate complimentary backgrounds who are cooperating on the development and operation of motion control systems.

A number of software programs currently exist for programming individual motion control devices or for aiding in the development of systems containing a number of motion control devices.

The following is a list of documents disclosing presently commercially available high level software programs a Software Products For Industrial Automation iconics 1993 b The complete computer based automation tool IGSS Seven Technologies A S c OpenBatch Product Brief PID Inc. d FIX Product Brochure Intellution 1994 e Paragon TNT Product Brochure Intec Controls Corp. e WEB 3.0 Product Brochure Trihedral Engineering Ltd. 1994 and g AIMAX WIN Product Brochure TA Engineering Co. Inc. The following documents disclose simulation software a ExperTune PID Tuning Software Gerry Engineering Software and b XANALOG Model NL SIM Product Brochure XANALOG.

The following list identifies documents related to low level programs a Compumotor Digiplan 1993 94 catalog pages 10 11 b Aerotech Motion Control Product Guide pages 233 34 c PMAC Product Catalog page 43 d PC DSP Series Motion Controller Programming Guide pages 1 3 e Oregon Micro Systems Product Guide page 17 f Precision Microcontrol Product Guide.

The Applicants are also aware of a software model referred to as WOSA that has been defined by Microsoft for use in the Windows programming environment. The WOSA model is discussed in the book Inside Windows 95 on pages 348 351. WOSA is also discussed in the paper entitled WOSA Backgrounder Delivering Enterprise Services to the Windows based Desktop. The WOSA model isolates application programmers from the complexities of programming to different service providers by providing an API layer that is independent of an underlying hardware or service and an SPI layer that is hardware independent but service dependent. The WOSA model has no relation to motion control devices.

The Applicants are also aware of the common programming practice in which drivers are provided for hardware such as printers or the like an application program such as a word processor allows a user to select a driver associated with a given printer to allow the application program to print on that given printer.

While this approach does isolates the application programmer from the complexities of programming to each hardware configuration in existence this approach does not provide the application programmer with the ability to control the hardware in base incremental steps. In the printer example an application programmer will not be able to control each stepper motor in the printer using the provided printer driver instead the printer driver will control a number of stepper motors in the printer in a predetermined sequence as necessary to implement a group of high level commands.

The software driver model currently used for printers and the like is thus not applicable to the development of a sequence of control commands for motion control devices.

The Applicants are additionally aware of application programming interface security schemes that are used in general programming to limit access by high level programmers to certain programming variables. For example Microsoft Corporation s Win32 programming environment implements such a security scheme. To the Applicants knowledge however no such security scheme has ever been employed in programming systems designed to generate software for use in motion control systems.

The present invention may be embodied as a method of generating control commands to be executed by a motion control system under control of a plurality of system users to move an object in a desired manner. At least one restricted program element associated with the motion control system is identified. An application program used by the system users when controlling the motion control system is provided. The application program employs the at least one restricted program element. A plurality of access levels are determined. Each restricted program element is associated with one of the access levels. Each of the plurality of system users is associated with one of the access levels. Motion control commands are generated based on the application program the access level of each system user and the access level of each restricted program element.

The present invention is a security system for use with systems and methods for generating application programs for controlling motion control systems such as are described in U.S. Pat. No. 5 867 385 issued Feb. 2 1999 to Brown et al which is incorporated herein by reference. The present invention is intended to be used with systems and methods for generating software for controlling motion control systems including such systems and methods other than what is described in the 385 patent the security system of the present invention may however be used with other systems and methods for generating software or operating motion control systems. The following description of the systems and methods described in the 385 patent is thus included for illustrative purposes only and is not intended to limit the scope of the present invention.

Referring now to the drawing depicted therein at in is an exemplary motion control system as described in the 385 patent. The motion control system comprises a personal computer portion having a hardware bus a plurality of motion control hardware controllers and and mechanical systems and that interact with one or more objects not shown to be moved. The personal computer portion hardware bus hardware controllers and mechanical systems are all well known in the art and will not be discussed herein beyond the extent necessary to provide a complete understanding of the present invention. The motion control hardware controllers and their associated mechanical systems form motion control devices for moving objects.

The personal computer portion contains a software system that allows an application user to create software applications that control the motion control devices . More particularly based on data input by the user and the contents of the application program the software system generates control commands that are transmitted by one or more streams such as those indicated at and . The streams transmit control commands incorporating the hardware specific command language necessary to control a given motion control device to perform in a desired manner. The streams implement the communication protocol that allows the control commands to reach the appropriate motion control device via an appropriate channel i.e. PC bus serial port .

As generally discussed above the generation of software for controlling motion control devices normally but not necessarily involves the labors of at least two and perhaps three separate designers a software system designer a hardware designer familiar with the intricacies of the motion control device and a motion control system designer.

The software system designer develops the software system and will have generalized knowledge of motion control systems and devices but will not have detailed knowledge of specific motion control systems or devices. The application user discussed above will normally be the motion control system designer.

The motion control system designer will understand and define the overall motion control system but may not know the details of the individual motion control devices employed by the system or the software system employed to generate the application program .

The hardware designer normally possesses very detailed knowledge of specific motion control hardware devices but will normally not have knowledge of the system in which the devices are incorporated.

The present invention primarily relates to systems and methods for coordinating the knowledge of the motion control system designer and the hardware designer. In particular the present invention is a system or method for allowing the hardware designer to customize or alter the software system such that the motion control system designer can write application programs that control the motion control hardware devices such that these devices are operated within acceptable operating parameters.

As discussed in detail in the 385 patent the software system designer initially defines a set of motion control operations that are used to perform motion control. The motion control operations are not specifically related to any particular motion control device hardware configuration but are instead abstract operations that all motion control device hardware configurations must perform in order to function.

Motion control operations may either be primitive operations or non primitive operations. Primitive operations are operations that are necessary for motion control and cannot be simulated using a combination of other motion control operations. Examples of primitive operations include GET POSITION and MOVE RELATIVE which are necessary for motion control and cannot be emulated using other motion control operations. Non primitive operations are motion control operations that do not meet the definition of a primitive operations. Examples of non primitive operations include CONTOUR MOVE which may be emulated using a combination of primitive motion control operations.

Given the set of motion control operations as defined above the software system designer next defines a service provider interface SPI comprising a number of driver functions. Driver functions may be either core driver functions or extended driver functions. Core driver functions are associated with primitive operations while extended driver functions are associated with non primitive operations. As with motion control operations driver functions are not related to a specific hardware configuration basically the driver functions define parameters necessary to implement motion control operations in a generic sense but do not attach specific values or the like to these parameters.

The software system designer next defines an application programming interface API comprising a set of component functions. For these component functions the software system designer writes component code that associates at least some of the component functions with at least some of the driver functions. The relationship between component functions and driver functions need not be one to one for example certain component functions are provided for administrative purposes and do not have a corresponding driver function. However most component functions will have an associated driver function.

The overall software model implemented by the software program thus contains an API comprising component functions and an SPI comprising driver functions with the API being related to the SPI by component code associated with the component functions.

The motion control system designer normally also the user develops the application program . The application program comprises a sequence of component functions arranged to define the motion control operations necessary to control a motion control device to move an object in a desired manner. The application program is any application that uses the system by programming the motion control component . As mentioned above the component code associates many of the component functions with the driver functions and the driver functions define the parameters necessary to carry out the motion control operations. Thus with appropriately ordered component functions the application program contains the logic necessary to move the object in the desired manner.

The software system thus generates control commands based on the component functions contained in the application program the component code associated with the component functions and the driver code associated with the selected software driver .

As the control commands are being generated as described above they may be directly transmitted to a motion control device to control this device in real time or stored in an output file for later use. The software system employs the streams to handle the transmission of the control commands to a desired destination thereof. In the exemplary system the destinations of the control commands may be one or more of an output file and or the controllers .

Referring again to this Figure shows that the system further comprises a motion control component and a driver stub module . The motion control component module is the portion of the software system that relates the component functions to the driver functions. The motion control component module thus contains the component code that makes the association between the component functions contained in the application program and the driver functions.

Referring again for a moment to this Figure illustrates that the system additionally comprises a driver administrator CPL applet and a DDE server . The driver administration CPL applet generates the user interface through which the user communicates with the driver administrator module . The DDE server provides the software interface through which the application program communicates with the motion control component module .

With the foregoing general understanding of an exemplary motion control system in mind the block diagram of will now be discussed. Depicted in is a security system constructed in accordance with and embodying the principles of the present invention. The exemplary security system is implemented as part of the motion control component of the motion control system described above the security system may however be implemented in other systems.

The security system places limits on what the motion control system designer can do when developing the application program . As schematically shown at in the motion control component may be programmed either visually or programmatically with limitations related to an external system to be controlled such as a motion control device or devices. In practice a hardware designer will likely determine what limitations are appropriate and a program administrator in charge of a specific implementation of the software system will program the motion control component with the limitations determined by the hardware designer. The hardware designer and program administrator may be the same person and the term program administrator will be used herein to refer to the person who configures the motion control component with security settings as discussed above.

A primary purpose of the present invention is thus to allow the program administrator to control the operation of the software system such that access to one or more API functions is restricted based on such factors as the identity of a particular user or account and the status of the motion control system . For example a junior user may be given access to certain API functions but not others. Alternatively the entire software system may be disabled based on the status of the motion control devices . The restrictions implemented by the security system may be based on other factors as the program administrator deems necessary.

After the motion control component has been configured by the program administrator the motion control system designer interacts as shown schematically at in with the component to develop the application program . The limitations programmed into the component by the configuration process restrict the system designer s development of the application program .

More specifically as shown in the exemplary security system is a software program that comprises at least one of an API access block and an API parameter limit block .

The API access block limits the motion control system designer s ability to call predetermined functions of the API defined by the software system . The predetermined functions access to which is controlled by the security system will be referred to as controlled functions. When the controlled functions are called while programming an application program the software system will indicate that access to these programs is restricted by for example generating an error code e.g. ACCESSDENIED .

The API parameter block limits the motion control system designer s ability to set predetermined parameters used by API functions outside certain limits or beyond certain thresholds. The predetermined parameters limited by the security system will be referred to as controlled or restricted parameters a function having controlled or restricted parameters will be referred to herein as a parameter control function. The parameter limitations associated with the controlled parameters can be enforced by for example returning an error code as described above or simply by clipping the controlled parameter to the closest allowed value for that parameter whenever an attempt to use an inappropriate parameter value is made.

Any controlled function or parameter control function will be referred to herein as a restricted function. The term restricted as used herein thus includes both prohibiting use of a function as in the case of the exemplary controlled function described above and allowing use of a function in a limited manner as in the case of one of the examples of the exemplary parameter control function described above.

Either or both of the API access block and API parameter limits block may be used in a given security system constructed in accordance with the principles of the present invention but the benefits obtained by the present invention will be optimized in a security system such as the system incorporating both of these blocks and .

Using the API access block and the API parameter limit block the security system is segmented into several security zones. These security zones define the security areas configurable by the program administrator and the sum of all of the security zones defines the security range of functions and or parameters controlled by the security system . These security zones may overlap. For example access to a given function may be limited by a security zone implemented by the API access block and parameters employed by that given function may also be limited by a security zone implemented in the API parameter limit block .

The first security zone of the exemplary security system is the min max security zone. The min max security zone which is implemented as part of the API parameter limit block allows the program administrator to set minimum and maximum acceleration deceleration and velocity parameter value limits for given functions defined by the API. If set properly these limits will prevent the motion control system designer from writing application programs that could potentially damage the motion control device or devices that form part of the motion control system .

The second exemplary security zone is the Hardware Limit Enable security zone. This security zone is implemented as part of the API access block and allows or disallows the programmer to enable or disable the hardware limits. When disabled hardware limits designed to prevent damage to the motion control device are removed.

The third exemplary security zone is the Software Limit Enable security zone. This security zone is implemented as part of the API access block and allows or disallows programmers to enable or disable the software limits. When enabled all application programs are bound by the initial limit positions of the current device driver. The initial limits of the current device driver may be changed programmatically or visually through an Advanced Properties screen allowing access to the current device driver data. Generally speaking but not necessarily the performance envelope defined by the software limits of the Software Limit Enable security zone will be within the performance envelope defined by the hardware limits of the Hardware Limit Enable security zone.

The fourth exemplary security zone is the Single Control security zone. This security zone is implemented as part of the API access block . The system can run more than one application program at a given time. When enabled the Single Control security zone allows only the first application program that connects to the motion control component to control the motion control device s . The types of functions that may be called by any subsequent application program that connects to the motion control component will be restricted as defined in the Single Control security zone. For example the first application program that connects to the motion control component will be allowed to control movement a given motion control device e.g. MOVE command while the second application program that connects to the motion control component will be restricted to functions that monitor the status of the given motion control device e.g. GETPOSITION command .

The fifth exemplary security zone is the Hardware Initialize security zone. This security zone is also implemented as part of the API access block . The Hardware Initialize security zone requires any application program that connects to the motion control component to call an initializing function such as INITIALIZEHARDWARE. Any application program that does not call the initializing function will be prevented from accessing any functions defined by the API.

As mentioned above these security zones may overlap with each other. In addition not all of these security zones need be employed in a given implementation of the security system . The program administrator may determine that some or all of the restrictions represented by the security zones described above are unnecessary and or determine that other restrictions are in order.

In the exemplary system access to all functions called by an application program is limited by the Hardware Initialize security zone. If more than one application program is connected to the motion control component access to certain functions will likely further be limited by the Single Control security zone. If a given application meets the requirements of the Hardware Initialize and Single Control security zones the Hardware Limit and Software Limit security zones will limit access by the application program to controlled functions. And if the given application program attempts to change a controlled parameter of a given function that application must further meet any requirements of the Min Max security zone.

Referring now to shown therein is a module interaction map illustrating the interaction of the various modules of the exemplary system that are used to implement the security system .

Initially it should be noted that the exemplary security system is implemented using a security portion of an operating system on which the software program is designed to run. Most modern operating systems are designed with internal security for limiting user access to certain functions. The exemplary security system is designed to make use of the security portion but a separate piece of software external to the operating system may be written specifically to limit user access in an equivalent manner.

As is conventional the operating system contains a registry database that is accessible to the components that implement the security system .

The first step of using the security system is for the user to logon to the system by communicating with the driver administrator CPL applet to input a username and a password. The user may be an individual or may be an account recognized by the security system which may be used by a number of individuals. The term user as employed herein thus is interchangeable with the term account as conventionally used in computer software.

The security system compares the username and password with an internal database set or list to determine the user s level of access. If the user is not a program administrator the user has access to the motion control component but is subject to all access and parameter limitations. This situation will be described below with reference to steps five through six of the process depicted in .

If the user is a program administrator the user can alter the security system and or override any access or parameter limitations as shown by the second step in . More specifically the Driver Administrator CPL applet displays a Settings panel and or an Advanced Properties panel that allows the user visually to alter the settings of security system through the Driver Administrator CPL applet . The user so logged on may change these settings programmatically as well.

As shown in the third step in upon closing the Driver Administrator CPL applet all security settings are passed to the Driver Administrator Component . The Driver Administrator Component stores the security settings in a persistent file as shown in the fourth step shown in .

Subsequently the security settings stored in the file are used by the motion control component . In particular as shown in the fifth step when the component is created it queries the Driver Administrator Component for the security settings. The motion control component later uses the settings to limit API access and or to limit access to or clip parameters that are out of the pre designated ranges defined by the security settings.

In the sixth step of the process depicted in the motion control component organizes the security settings into an API security mask that implements the security zones discussed above.

Once the API security mask is established the software system prevents non authorized users from changing the security settings using the Settings panel and or the Advanced Properties panel . The system will also limit such a non authorized user s ability to use the motion control component according to the limitations embodied in the API security mask .

An API function call can be secured in a number of ways. First upon receiving a function call the internal API code can be configured to use the operating system s underlying security settings to verify whether or not the call should be allowed.

Another method of implementing secure API function calls is depicted in . The method depicted in verifies secure access to the API call by comparing the access required by the API function call with the current security settings allowed. In particular in the first step of the application program connected to the motion control component calls one of the API functions which within its definition contains the access rights necessary to run the logic making up the function.

In the second step of the security system compares a function mask defining the access rights required by the API to the security mask defining the system access rights previously set either programmatically or via a visual user interface. The two masks are logically ANDed together. If the result of the mask AND operation does not exactly equal the access rights required by the API step in the function call fails and the security system generates an appropriate error such as ACCESSDENIED. If on the other hand the result of the mask AND operation does equal the access rights required by the API the function continues running the body of logic that defines the called function step in .

An alternative to the mask AND operation would be to use a username password check on each API call to verify that the user has proper access. In this case each API function is associated with a security level. Each user and or account would also be associated with a security level and the system simply checks the security level of each called function against the security level of the user or account to determine whether to allow access to the function.

From the foregoing it should be clear that the present invention may be embodied in forms other than those described above. In particular while the exemplary security system is optimized for use with the exemplary motion control system described herein one of ordinary skill in the art will understand that the principles of the present invention may be applied more generally to other systems for generating command code and more specifically to other systems for generating control commands for controlling motion control devices.

The scope of the present invention should thus be determined by the claims ultimately allowed and not the foregoing detailed discussion of the preferred embodiments.

