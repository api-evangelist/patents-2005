---

title: System and method for providing notices to users of a computer program in a flexible way
abstract: A system and method provides messages received from a program to a user in an area used for displaying messages from multiple programs. The message may be received with an indication that the user is to be notified upon receipt of the message, however the user can disable or enable such notifications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08117623&OS=08117623&RS=08117623
owner: Adobe Systems Incorporated
number: 08117623
owner_city: San Jose
owner_country: US
publication_date: 20051118
---
This application claims the benefit of U.S. provisional application Ser. No. 60 629 454 entitled SYSTEM AND METHOD FOR PROVIDING NOTICES TO USERS OF A COMPUTER PROGRAM IN A FLEXIBLE WAY Filed on Nov. 18 2004 by Ethan Malasky Stephanie Goss Kevin Lynch David Calaprice and Alexander Magee and now expired U.S. provisional application Ser. No. 60 629 455 entitled METHOD AND APPARATUS FOR COMMUNICATING DATA AMONG TWO OR MORE PROGRAMS filed on Nov. 18 2004 by Thomas Reilly Kevin Lynch Ethan Malasky and Alexander Magee and now expired and U.S. provisional application Ser. No. 60 629 503 entitled METHOD AND APPARATUS FOR COMMUNICATING INSTANT MESSAGE INFORMATION BETWEEN AN INSTANT MESSAGING NODE AND ONE OR MORE PROGRAMS Filed on Nov. 18 2004 By Daniel Dura and Kevin Lynch and now expired each having the same assignee as the present application and each is incorporated by reference herein in its entirety.

The subject matter of this application is related to the subject matter of U.S. patent application Ser. No. 11 090 402 pending entitled System and Method for Communicating Information Over a Network filed on Mar. 25 2005 by Kevin Lynch David Calaprice Ethan Malasky and Tracy Stampfli and U.S. patent application Ser. No. 11 089 699 now U.S. Pat. No. 7 913 248 entitled System and Method for Installing One or More Programs and at Least a Portion of Their Environment filed on Mar. 25 2005 by Kevin Lynch Tracy Stampfli Peter Grandmaison and Rebekah Hash and U.S. patent application Ser. No. 11 090 741 now U.S. Pat. No. 7 934 210 entitled System and Method for Updating One or More Programs and Their Environment filed on. Mar. 25 2005 by Tracy Stampfli and Rebekah Hash each having the same assignee as this application and all are hereby incorporated herein by reference in its entirety.

The present invention is related to computer software and more specifically to computer software for user interfaces.

Computer software can provide information to a user. One vehicle for providing information to users is a message provided to notify the user of some event. The event may be a stock price breaking through a certain threshold a period of time that has elapsed since a prior event another user known to the user of the computer system logging into a server or any other event.

When computer software detects the event some computer software provides a message to the user notifying the user of the event. The manner of notification that the computer software may use may be limited by the environment in which the computer software operates. For example some operating systems allow the software to request that the operating system display a message box that contains text and one or more buttons allowing the user to communicate information to the program. A communication program can use this capability to request the operating system to display a message upon the occurrence of a loss of communications with a modem such as Communications with the modem have unexpectedly terminated. Would you like to reestablish communications with this modem . The communication program may also instruct the operating system to display three push buttons with legends Yes No and Cancel to allow the user to provide feedback. When the operating system displays the message it will also display the buttons and when the user selects one of the buttons the operating system can inform the program which button was selected upon request by the program.

In the example above the operating system may enforce a rule that when a message box is displayed no other user input may be received by the operating system until the user clicks one of the buttons in the message box. Such a message can be annoying to the user especially a user using an environment that allows multiple programs to be running at the same time. The user may be working on an important task in one program and may not wish to be interrupted by another program.

Additionally this type of a messaging facility can be inappropriate for many applications that wish to provide messages that may not require immediate attention. Some messages may not require any attention at all while still other messages may be important enough to simply notify the user of their existence and allow the user to decide whether to view it immediately or if the user is busy to wait until a later time. However many environments do not provide a suitable facility for these types of messages.

If the operating system or other operating environment provides no other messaging facilities suitable for the type of messages to be provided to the user to provide different types of messages the developer of each application program is required to write a facility for displaying the type of message desired by the developer provided the environment in which the program displaying the message can supply the native resources the developer requires to implement the type of message desired. However even if it is possible for the developer to write a facility that can display the message the time required to research the manner in which the message can be provided and write the facility may be significant increasing the cost of providing such a facility or preventing it from being provided. Thus it is desirable to provide in the environment itself a facility that can provide a variety of different types of messages so that it can be used by several programs.

Even if this problem is solved other problems with respect to messages remain. One such problem is the fact that messages can annoy the user particularly if they arise at an inopportune time. Even if the message does not require an immediate response the user may nevertheless not wish to be interrupted by messages at certain times but at other times the user may wish to see the messages. A provision may be made in each program the user is using to disable these kinds of messages but disabling and reenabling the messages in many different applications can be cumbersome for the user.

If the developers of different programs must write their own messaging facilities the provision of messages to a user by individual programs can cause confusion and clutter if each program uses a slightly different way of providing messages to the user. If the user is required to interpret and respond to messages from each program in a slightly different manner the user may get confused when receiving messages from different programs. Furthermore if messages are displayed in different parts of the screen by different programs it can cause a cluttered appearance on the screen and take up too much screen space to allow the user to view the messages while working on other application programs.

Some programs are made up of independently or semi independently running sub programs. When a triggering event for a message is detected by one of the sub programs or by another facility it can be desirable to notify some or all of the sub programs. To perform this function the developer of the program is required to learn what may be obscure messaging facilities provided by the environment code their own or use a combination of existing messaging facilities and coding. This process is time consuming and difficult and thereby raises the cost of the program or inhibits the developer of the program from implementing such communication at all.

What is needed is a system and method that can provide a facility for messages having different requirements of notification to the user in an environment in which multiple programs can run and therefore can be used by a variety of programs without requiring the developers of the programs to individually code the facility that provides a consistent message look and operation across the different programs in the environment without requiring separate areas in which messages from different programs must be displayed that allows the user a single point of control over the notification process for the messages received and can provide indications of messages to various component parts of a program.

A system and method provides a facility for presenting to a user different types of messages from one or more programs. The system and method receives each message as part of a notice and each notice may be marked by a program with any of one or more types to allow different types of messages corresponding to the notice to be presented to the user by the system and method in different ways yet in a consistent fashion across multiple programs. The messages corresponding to one or more types of notices are displayed by the system and method in an area in which messages from various programs are displayed so that the user may review at his or her leisure without any notification that such messages are available. For messages corresponding to the one or more other types of notices the system and method can interrupt the user with one or more different types of notifications that a message is available to be reviewed yet the system and method accepts commands from the user to suppress such notifications that a new message is available to be reviewed. The developer of the program can thus control whether the system and method can provide a notification to the user for each message it provides yet the user ultimately controls whether such notification is provided. The portion of the program that triggered the sending of the notice may enclose with the notice a data structure to be sent to other portions of the program and the system and method distributes the data structure to such other portions to allow any portion to take an action based on the data structure in the notice.

The present invention may be implemented as computer software on a conventional computer system. Referring now to a conventional computer system for practicing the present invention is shown. Processor retrieves and executes software instructions stored in storage such as memory which may be Random Access Memory RAM and may control other components to perform the present invention. Storage may be used to store program instructions or data or both. Storage such as a computer disk drive or other nonvolatile storage may provide storage of data or program instructions. In one embodiment storage provides longer term storage of instructions and data with storage providing storage for data or instructions that may only be required for a shorter time than that of storage . Input device such as a computer keyboard or mouse or both allows user input to the system . Output such as a display or printer allows the system to provide information such as instructions data or other information to the user of the system . Storage input device such as a conventional floppy disk drive or CD ROM drive accepts via input computer program products such as a conventional floppy disk or CD ROM or other nonvolatile storage media that may be used to transport computer instructions or data to the system . Computer program product has encoded thereon computer readable program code devices such as magnetic charges in the case of a floppy disk or optical encodings in the case of a CD ROM which are encoded as program instructions data or both to configure the computer system to operate as described below.

In one embodiment each computer system is a conventional SUN MICROSYSTEMS ULTRA 10 workstation running the SOLARIS operating system commercially available from SUN MICROSYSTEMS Inc. of Mountain View Calif. a PENTIUM compatible personal computer system such as are available from DELL COMPUTER CORPORATION of Round Rock Tex. running a version of the WINDOWS operating system such as 95 98 Me XP NT or 2000 commercially available from MICROSOFT Corporation of Redmond Wash. or a Macintosh computer system running the MACOS or OPENSTEP operating system commercially available from APPLE COMPUTER CORPORATION of Cupertino Calif. and the NETSCAPE browser commercially available from NETSCAPE COMMUNICATIONS CORPORATION of Mountain View Calif. or INTERNET EXPLORER browser commercially available from MICROSOFT above although other systems may be used.

Referring now to a system for providing messages and notifications of certain new messages and for distributing data associated with the message among other components of the same program as the sender of the message is shown according to one embodiment of the present invention. One or more programs provide notices containing such messages to be provided to users via monitor . When a message is initially displayed the user may also receive one or more types of notifications that a message is available if the notice as specified by the program generating it so indicates and if the user has allowed or otherwise enabled such notices.

In one embodiment each of the programs consists of an agent one or more applications and one or more pods as described in the related applications and each agent application and pod is referred to herein as an element of the program. In one embodiment one such element in each of the programs or each of the elements of each of the programs registers the elements of a program to program registration manager via program communication manager . Program communication manager handles the communication with each of the elements of the programs . In one embodiment each type of element an agent application or pod communicates with program communication manager via a manager for that type e.g. all pods communicate via a pod manager which are not shown to avoid cluttering the figure. The operation of such managers is described in the relation application.

Program registration manager issues and stores into notice storage identifiers of each of the elements of each program associated with one another so as to identify each of the elements as belonging to a single one of the programs .

In one embodiment program registration manager provides the identifiers of each of the elements to each such element for use in identifying itself as described below. In another embodiment each element provides its own identifier and or the identifier of the program to which it belongs to program registration manager when the program is registered and program registration manager uses such identifier or identifiers to identify each such element instead of issuing identifiers to each of the elements . In such embodiment each program may be downloaded by program registration manager from a web server and program registration manager ensures that only those elements downloaded from a single domain such as an Internet domain are allowed to identify themselves as being an element of the same program.

When a program element wishes to send a message to a user and optionally send a data structure corresponding to the notice to other elements of the same program as the element sending the message that element sends a notice to program command receiver via program communication manager . Program communication manager forwards the notice to program command receiver along with the identifier of the program element from which the notice was received which may be received from the element with the notice or implied from the communication channel on which the notice was received such channel having been stored in notice storage and associated with the element when the element is registered as described above.

As used herein a notice is a data record that contains text of the message intended for the user an indication of the type of notification including no notification the element sending the notice wishes the user to receive with the message and an optional data structure that is to be sent to other elements of the same program and may contain other information as described herein. As noted above notices may be received with the identifier of the element and may contain an element generated identifier used to uniquely identify the message from other messages it sends or program command receiver may add to the message and provide to the element from which the notice was received the unique identifier for the message in response. Program command receiver receives the notice and stores the identifier of the element that sent the notice the unique identifier of the message if such things were not part of the notice and the notice in notice storage . Program command receiver may also add to the notice the date and time of receipt of the notice which it retrieves from the operating system not shown when the notice is received. In one embodiment notices are stored in notice storage in the order in which they are received with the most recently received message first.

Program command receiver signals message display manager and provides some or all of the notice or its identifier to alert manager so that alert manager can retrieve the notice instead of receiving it.

Message display manager provides for display the message to a messaging window that displays messages from all of the programs that provide notices as described above even programs supplied by other vendors that may not be related to one another. The message is provided to the display screen of the monitor via user communication manager which handles the details of the display required by the operating system not shown as described in more detail below.

In one embodiment the notices received from the programs contain an indication as to whether the user should be notified that a new message is available to be viewed and at least this indication and optionally the unique identifier is received or retrieved by alert manager and this indication defines the type of notification if any the user should receive when the message is displayed as described herein. If the indication in the notice identifies the notice as one for which the user should not be notified alert manager disregards the notice the message will be displayed to the user as described herein but alert manager will not provide a separate notification as described herein provided the user has enabled that type of notification as described in more detail below. If the indication in the notice identifies the notice as one for which the user should be so notified alert manager checks notice storage for an indication as to whether the user has disabled such notifications.

If the user has disabled such notifications or in the embodiment in which a user may disable some or all types of such notifications as described below if the user has disabled all such notifications alert manager disregards the notice for the purpose of providing notification of the message contained therein. In this case in one embodiment alert manager may however set a flag in notice storage that indicates that a message has been received during such time as the user has disabled such notifications. When the user reenables them from a state in which all types of notifications are disabled to a state where at least one type of notification is enabled using command manager as described below command manager signals alert manager which checks all of the notices in message storage for the flag. If any flags are present alert manager clears all such flags and provides a notification of each type enabled and corresponding to any notice with a flag.

If the user has indicated that the user wishes to receive notifications of messages for which the program has indicated that a notification of the message should be sent alert manager signals operating system not shown to provide the notification. There may be more than one type of notification and in one embodiment the user the program or both may control not only whether any notification is provided to the user with the message but which types of notifications are employed.

To facilitate the explanation of notifications it may be helpful to briefly discuss the display screen the user sees according to one embodiment of the present invention. Although the following is a brief description additional detail will be provided below.

One type of notification that may be provided under the direction of alert manager is a visual notification. Operating system not shown may provide a visual notification via icon in the icon tray . The icon tray is displayed in the status bar at the bottom of the window in which the operating system is displayed although the user may move the status bar to any other edge of the operating system window. The operating system window shown in occupies the entire display screen .

Different operating systems may provide visual notifications via an icon in different manners. The conventional WINDOWS XP operating system provides visual notifications via icons in the icon tray by displaying a balloon help message that appears above an icon registered by the program. For such a system alert manager registers on system startup icon as a resource with the operating system not shown and then provides a Shell NotifyIcon API to operating system not shown to display the icon . To display a visual notification alert manager provides title and body text to be displayed in the balloon as part of a Shell NotifyIcon API to operating system not shown and operating system not shown displays the balloon with the text as described above.

Other operating systems provide visual notifications via an icon in other manners. For example the icon in the MACINTOSH operating system family can be made to appear to jump up and down to indicate a message is available. To register the icon with such operating system alert manager provides the icon as a resource to operating system not shown and to cause the icon to jump as a visual notification alert manager sends to operating system not shown the NMInstall API command.

Another type of notification that may be provided to the user under control of alert manager is an audible notification. In one embodiment alert manager also directs the operating system to send an audible notification to the user that a message is available by causing operating system not shown to ring a bell or play a sound via user communication manager and speaker in addition to or instead of providing the visual notification described above. Alert manager may pre register the sound with the operating system e.g. by storing it in a file and then referencing it when it sends the audible notification by sending a command to the operating system.

As described in more detail below the form of notification the user receives may be user selectable to allow the user to receive such notifications audibly visually or both. In such embodiment alert manager notifies the user according to the form or forms of notification enabled as stored in notice storage as described in more detail herein. In one embodiment the notice received from the program element includes a type that defines which types of notifications should be provided to the user e.g. 0 none 1 visual only 2 audible only 3 visual and audible . Alert manager initiates the forms of notifications if any so specified by the notice that also correspond to user enabled types of notifications that are indicated in this notice storage as described below.

In one embodiment a user may enable or disable some or all types of notifications that a new message has been received. To disable or enable such notifications the user signals user command manager via a conventional input device of such as a keyboard and or mouse as described above coupled via input to user communication manager which passes such signal to user command manager . In one embodiment the user signals user command manager via any of a number of user interface elements displayed on the display screen as described in more detail below. The user may also signal user command manager using menu bar of the application shell window . Application shell window contains application display area into which the user interface of applications are displayed one at a time based on a selection the user made in the installed programs area as described in more detail in the related applications. In one embodiment an icon in the installed programs area may also be used to signal user command manager .

When so signaled user command manager provides a user interface in the application display area . This user interface indicates whether the user will be notified when notices arrive that are indicated by the program that sent them as having messages for which the user should be notified and or indicates the one or more types e.g. audibly and or visually of notifications the user should receive upon arrival of the message. To provide such use interface user command manager retrieves one or more indicators of such information that are stored in notice storage which may be memory or disk storage or both and displays the indicators retrieved in a user interface element such as a check box that allows the user to make any changes. In one embodiment a default set of indicators may be provided when the program is installed enabling all forms of notification that a new message has been received.

The user may use the user interface elements provided by command manager to make a selection changing any or all of these indicators and user command manager stores the indicators into notice storage . If the indicators are maintained in disk storage they can persist from one session to the next and if the indicators are stored in memory user command manager may also store them in disk storage or store them onto disk upon system exit or when any changes are made and may read them from disk storage back into memory upon system startup. When alert manager receives the indications of the type of notifications that should be provided such indications being supplied as part of the notice it checks the indicator or indicators in notice storage notifying the user of the message only in the form or forms that are both specified in the notice and enabled by the user.

In one embodiment if the user changes the indicators from a state in which no notifications of any kind are provided to a different state user command manager signals alert manager . Alert manager checks the flags described above in each message in notice storage . For all such messages alert manager clears all flags and provides a notification to the user in the manner or manners the user just enabled if at least one message having a flag set corresponded to that type of notification.

A representative display of messages and the user interface surrounding them is shown in the expanded detail area in the upper part of . The operation of this display and user interface is performed by message display manager except as otherwise noted herein. Message display manager may be organized as a pod as described in the related applications in one embodiment.

Status area contains message counter that indicates the number of messages currently stored in notices in notice storage. Each time message display manager is signaled it counts the notices in notice storage and displays in message display area the numbers of messages from such notices.

In one embodiment the messages in each notice include a message headline and a message body both stored in notice storage when signaled as described herein message display manager displays the headline for all messages in notice storage or all messages not marked as suppressed in message display area with the most recently received message headline first. If there are more headlines than can fit in message display are message display manager provides a user interface element such as a scroll bar to allow the user to scroll through headlines for all notices. Each message displayed by message display manager in message display area may include message headline . Although only one message is shown in message display area there may be any number of messages from any number of different programs as described above all displayed in message display area . Message display manager also displays adjacent to the message headline some or all of the message body in any remaining space allocated for the message headline when signaled as described above. The message body in the space for the message headline is separated from the actual headline by a semicolon that message display manager inserts and in one embodiment a different font is used by message display manager to display the message headline than it uses to display the message body for example by displaying the message headline in a bold version of a font and displaying the message body in a non bold version of that same font. If the entire message body can not be so displayed in the space available for the message headline message display manager adds ellipses to the end of the portion of the message that can be displayed in the space available for the message headline less the space required for the ellipses. In one embodiment message display manager so truncates the text of the message body only at the end of a word. The user may click oh the message headline or perform the other actions described below and message display manager receives a notification of the click or other action and displays the message body which as noted above may otherwise not be initially displayed except for any portion displayed in the leftover space for the message header as described above.

An icon is displayed by message display manager to the left of the message headline to provide a visual indicator of the program from which the message was provided. A different icon may be registered by each program to program registration manager by each program sending a registration command that includes the icon that should be used for that program . In one embodiment the portion of the program that registers the icon may be the application of the program although in one embodiment an installation portion not shown of the program registers the icon when the program is installed. The registration command is received by program command receiver and forwarded to program registration manager which stores the icon and the identifier of the program in an icon storage area of notice storage . In such embodiment each notice includes the identifier of the program element that sent it and when message display manager displays the message from the notice it retrieves the program element identifier from the notice identifies the program to which it corresponds using the information in notice storage looks up in the icon storage area of notice storage the icon corresponding to the identifier of the program corresponding to the notice retrieves the icon and displays it as described and shown herein. In another embodiment each notice includes the icon which message display manager displays as described and shown herein.

Message display manager displays one message expansion indicator to the left of icon for each message. Message expansion indicator contains an icon that points to the left when the message body is displayed and otherwise contains a number that indicates the order in which the message was received when the message body is not displayed. When the user clicks on the indicator when it is a number message display manager receives an indication that it has been clicked and in response changes the icon in message expansion indicator to the arrow and displays the body of the message as shown in the Figure and described above. Other messages that may be displayed in message display area may be moved down on the display by message display manager with the lower most messages scrolling off the screen to make room for the display of the body of the message. To identify whether a particular message expansion indicator is clicked message display manager maintains a list of the coordinates of the message expansion indicators which it maintains as it changes the display of messages as described herein e.g. due to a message being added deleted or a user scrolling through the messages using a scroll control operated by message display manager using conventional techniques.

The user may also view the body of the message by clicking on headline in which case message display manager receives an indication of the click and based on the location of the click performs the same functions as described above with respect to the click of message expansion indicator as described above. Message display manager maintains the coordinates of the area of each message headline in the display as the display of messages is changed and uses this information and the coordinates at which the mouse was clicked to determine the particular message on whose headline the user clicked.

Suppression of the display of the message body may be requested by the user by clicking on message expansion indicator during such time as it contains the arrow icon. When a user clicks within pod display message display manager receives the coordinates of the click using a coordinate system such as one starting at 0 0 in the upper left hand corner of the pod viewer and identifies the message expansion indicator on which the user clicked and then identifies its state. If it is in the state corresponding to the display of the body of its message message display manager changes the icon back to the number in the message expansion indicator ceases the display of the message body and moves up in the display and adjusts their area coordinates accordingly message headline to maintain a uniform distance between message headlines and the associated other displayed components described herein being displayed below that message.

In one embodiment each message contains its own remover . Remover allows the user to request that a message be removed from the message display area . When the user clicks remover for a message message display manager which maintains the area in which the remover for each message is displayed identifies the message corresponding to the remover clicked and complies with the request either by removing the notice containing that message from notice storage or by marking it as suppressed so that message display manager will not display it when it displays messages as described herein. Message display manager then redisplays the messages in message storage that are not marked as suppressed as described herein.

Clear all button which clicked causes message display manager to remove from the message display area all messages corresponding to notices in notice storage either by deleting the corresponding notices in notice storage or marking them all as suppressed and message display manager redisplays the messages which because there will be none or all will be suppressed will cause message display manager to display no messages.

Notification indicator is displayed by message display manager when notifications are enabled and hidden or otherwise indicated when notifications are disabled as described above. Message display manager retrieves any or all of the indicators in notice storage and displays indicator in accordance with any such indicator being enabled. In one embodiment the lines to the side of the bell that indicate that it is ringing are displayed by message display manager when notifications are enabled and omitted when notifications are disabled. In other embodiments there may be more than one notification indicator for example one for each type of notification displayed by message display manager in accordance with its indicator in notice storage .

If the user presses minimizer button message display manager is notified using conventional techniques. Minimizer button allows the user to collapse the pod display area by omitting the display of message display area and control bar . When message display manager receives the notification that minimizer button has been pressed message display manager causes the display of a different arrowhead icon that forms the button with one that points to the right side. Message display manager then collapses the display of pod display to show only the status bar and collapses the pod viewer around the status bar . A pod manager not shown described in the related applications that manages the display of console then moves any other pod viewers such as pod viewer in the console up to maintain a constant separation between pod viewers . If the user presses the minimizer button again message display manager is again notified and message display manager returns the pod display to the general appearance and function described herein before the user pressed the minimizer button the first time except that message display manager retrieves from notice storage and redisplays the messages as described above to allow the display of any messages received since the pod display was collapsed as described above.

Control bar contains mute button which when selected by the user causes message display manager to receive an indication that the mute button has been pressed. When pressed message display manager indicates to user command manager that the user wishes to disable notifications of new messages and user command manager disables all notifications by changing the indicators in notice storage to a disabled state as described above. Although one mute button is shown there may be different buttons to disable different types of notifications as described above such as one button to disable audible notification and another button to disable visual notification and message display manager may indicate to command manager which button was pressed so that command manager can disable notifications of that type by changing the state of the corresponding indicator in notice storage .

In one embodiment when the user presses the mute button message display manager changes the text of the button to indicate that pressing the button again will enable all types of notifications or in the case in which separate buttons are used for each type of notification the button indicates that pressing it will enable that type of notification and message display manager internally maintains the status of the button. If the user presses the button message display manager toggles the status it maintains and indicates to command manager the new status. If the status is such that notifications have been muted message display manager so indicates to command manager and command manager performs the functions described above. If the status is such that notifications have been re enabled message display manager so indicates to command manager which re enables all types of notifications or places the status of notifications back to the point it was before they were muted using which command manager saves before disabling them and restores to enable them.

In one embodiment PTitle and control are not displayed in the pod viewer in which the messages are displayed. Message display manager or another component of the system and method that controls the display of the pod viewers described in the related applications handles this suppression of PTitle and control when so commanded by message display manager . Controls and operate as described in the related applications.

In one embodiment a command may be received by program command receiver in the manner described above regarding receipt of notices from the program element that provided the notice or any other element of the same program to delete the notice suppress the message from being displayed in message display area but preserve it in notice storage or to change the text of a message corresponding to a notice stored in notice storage . In one embodiment the command contains an identifier of the notice or an identifier of the notice and the program or program element from which it was received.

Program command receiver receives the command and using the identifier or identifier received and those stored with the notices locates in notice storage the notice referenced in the command. If the command is a command to delete the notice program command receiver deletes the notice and if the command is to suppress display of the message it marks the corresponding notice in notice storage as suppressed. Program command receiver then signals message display manager which displays the messages corresponding to notices or corresponding to notices not marked as suppressed such display being performed in the manner described above.

If the command is a command to change the message in the notice program command receiver changes the message in the notice in notice storage in accordance with the command and signals message display manager which updates the display with the new message as described above.

In one embodiment commands received by elements may include a command to renotify the user and if such command is received by program command receiver it signals alert manager which notifies the user as described above.

In one embodiment each notice includes an expiration date and time or an expiration period after which the notice is to be discarded. Periodically user command manager retrieves the current date and time from the operating system not shown scans the notices stored in notice storage and identifies notices for which the expiration date and time or the date and time of receipt plus the expiration period is prior to the current date and time. If it locates any such notice in one embodiment user command manager deletes the notice.

In one embodiment when a notice is received it can contain a data structure to be distributed to other elements of the program from which the notice was received. In such embodiment the data structure included with the notice is distributed to the program elements of the same program from which the notice was received or distributed to all such program elements other than the one from which the notice was received. The notice may have a field indicating that the data structure should be sent to such other elements or the data structure may be sent to such other elements automatically if the data structure is received with the notice.

When program command receiver receives a notice and identifier of the program element from which it was received as described above if so indicated for redistribution as described above it provides some or all of the notice or its unique identifier and the identifier of the program element that sent the notice to notice data distributor . Notice data distributor receives the notice and identifier determines the program with which the program element is associated in the registration area of notice storage and looks up the identifiers of the program elements that are associated in notice storage as being an element of the same program as the element corresponding to the identifier notice data distributor receives from program command receiver .

Notice data distributor then extracts the data structure and optionally other portions of the notice from the notice reformats it into a redistributed notice message and provides the message to program communication manager with the identifiers it looked up as described above. In one embodiment notice data distributor only performs the functions described above if the notice contains an indication that the notice is to be redistributed or contains the data structure which may be an optional component of the notice. In one embodiment notice data distributor adds to the redistributed notice message the identifier of the program element that sent the notice from the identifiers it looked up and in one embodiment notice data distributor adds such identifier only if a field in the original notice indicates that such identifier should be sent.

Program communication manager receives the redistributed notice message and identifiers and sends the redistributed notice message containing the data structure to the program elements corresponding to the identifiers it receives optionally using the information stored for each such program element in the registration area of notice storage when the program elements were registered as described above. The redistributed notice message allows the other elements of the same program as the element that sent the notice to be informed of the notice and the data structure and optional identifier of the program element from which the notice was received contained in such message may indicate to such other elements how they may respond to or otherwise process the notice.

As noted above program elements from the same internet domain may register with program registration manager and supply a program identifier and program registration manager associates in a registration area of message storage an identifier of the program element with the program identifier but restricting registering program elements using the same program identifier to those downloaded from the same internet domain as described in the related applications. To identify the other program elements of the same program notice data distributor looks up in the registration area of notice storage the identifier of the program element from which the notice was received identifies the program identifier and then looks up other program elements that registered that same program identifier.

In one embodiment notices are deleted as described herein by providing to notice data distributor a data structure that include the identifier of the notice and a reason code that the notice is being deleted e.g. enumerated values indicating that the notice expired an element of a program requested deletion the user deleted the message etc . In such embodiment it is notice data distributor that physically deletes the notice from notice storage . However before it deletes the message notice data distributor identifies the element that sent the notice from the notice itself and also identifies the other elements of the same program as described above. Notice data distributor then provides the identifier of the message and the reason code identifying the reason for the deletion to all of the elements of the program corresponding to the element that sent the notice to indicate that the notice is being deleted and the reason therefor.

In one embodiment an element of a program may request that a notice be automatically generated upon the occurrence of an event such as the end of a period of time beginning at the time which the request was provided or received. In such embodiment the notice it sends to application manager receiver contains a field that describes the criteria under which the notice should be generated in addition to the other notice information as described above. If the field contains a criteria application command receiver optionally assigns the identifier or identifiers and stores in the manner described above the notice in a separate area of notice storage that is not retrieved by message display manger . Application command receiver does not signal or otherwise notify message display manager or alert manager but may add other information such as the date and time of receipt program element identifier etc. to the notice as described above. It provides the identifier of notice and the identifier of the program element from which the notice was received to automatic notice generator .

Automatic notice generator retrieves from the separate area of notice storage the notice using the identifier parses the criteria field and interprets the criteria. Automatic notice generator identifies whether the criteria has been met and if so it removes it from any special area of notice storage and removes the criteria from the notice or otherwise indicates that the criteria has been met and stores the notice or its identifier and the identifier of the element that originally sent the notice the date and time of receipt or the current date and time and any other information with the notices in notice storage that are read by message display manager . Automatic notice generator signals message display manager and provides the notice in whole or in part to alert manager both of which operate as described above.

If the criteria in the notice has not been met automatic notice generator either monitors periodically or continuously conditions described in the criteria or causes another component of the computer system in which automatic notice generator is running or a different computer system to determine when the criteria has been met. For example if the criteria specifies a period of time from receipt of the notice automatic notice generator may set an operating system timer to signal automatic notice generator when the period of time has elapsed. When the criteria specified in the notice has been met automatic notice generator then removes the criteria and stores the notice with the other notices read by message display manager as described above in notice storage signals message display manager and provides some or all of the notice to alert manager which each operate as described above.

Referring now to consisting of a flowchart illustrating a method of providing messages and notifications of certain new messages is shown according to one embodiment of the present invention. A command is received from a user that either enables or disables all notifications of messages or one or more types e.g. audible or visual of notifications of messages.

Information corresponding to the command such as whether notifications are enabled or disabled or whether certain types of notifications are enabled or disabled are stored for use as described below. If the command is a command that takes the notifications from an entirely disabled state e.g. both audible notifications and visual notifications are disabled to one in which at least some form is enabled and a message has been received during the time that notifications were completely disabled the user may be notified that a message is available and the method continues at step and otherwise the method continues at step . At any time the user may send an additional command starting the process at step as indicated by the dashed line in the figure.

As part of a separately running process an element of a program may register itself or be registered along with an identifier of the element and the identifier is associated with other identifiers of other elements of the same program for example by allowing the element or the program to specify the program or elements but verifying that all elements identified as being part of the same program had been downloaded from the same Internet domain and the method continues at step and .

At step a notice or command is received from a program element along with the identifier of the element which may be inferred instead of being explicitly received. Step may include providing an identifier of the notice to the program that supplied it or the notice may contain an identifier of the message.

If what is received is a new notice if the notice contains a criteria for when the message corresponding to the notice should be provided the method continues at step described below and also at step and otherwise a message in the notice is displayed in a common area in which messages from notices received by other programs are also displayed . The other programs may be supplied by different vendors. If the notice contains or indicates that it contains a data structure that should be redistributed the data structure is distributed to all of the elements of the program or the elements of the program other than the element from which the notice was received the program being indicated by the identifier of the element that is received with the notice in step or being part of the notice and the method continues at step and otherwise the method continues at step .

At step if the notice contains an indication that the user should be notified that a new message has been received the method continues at step and otherwise the method continues at step . At step if notifications are enabled at least in part by the user the user is notified using methods corresponding to all enabled types of notifications and the method continues at step and otherwise an indication is stored that a message has been received during the period in which notifications have been completely disabled for use in step and the method continues at step .

At step if the criteria in the notice are met the method continues at step using that notice and otherwise the criteria may be stored or used to direct one or more other processes for purposes of notification as described above or both and the method continues at step . Steps and may operate as a separately running process as indicated by the dashed line in the Figure and so step may also follow step . At step an optional wait period may be allowed to elapse and one or more characteristics such as whether a period of time has elapsed may be checked to determine whether the criteria have been met or an indication that the criteria have been met may be received from the one or more other processes. If the criteria has been met the method continues at step using the notice corresponding to the criteria that has been met and otherwise the method continues at step .

If at step a command is received indicating that a specified message should be suppressed the display of the specified message is suppressed and the method continues at step . If a command is received in step indicating a notice should be deleted the notice is deleted and the method continues at step . Step may include the distribution to program elements corresponding to the program that sent the notice of the identifier of the message being deleted and the reason for the deletion in this case via program element request. In one embodiment an identifier of the element that requested the deletion is also provided with such a distribution.

If a command is received in step indicating a message should be changed the message is changed and the changed message or all messages is redisplayed and the method continues at step .

