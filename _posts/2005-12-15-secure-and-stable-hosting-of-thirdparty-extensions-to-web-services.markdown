---

title: Secure and stable hosting of third-party extensions to web services
abstract: Described herein are one or more computer operating environments that include a standard set of web services via a communications network (e.g., the Internet) and a mechanism for extending the standard set of web services to execute one or more extended web services. Since these extended web services may be produced by an unconfirmed or untrusted source (e.g., a third-party software developer), the described computer operating environments isolate the extended web services from the standard set of web services and from the communication network. Furthermore, each extended web service is an isolated process (isoproc) with a limited ability to communicate with other services. In particular, each isoproc's ability to communicate is limited to only associated defined communication channels over which it has express permission to communicate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08849968&OS=08849968&RS=08849968
owner: Microsoft Corporation
number: 08849968
owner_city: Redmond
owner_country: US
publication_date: 20051215
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 60 692 190 filed Jun. 20 2005 the disclosure of which is incorporated by reference herein.

Some major commercial Web services e.g. e retailers search engines etc. have a platform consisting of a multitude of services e.g. over 200 that are combined to build their web applications. They produce a software developer s kit SDK to allow third parties to create new applications using those services through web protocols . Commercial Web services want third parties to do so because it drives traffic advertising and or sales into the commercial Web services. The third parties want to build these applications because they receive money from the commercial Web services for each sale they drive.

The problem is that the commercial Web services have no good way of hosting the third party s code within their platform. With existing technology the 3party hosts their own web site. This is bad for the third party because they must build a web site acquire servers and network connections and manage and operate their servers even if they pay someone to host their servers . Depending on the specific scenario this can be a very complex task requiring expertise in networking security distributed systems system scaling and so forth. This situation is bad for the commercial Web services because it creates a barrier that discourages new third parties from developing extensions to their platform.

The commercial Web services do not host the third party s code because there is no cheap and secure way to do so. The commercial Web services conventional choices to host the third parties code are basically put it on its own server very expensive put it in its own software based virtual machine using a virtual machine monitor VMM like VMWare or Virtual Server pretty expensive or trust it insecure .

Even with the first two options the third party s code has access to a full network stack so the commercial Web services must put firewalls potentially expensive stateful firewalls around it to keep it from communicating inappropriately with services servers or to keep it from performing inappropriate actions such as sending unsolicited spam to the outside world. Another impractical solution is for the commercial Web service to run the third party code a language based virtual machine such as Sun s Java Virtual Machine JVM or .NET AppDomains. While much cheaper than physical hardware or VMM solutions the language based VM solutions are inflexible severely limiting the structure of third party code that can be safely run. Also language based VM solutions sacrifice security by enlarging the vulnerability surface and because they cannot adequately constrain resource usage.

The commercial Web services have no conventional approach that allows them to cheaply and securely host third party code in their data centers using the services operations expertise. The independent software venders ISVs have no conventional approach that gives them the flexibility to write a new extension as dictated by their design needs and easily drop it into the commercial Web services servers securely and cheaply.

Using only the available conventional approaches a developer who creates or extends an existing web application with code must become well versed in the expertise of running a data center. The developer must endure the hassle of server procurement server management patching operations planning service deployment load balancing backup etc.

For example let s say a fictional company which we will call the Hope Software Corporation HSC wanted to extend a service called the World Mapping Web Service WMWS . HSC wants to extend the WMWS service by plotting houses from various web sites and the multiple listing services MLS real estate listings onto a satellite map from WMWS. Assuming that WMWS exposes the necessary application programming interfaces APIs to build this application HSC still has to handle the operations burden imposed by being a web application. Say HSC s application is really popular and gets featured in an extremely popular web site. Now HSC has to make sure their application is scalable to handle the extra load which can occur in a matter of hours. HSC has to make sure their application gracefully fails over in case one of their machines dies. HSC knows that if they cannot service their customers 24 7 someone else will.

For another example closer to home let s say Bob modifies a service called Sharing Documents Web Service SDWS . Bob modifies SDWS with a bit of workflow logic to route documents for approval in his workgroup. Bob s workgroup now has to worry about the hassle of obtaining a server deploying the operating system and SDWS patching backing it up etc. just because of a little extra customization. And the IT department is not completely off the hook anyway. There s now another one off deployment of SDWS floating in the enterprise and any lapse in management of that server poses extra security risks and support costs.

In still another example say HSC could modify herein mod a massively multiplayer online game MMOG like Everquest or World of Warcraft . In doing so HSC creates its own zones monsters and artificial intelligence Al . Despite the huge success of mods for client side games mods for MMOGs are nowhere to be seen because the MMOG operators do not have a secure and reliable mechanism to isolate mods on MMOG servers.

There are an endless number of scenarios where developers want to extend existing web services. Even when a network based interface to the web service is exposed extending a web service is expensive and difficult because the programmers developing the extension are forced to become service providers in addition to developing the code.

There are of course hosted data centers where a third party can rent managed servers and run their code. But in this case the third party essentially gets just a hardware box. The third party is not extending an existing web service such as one for online advertising collaboration business processing gaming etc. The third party still needs to worry about service deployment load balancing backup etc. And there is still the cost involved. If HSC just wants to try out an idea the cost just for hosting can be nearly a thousand dollars a year to use a service provider.

Thusfar we have only described Internet scenarios. It is worth explicitly pointing out that the techniques described here are applicable to wide range of computation scenarios. For example the web service that needs to be extended may actually be any arbitrary computation node such as a mobile phone device or personal computer. It could even be an arbitrary computation system such as a peer to peer or grid network. Consider a project like the SETI home distributed processing system for analyzing radio signals. In this setup each the owners of each PC participating need to trust the SETI home software to not be malicious. However this software is relatively fixed it is not possible for an arbitrary astronomer to for example quickly use the resources of those thousands of computers to evaluate a new radio signal analysis algorithm.

This scenario is exactly analogous to the web services scenarios described earlier only in this case the commercial web service is actually a distributed computation grid. Either way it can be modeled as a web service needing extensions.

Described herein are techniques to isolate a third party extension from other components of web services while expressly defining and limiting with who and how the third party extension has permission to interact or communicate. Described herein are one or more computer operating environments that include a standard set of web services via a communications network e.g. the Internet and a mechanism for extending the standard set of web services to execute one or more extended web services. Since these extended web services may be produced by an unconfirmed or untrusted source e.g. a third party software developer the described computer operating environments isolate the extended web services from the standard set of web services and from the communication network. Furthermore each extended web service is an isolated process isoproc with a limited ability to communicate with other services. In particular each isoproc s ability to communicate is limited to only associated defined communication channels over which it has express permission to communicate.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Described herein are techniques to isolate an extension written by a third party developer also know as Independent Software Vendor ISV from other components of web services while expressly defining with who and how the third party extension has permission to interact and communicate. The third party extension is isolated from other applications and services so that untrusted 3rd party code can be executed without concern with respect to security stability and reliability .

Described herein are one or more implementations of a computer operating environment e.g. an operating system of a web server which offers an easy to maintain and secure hosting environment for executing third party software. A typical computer operating environment include a standard set of web services via a communications network e.g. the Internet and a mechanism for otherwise unconfirmed or untrusted sources e.g. a third party software developers to add extensions to that standard set of web services.

To ensure security the described computer operating environments isolate the extended web services from the standard set of web services and from the communication network. Furthermore each extended web service is an isolated process isoproc with a limited ability to communicate with other services. In particular each isolated processability to communicate is limited to only defined communication channels over which it has express permission to communicate.

The exemplary embodiments described herein are complementary to existing web services provided by many software companies and those provided by outside parties. The exemplary embodiments are targeted at developers like Bob and the Hope Software Company HSC who were introduced in the Background section. These developers want to extend existing services or create new services without worrying about service operations.

For example suppose that HSC is looking for house to buy in the few neighborhoods he cares about in Seattle Queen Anne and Leschi. HSC spends nearly 45 minutes a day combing through the homes for sale listings on various web based real estate listings services. HSC sees World Mapping Web Service WMWS and wonders how great it would be to see the houses for sale plotted on a map in WMWS. This is just a side project for HSC to do in his spare time.

HSC writes his code to display data from various web based real estate listings services onto WMWS. It is then trivial for HSC to publish this solution so that his friends can use it also since HSC never has to think about where to host it how much it costs buying a server etc. As HSC s solution grows in popularity HSC starts adding more features like crime statistics items for sale more cities mobile device access and alerts. HSC purchases a domain name as well as various search engine keywords to drive traffic to his application. The web service which employs at least one of the exemplary embodiments described herein continues to run his solution for his user base which now numbers in the millions.

For this scenario Web Service hosts a cluster of machines running at least one of the exemplary embodiments on which ISVs build their applications to the side of existing infrastructure. One idea is to take an existing web service and augment it with servers in its data center that employ the at least one of the exemplary embodiments. Any third party extensibility code runs in the isolation boundary provided by at least one of the exemplary embodiments described herein. To get data the code just uses the standard web service APIs to access the existing service infrastructure.

The exemplary embodiments may be a platform for a massively multiplayer online game MMOG . Allowing end users to modify mod their MMOG experience will improve their experience and is likely to decrease subscriber churn. A MMOG is an example of a large scale multi user distributed game or simulator.

Hard core gamers who sometimes spend upwards of forty hours a week playing typically play MMOGs. One significant source of churn in the MMOG industry results from boredom when users feel they have mastered all challenges a game has to offer and move on after investing one year or more in a game world. The typical user spends about two years playing a game. A decrease in the subscriber base can obviously make a significant dent in revenue.

One of the ways to minimize subscriber churn is to continually enhance the game with new levels art characters etc. First person shooter games have been enormously successful in harnessing a community of users to create mods. These mods include sophisticated new art revised game engines new levels new themes new characters etc. MMOGs on the other hand have not been able to reap the rewards of user contributions.

An exemplary embodiment described herein may offer a mod toolkit with game studios. This way the users will have the ability to create mods and the MMOG can feel confident that these mods will run safely and securely.

Four key desirable features that an approach using the exemplary embodiment described herein exhibits Security Scalability Reliability and Low Cost.

The security tenet is a primary driving feature. Security means that the system can take arbitrary unknown code and run it safely without fear of corrupting the operating system itself the data center or other programs. There at least two interesting cases here the malicious code writer and the buggy code writer. From the point of view of the security model both need to be handled well. More specifically the Web Services should not be adversely affected because an extension based add in had a bug or a malicious code. Adversely affect could mean for example having to shut down services data corruption impersonation of services etc.

In terms of reliability there are really two perspectives reliability of the solution itself and reliability of the data center. The data center should not encounter outages or other reliability problems due to buggy third party code. Similarly the author of correct code would not want failures in the data center e.g. a hard drive failure to affect his or her code.

In addition the exemplary embodiment may employ a cloaking mechanism which is intended to hide data from the extension. For example the exemplary embodiment may process a purchase order for a customer of the web service but the web service may not want to provide some of the sensitive info to the extension. Instead the web service replaces the sensitive info with dummy or replacement info when providing this info to the extension. Therefore the extension never discovers this sensitive info.

As shown in the host computing system has two different memory subsystems Memory and hardware firmware . Memory is an example of typical memory subsystems in which software may be stored. The memory may be any available processor readable media that is accessible by host computing system . The memory may be either volatile or nonvolatile media. In addition it may be either removable or non removable media. Hardware firmware is an example of a typical hardware e.g. ROM or firmware in which computer executable instructions may be stored.

In the memory and the hardware firmware are depicted as two separate areas to emphasize their different nature but in practical terms a high level operating system may not distinguish greatly between them. Indeed the executable instructions stored in the hardware firmware may be part of the addressable memory range of the memory .

The host computing system has an operating system represented by OS kernel in the memory which provides the architecture for the use of software isolated processes SIP such as SIP and SIP . In the host computing system non kernel code in this OS runs in a SIP. SIPs communicate with each other with the OS and with a communications network via strongly typed communication channels. More particularly a SIP can only communicate with other processes and the kernel via communication channels that it has express permission from the OS to use. This permission defines and who and how an SIP communicates with other processes with the OS and with a communications network .

As depicted in hardware firmware shows examples of a hardware isolated processes HIP and a firmware isolated process FIP . These are effectively identical to an SIP except that their code is not stored in a working primary memory like memory .

To be inclusive in terminology the term isolated process and its shorted representation isoproc is used herein. It is defined to be an isolated process and examples of which expressly include SIPs HIPs and FIPs. So unless the context clearly indicates otherwise references herein to isoproc include the concepts of SIPs HIPs and or FIPs.

An isoproc is a little different from a traditional OS process. An isoproc has a strong isolation boundary much like a VM in terms of isolation . One isoproc cannot communicate or otherwise change the state of another isoproc outside of communication through typed channels there is no shared memory concepts or the like. This isolation boundary alone is a strong and important layer in the security model. Indeed an isoproc can only communicate via the communication channels for which it has express permission to use for such communication.

The express permission granted by the OS defines communications properties of an associated defined communication channel of a subject isoproc wherein such properties include one or more of the following 

The security model is further strengthened because the OS knows exactly what code is running in each isoproc. The code in an isoproc runs in a distinct isolation region with well known and describable communication characteristics. Furthermore the code running in each software based isoproc is verified to guarantee memory safety and to not contain any hardware privileged instructions. Multiple isoprocs can be run in the same hardware protection domain even the hardware protection domain of the OS kernel . By running in the same hardware protection domain the OS kernel the cost of invoking code in separate isoprocs is extremely low.

The embodiments described herein employ the techniques described in these incorporated herein references. In particular techniques for Inter Process Interference Elimination and Inter Process Communication are employed for isoprocs. In other words these techniques are employed to isolate a third party extension from other components of the web services while expressly defining who it has permission to communication with.

The OS includes a communication channel regulator which is the component of the OS that expressly grants permission for isoprocs to use communication channels. That permission defines communications properties of the defined communication channel. Without express permission from the communication channel regulator the extension isoproc literally cannot communicate with any other code anywhere in the universe not even the OS network stack or the OS file system .

For this exemplary embodiment the extension isoproc receives incoming requests from a network service isoproc over a communication channel . The network service isoproc acts as an intermediary between the extension isoproc and an external communications network such as the Internet. The network service isoproc is responsible handling communication between the extension isoproc and the outside world e.g. the Internet . In an alternative embodiment the network service isoproc can be replaced with a direct connection to the external communications network when the extension isoproc has statically checked and verified to not execute any forbidden operation against the external communications network.

The extension isoproc communicates to a web service proxy isoproc on the host computing system using an OS provided cross process communication channel . The web service proxy isoproc acts as an intermediary between the extension isoproc and other internal web services such as the database system containing the maps for World Mapping Web Services. The web service proxy isoproc is responsible handling requests from the extension isoproc and communicating with web service servers . To do this any effective and available protocol such as SOAP may be employed. In an alternative embodiment the web service proxy isoproc can be replaced when the filtering features of code for the web service proxy isoproc are verifiably inserted into the extension isoproc code.

As depicted channels and are the only two OS provided cross process communication channels the extension isoproc has express permission to use.

The network service isoproc and the web service proxy isoproc may be generically called mediators. That is because they act as intermediaries or mediators between the extension isoproc and other data sources such as web service servers and the Internet .

Each isoproc has a separate and distinct interface to the OS kernel commonly called an Application Programming Interface API or an Application Binary Interface ABI through which each isoproc can request computation resources from the OS such as create a new thread of execution but cannot directly affect the state of any other isoproc. This interface allows the extension isoproc to control its own execution but it cannot affect the execution of other isoprocs. By design this interface cannot be subverted as a mechanism for cross process communication. An isoproc s interface to the kernel cannot be intercepted modified or its contents snooped without explicit permission of the isoproc s developer.

While much of the focus of the discussion herein has been on Internet scenarios the techniques described herein are applicable to wide range of computation scenarios. For example the web service that is being extended may actually be any arbitrary computation node such as a mobile phone device or personal computer. It could even be an arbitrary computation system such as a peer to peer or grid network.

Consider a project like the SETI home distributed processing system for analyzing radio signals. In this setup each of the owners of each personal computer participating need to trust the SETI home software to not be malicious. However to ensure that level of trust this SETI home software is relatively fixed and unchangeable. Consequently it is not possible for an arbitrary astronomer to for example quickly use the resources of those thousands of computers to evaluate a new radio signal analysis algorithm. Using the techniques described herein the software could be modifiable and still be trusted.

This scenario is analogous to the web services scenarios described earlier only in this case the commercial web service is actually a distributed computation grid. Either way it can be modeled as a web service needing extensions.

For ease of understanding this method is delineated as separate steps represented as independent blocks in however these separately delineated steps should not be construed as necessarily order dependent in their performance. Additionally for discussion purposes the method is described with reference to and or . Also for discussion purposes particular components are indicated as performing particular functions however other components or combinations of components may perform the particular functions.

At of a computer operating environment such as web services host computing environment provides a standard set of web services via a communications network such as the Internet .

At the computer operating environment provides a mechanism for extending the standard set of web services to execute one or more extended processes.

At of the computer operating environment isolates the extended processes extension isoproc from the standard set of web services and from the communication network. The web services are other isoprocs. Each isoproc s ability to communicate is limited to only defined communication channels over which it has express permission to communicate.

The techniques described herein may be implemented in many ways including but not limited to program modules general and special purpose computing systems network severs and equipment dedicated electronics and hardware and as part of one or more computer networks. The techniques described herein may be implemented.

Although the one or more above described implementations have been described in language specific to structural feature and or methodological step it is to be understood that other implementations may be practiced without the specific feature or steps described. Rather the specific feature and step are disclosed as preferred forms of one or more implementations.

