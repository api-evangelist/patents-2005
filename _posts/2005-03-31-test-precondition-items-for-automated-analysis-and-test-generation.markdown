---

title: Test precondition items for automated analysis and test generation
abstract: The present invention provides methods and systems for using a design element in a graphical model to represent and identify a precondition for use by a verification tool in verifying an executable form of the design represented by the graphical model. The precondition design element provides a specification of a verification constraint without affecting the behavior of the design. The constraint is to be applied by the verification tool in verifying the design. As such, the precondition design element of the present invention provides a mechanism and formalism in a model-based design approach that is used to constrain automatically generated tests or verification of the design represented by the graphical model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680632&OS=07680632&RS=07680632
owner: The MathWorks, Inc.
number: 07680632
owner_city: Natick
owner_country: US
publication_date: 20050331
---
The present invention generally relates to associating a precondition design element with a model based design represented by a graphical model for use by a verification tool in verifying the model based design.

Graphical modeling environments such as the technical computing and block diagram modeling environment of MATLAB and Simulink from the MathWorks Inc. of Natick Mass. can provide a model based design approach to designing an implementation such as for embedded computational hardware. The term model based design is used to refer to a graphical model acting as a design or a specification for implementation. A model based design may be used as a design specification for an implementation such as an implementation of an algorithm in hardware circuitry the implementation of code to run on a microprocessor or software to run in a network environment.

A graphical modeling environment can produce model based designs in graphical form such as a block diagram model to specify computations operations or functionality that can be performed on computational hardware such as a general purpose processor microcontroller DSP FPGA PLD or an ASIC. As a design specification a model based design can drive the building process of an implementation of the design. For instance the model based design can act as a specification from which to automatically generate code from a block diagram model to provide an executable for testing and verification on a target system.

Model based designs represented by graphical models can be tested using simulation. The simulation may be provided by the modeling environment. For example Simulink from The MathWorks Inc. of Natick Mass. provides an environment for simulating graphical models to test the model based design. Simulation may be used by a model designer to identify design issues during the design stage at the system level. Although simulation may be used to functionally verify some behavior of the design simulation may not be exhaustive or deterministic such that it covers all desired or unwanted circumstances and occurrences of design behavior.

Verification tools can be used to provide a more formal and comprehensive approach to testing and verifying a model based design. Verification tools are available that apply various formal methods and techniques for providing comprehensive coverage and verifying the behavior of a model based design under test. The verification tool may run a multitude of combinations of scenarios with a significant portion or all of the possible input values. Running comprehensive or multiple verification scenarios in a verification tool may be time consuming and resource intensive. The techniques and methods used by the verification tool may exercise behavior or functionality that is not of concern to the model based designer or that is not practical or realistic in the intended application of the implementation of the model based design. Therefore it may be time consuming resource intensive or inconvenient to obtain or review the results of the portion of the verification that is of interest to the designer or realistic for the design.

Typically the configuration of the verification may be performed in the verification tool to run certain tests or verification scenarios desired for the design. The verification tool may be configured to limit the verification scenarios or to cover only a certain combination of occurrences. Setting up and generating verification scenarios in a verification tool may consume significant time and resources. The verification tool may have its own configuration environment and language different than the graphical modeling environment. As such any verification scenario configuration and verification results may be described in terms of the form language and context of the verification tool. Thus it may be challenging to relate the verification scenario configuration and verification results to the model based design represented by the graphical model.

The present invention provides methods and systems for using a design element in a graphical model to represent and identify a precondition for use by a verification tool in verifying an executable form of the design represented by the graphical model. The precondition design element provides a specification of a constraint of the precondition without affecting the behavior of or altering the design. The constraint may be applied by the verification tool in testing or verifying the design. That is the precondition design element provides a mechanism and formalism in a model based design approach that is used to constrain automatically generated tests or verification of the design represented by the graphical model.

The precondition design element may be used to limit verification to the more meaningful or practical scenarios of the behavior of the system under design. Furthermore the precondition design element may improve the performance of verification by reducing the combinations or occurrences of executions to provide the desired verification coverage. Additionally the precondition design element may assist a designer in performing guided design exploration of areas of interest via formal analysis. In summary the precondition design element of the present invention provides a mechanism for the designer in the modeling environment to provide instructions or directives to a verification or testing tool to verify or test the design in a certain way.

In one aspect the present invention is related to a method for providing an element associated with a model based design represented by a graphical model to identify a precondition for verification of the model based design. The method includes the step of providing a graphical model in a modeling environment. The graphical model may represent a model based design. The method also includes identifying a portion of the graphical model to associate a precondition for verification of the model based design. The precondition includes a constraint to apply in verification of the model based design. The method also associates a design element representing the precondition with the identified portion of the graphical model. The design element includes information indicating or specifying the constraint to apply in a verification of the model based design.

In another aspect the design element of the present invention does not alter the representation of the model based design. The design element is ignored during execution of the model based design of the graphical model for example when simulating the model based design or when generating code for targeted execution. The design element may comprise a textual and or graphical representation of the precondition. Also the design element may be configurable to specify the constraint. For the example the design element may be configured to have the precondition either be active or inactive for verification.

In an additional aspect the constraint of the design element of the present invention may be specified as a value or a range of values for any element of the model based design or graphical model. For example the constraint may specify a value or range of values for any of the following elements 1 an input 2 a signal 3 an attribute of a signal 4 a state 5 a data element 6 a parameter and or 7 a property of an object. Furthermore the design element may be associated with any portion of the graphical model such as any of the following model elements 1 a signal 2 a state 3 a data element 4 a block and or 5 an object.

In yet a further aspect of the present invention the graphical model may be processed into a form readable by a verification tool. The processed form may include a specification of the constraint of the precondition represented by the design element. For example an executable form of the design represented by the graphical model may be generated along with a precondition specification to be used by a verification tool. Additionally the method of the present invention may also include associating elements representing different preconditions with one or more portions of the graphical model at one or more hierarchical levels of the graphical model.

In one aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to providing an element associated with a model based design represented by a graphical model to identify a precondition for verification of the model based design.

In an additional aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to providing an element associated with a model based design represented by a graphical model to identify a precondition for verification of the model based design.

In another aspect the present invention relates to a method for verifying a model based design represented by a graphical model and associated with a precondition for executing the verification. The method includes the step of providing a graphical model representing a model based design. The graphical model may include a design element identifying a precondition associated with a portion of the model based design. The precondition indicates or specifies a constraint to be applied by a verification tool in verifying the model based design. The method further includes processing the graphical model into an executable form of the model based design for verification by the verification tool and providing the design element in a form of a constraint applicable by the verification tool in execution of the executable form to verify the model based design.

In another aspect the method of the present invention also includes applying the constraint of the precondition represented by the design element during the execution of the executable form of the model based design. In some aspects the design element does not alter the executable form of the model based design or change the execution behavior of the model based design.

In another aspect the constraint of the design element of the present invention may be specified as a value or a range of values to apply during an execution of the executable form to one or more of the following 1 a variable 2 a parameter 3 an argument 4 a property and or 5 a unit of data of the executable form.

In one aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to verifying a model based design represented by a graphical model and associated with a precondition for executing the verification.

In an additional aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to verifying a model based design represented by a graphical model and associated with a precondition for executing the verification.

In another aspect the present invention relates to a system for providing a design element associated with a graphical model representing a model based design to identify a precondition for verification of the model based design. The model based design may be verified by a verification or testing tool. The system includes a modeling environment a configuration mechanism and a verification tool. The modeling environment provides a graphical model representing a model based design. The configuration mechanism may be used to associate a design element representing a precondition with a portion of the graphical model. The design element may include or provide information specifying or otherwise indicating a constraint of the precondition to apply in a verification of the model based design.

Additionally the verification tool in the system of the present invention obtains or uses an executable form of the model based design of the graphical model for verification and also obtains a form of the constraint of the precondition represented by the design element. The form of the constraint may be applied by the verification tool to execution of the model based design in executable form.

In another aspect the design element of the present invention does not alter either the graphical model s representation of the model based design or the executable form of the model based design. The design element of the graphical model may include a textual and or graphical representation of the precondition and may be configurable to specify the constraint of the precondition. The constraint may be configured to apply a value or a range of values for one or more of the following items related to the model based design and or executable form 1 an input 2 a signal 3 an attribute of a signal 3 a state 4 a data element 5 a parameter and or 6 a property of an object. Additionally the portion of the graphical model associated with the design element may include one or more of the following 1 a signal 2 a state 3 a data element 4 a block and 5 an object.

The system of the present invention may also apply the constraint of the precondition during the execution of the executable form of the model based design as a value or a range of values for one or more of the following items of the executable form 1 a variable 2 a parameter 3 an argument 4 a property and 5 a unit of data. Additionally the system of the present invention may execute in a distributed manner where at least a portion of the modeling environment and or the verification tool executes on a first computing device and or a second computing device.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not expressly made herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides systems and methods for using a design element in a graphical model to represent and identify a precondition for use by a verification tool in verifying an executable form of the design represented by the graphical model. A precondition design element provides a specification of a constraint to be applied by the verification tool to the verification of the design without affecting the behavior of the design. The precondition design element may not be directly incorporated into the model based design represented by the graphical model but may be associated with graphical model elements as a design specification for verification. Additionally the precondition element may be configurable to provide different logics for the constraints and can be set to be active or inactive. As the graphical model may reference or otherwise have a hierarchy of graphical models there may be multiple precondition elements at one level of the hierarchy of at any of the levels of the hierarchy of the graphical model.

Furthermore the illustrative embodiment of the present invention may automatically process the model based design represented by the graphical model into an executable form and provide a specification of the constraint of the precondition for use by a verification tool. The generated code may be compiled and built into a form executable by a target operating and processor environment or by a target verification tool. The constraint of the precondition may be specified in a language or in a format readable and applicable by the verification tool. In verification the verification tool may execute the executable form of the model based design and apply the constraints specified via the precondition design element.

In the illustrative embodiment of the present invention the precondition design element provides a mechanism and formalism that may be used to constrain automatically generated tests or verification of the design represented by the graphical model. The precondition design element may be used to limit verification to the more meaningful or practical scenarios of the behavior of the system under design. Also the precondition design element may be used to provide test or verification execution patterns to be more realistic in the context of the system and the system s environment. Furthermore the precondition design element may improve the performance of verification by reducing the combinations or occurrences of executions to provide the desired verification coverage. Additionally the precondition design element may help a designer perform guided design exploration of areas of interest via formal analysis. In general the precondition design element provides a mechanism for the designer in the modeling environment to provide instructions or directives to a verification or testing tool to verify or test the design in a certain way.

The illustrative embodiment will be described solely for illustrative purposes relative to a graphical modeling and verification environment provided by the software products from The MathWorks Inc. of Natick Mass. Although the illustrative embodiment will be described relative to a MATLAB and or Simulink based application including the use of Stateflow one of ordinary skill in the art will appreciate that the present invention may be applied to other graphical modeling and or verification environments such as any environments using software products of SimMechanics SimPowerSystems or SimDriveLine from The MathWorks Inc. of Natick Mass. LabVIEW or MATRIXx from National Instruments Inc. MSC.Adams from MSC.Software Corporation of Santa Ana Calif. Virtuoso from Cadence of San Jose Calif. Dymola from Dynasim AB of Lund Sweden or Rational Rose from IBM of White Plains N.Y.

The computing device may include other I O devices such a keyboard and a pointing device for example a mouse for receiving input from a user. Optionally the keyboard and the pointing device may be connected to the visual display device . Additionally the computing device may include any type of input device for receiving user input such as a joystick. In other embodiments the computing device may include any type of haptic or tactile feedback device such as a vibration generating mouse or a force feedback device such as a force feedback joystick. Also the computing device may include any type of sound producing I O device such as any suitable sound card. The computing device may include other suitable conventional I O peripherals.

For installing software programs the computing device may support any suitable device readable medium such as a CD ROM DVD ROM floppy disks tape device USB device hard drive or any other suitable device. The computing device may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software. The present invention of a graphical modeling and verification environment may comprise software that is installed via a device readable medium and stored in the storage device . Additionally the operating system and graphical modeling and verification environment may be run from a bootable CD such as for example KNOPPIX a bootable CD for GNU Linux.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM cluster interconnection Myrinet peripheral component interconnections PCI PCI X wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one aspect the present invention is related to a graphical modeling and verification environment as illustrated in . In brief overview the illustrative graphical modeling and verification environment includes a graphical modeling tool and a verification tool . The graphical modeling tool provides an environment for the design and development of a model based design represented by a graphical model . The verification tool provides an environment for the test analysis and verification of an executable form of the model based design represented by the graphical model . The verification tool may be in communication with or have any suitable type and or form of interface to the graphical modeling tool .

The graphical modeling tool of the present invention comprises an environment for creating editing designing simulating testing or otherwise providing any type and or form of graphical model such as block diagram model. In an exemplary embodiment and by way of example the graphical modeling tool may comprise Simulink Stateflow and or SimMechanics manufactured by The MathWorks Inc. of Natick Mass. In the graphical modeling tool configurable and customizable functional blocks are used to create block diagram models that may represent a design or algorithm for a control system a signal processing system a communication system any other time varying or dynamic system any computational hardware device or any software implementation. The graphical modeling tool can be used to provide a model based design approach to implementation of an item or system under design. A model based design may be used as a design specification for an implementation such as an implementation of an algorithm in hardware circuitry or the implementation of code or software to run on a processor.

Additionally the graphical modeling tool may comprise an automatic code generation application such as the automatic code generator of Real Time Workshop from The MathWorks Inc. of Natick Mass. to generate source code from a graphical model to translate the functionality of the graphical model into an executable form such as a program that may be designed to run on any microprocessor real time operating system or otherwise customized to run on a specific target hardware platform or for use by a verification tool .

The graphical model of the present invention can comprise any type and or form of graphical model . The graphical modeling tool may provide any type of tools libraries and or configuration mechanisms to graphically create and or edit a graphical model . In an exemplary embodiment the graphical model may comprise a block diagram model provided by the Simulink environment of The MathWorks Inc. For example the block diagram model may comprise a series of different type of blocks arranged in a desired manner and connected via connection lines to represent signal values traversing the blocks. The graphical model may comprise any type of element or construct to form a graphical model such as connectors blocks or any other graphical form and representation of functionality supported by the graphical modeling tool . One ordinarily skilled in the art will recognize and appreciate the various forms of graphical models and the elements and content thereof.

Additionally the graphical modeling tool of the present invention may comprise a design and development environment for creating a state machine diagram representation in the graphical model . In an exemplary embodiment and by way of example the graphical modeling tool may comprise Stateflow an interactive design and simulation tool for event driven systems manufactured by The MathWorks Inc. of Natick Mass. The graphical modeling tool such as Stateflow provides elements to describe a language logic and systems in a visual form such as a form that is readable and understandable by a human user such as a designer. In one embodiment of the present invention the graphical modeling tool provides a visual formalism of the item under design as represented by the graphical model .

In one embodiment the graphical modeling tool may be able to execute the graphical model . For example in the exemplary embodiment of Simulink the graphical modeling tool has an environment that provides for the simulation and debugging of the graphical model . Additionally in other embodiments the graphical modeling tool may generate code of executable instructions representing the graphical model to compile and build for executing on a target hardware platform and or operating system. The graphical modeling tool may comprise an automatic code generation application such as the automatic code generator of Real Time Workshop from The MathWorks Inc. of Natick Mass. to generate source code from a graphical model to translate the functionality of the graphical model into an executable form such as a program that may be designed to run on any microprocessor real time operating system or otherwise customized to run on a specific target hardware platform or for use by a verification tool .

Furthermore the graphical modeling tool may provide for implementation of any portion or any functionality of the graphical model via instructions in any type of programming language text based high level interpretative or otherwise. In the exemplary embodiment of a MATLAB and Simulink based environment the graphical modeling tool may provide for or use executable instructions in the form of the textual programming language of MATLAB . One ordinarily skilled in the art will recognize and appreciate that any type and or form of executable instructions including interpretive programming languages markup languages such as the HyperText Markup Language scripting languages and any code such as libraries executables or scripts may be used in providing the graphical model of the present invention.

The verification tool of the present invention comprises a testing and verification environment for testing and verifying an executable form of a design such as a model based design represented by a graphical model provided by the graphical modeling tool . In one embodiment the executable form of the design under test is provided by the automated code generator of the graphical modeling tool as will be described in further detail later. The verification tool may provide for the testing and verification of an executable by any technique known to those ordinarily skilled in the art such as but not limited to bounded model techniques symbolic model techniques test generation techniques solving techniques theorem proving techniques temporal logic exhaustive or deterministic techniques or other mathematical or algorithm based techniques. In one aspect the verification tool may be described or referred to as using formal methods to perform formal verification of the executable in comparison to simulating the graphical model or corresponding executable form .

The verification tool may be any type and or form of verification tool . In some embodiments the verification tool may comprise any of the model based test and verification related software products manufactured by Prover Technology AB of Stockholm Sweden Prover Technology Inc. of San Mateo Calif. Reactive Systems Inc. of Falls Church Va. or TNI Software part of the Valiosys Group with offices in Paris France. In other embodiments the verification tool may comprise any custom verification tool software or any portions of software that may be available to perform testing and verification. One ordinarily skilled in the art will recognize that the verification tool may be any type and or form of verification tool and may use any type and or form of testing or verification techniques formal or otherwise.

The graphical modeling tool and verification tool and any portion thereof can comprise an application module service computer program software component web service web component library or any other type and or form of executable instruction which is designed to and capable of executing the functionality of the present invention as described herein. Additionally the graphical modeling tool and verification tool may be configured to and capable of running any of the modules libraries or software components of the MATLAB and or Simulink product family. As such the graphical modeling and verification environment may have all or a portion of the software components of MATLAB and or Simulink installed on the computing device or alternatively accessible from another computing device on a network.

In although the graphical modeling tool and verification tool are illustrated as separate tools one ordinarily skilled in the art will recognize and appreciate that these tools and may be combined into a single application or otherwise tightly integrated to present a single application in performing the operations of the present invention as described. Additionally although the executable form is illustrated as external to the graphical modeling tool and the verification tool in the executable form may also reside in and or execute in the environments of either the graphical modeling tool and or the verification tool . For example the executable form may comprise an interpretative programming language that is executed in a run time environment of either the graphical modeling tool and or the verification tool

The computing devices and can connect to the network through a variety of connections including standard telephone lines LAN or WAN links e.g. T1 T3 56 kb X.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET cluster interconnections Myrinet peripheral component interconnections PCI PCI X and wireless connections or some combination of any or all of the above. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections .

The network and network connections may include any transmission medium between any of the computing devices and such as electrical wiring or cabling fiber optics electromagnetic radiation or via any other form of transmission medium capable of supporting the operations of the present invention described herein. The methods and systems of the present invention may also be embodied in the form of computer data signals program code or any other type of transmission that is transmitted over the transmission medium or via any other form of transmission which may be received loaded into and executed or otherwise processed and used by a computing device and to practice the operations of the present invention as described herein.

Each of the computing devices and may be configured to and capable of running any portion of the graphical modeling and verification environment . The graphical modeling and verification environment and or any portion thereof such as the graphical modeling tool and the verification tool can be capable of and configured to operate on the operating system that may be running on any of the computing devices and . Each computing device and can be running the same or different operating systems. Additionally the graphical modeling tool and the verification tool can be capable of and configured to operate on and take advantage of different processors of any of the computing devices and . One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices.

Additionally the graphical modeling tool and or verification tool may be deployed such that portions of the graphical model and or the executable may execute on certain portions of the network and or on certain computing devices or . For example some functionality of the graphical model may be time critical or sensitive and therefore may be targeted to execute on a computing device and and a segment or portion of the network with desired performance and or operating characteristics. Other functionality of the graphical model may be less time sensitive and may be targeted to be deployed to any computing device available on the network .

In summary the graphical modeling tool and verification tool may be deployed across a wide range of different computing devices different operating systems and different processors. Furthermore the graphical modeling tool and verification tool may be deployed in various distributed and or client server environments in various network topologies and configurations.

In one aspect the present invention is directed towards providing a design element in the graphical model to represent a precondition for testing or verification of the model based design represented by the graphical model . depicts an illustrative graphical model having a model based design and an element in the graphical model representing and identifying a precondition. The element may also be referred to as a precondition element a precondition design element a test precondition item or a verification precondition item. The model based design portion of the graphical model represents a design of a system or other item or entity which may be under design test or verification. For example the model based design may be a block diagram model provided by the graphical modeling tool of Simulink . The model based design may also be referred to as the design. From another perspective the model based design portion of the graphical model is the content of the graphical model prior to adding any precondition element .

The precondition design element provides a design mechanism and formalism for identifying and specifying a precondition associated with the model based design of the graphical model . The precondition design element is directed towards indicating to a testing or verification tool or any other system a precondition for executing a test verification or simulation of the model based design such as via an executable form . In one aspect a precondition may not be intended to affect the behavior of the design of the graphical model but to provide limits or constraints to the inputs of executing the design or to provide limits or constraints to the execution space of the design under test or verification. The precondition design element is depicted in as separate and external to the model based design to illustrate that the precondition design element is a design element used to associate a precondition with a model based design without affecting altering or otherwise being intrusive to the behavior of the model based design . Although shown external to the model based design for illustrative purposes as will be discussed later the precondition design element may be incorporated into the model based design or any element thereof in a manner that does not affect the behavior of the model based design . For example in an exemplary embodiment the graphical modeling tool may provide a simulation environment for simulating the graphical model . When simulating the graphical model the graphical modeling tool may ignore or otherwise not consider or use the precondition design element for simulating the graphical model .

A precondition may be considered a condition or a constraint that should be established during or prior to invoking execution of the executable form of the design . That is the condition or constraint of the precondition provides a limit to the design and verification process by restricting possible occurrences or allowable combinations of execution scenarios. In another aspect a precondition may also be considered a business rule or a caveat that places a condition or a constraint on inputs actions decisions variables and scenarios to be executed in verification of the design . Additionally a precondition may be considered from a mathematics perspective. As such a precondition may provide a constraint which restricts the possible feasible or more realistic solutions in an optimization problem. In a further aspect the precondition may be considered from a theory of constraints perspective in that a precondition provides any factor that limits the performance or behavior of a system such as one modeled by the design with respect to the system s goal or intended use. Although one ordinarily skilled in the art will recognize and appreciate all the combinations of uses of a precondition on testing or verification one ordinarily skilled in the art will also recognize and appreciate that the precondition design element of the present invention generally provides an instruction or directive for a test or verification system such as the verification tool for performing a test or verification on the executable form of the design .

The precondition design element may comprise any type and or form of a textual or graphical element that can be associated with a graphical model or any portion of the model based design . In one embodiment the precondition design element may be a graphical element or construct such as a precondition block of a block diagram model or an icon image or other graphical form. The precondition design element may provide a visual cue and comprise a highlight a border an animation a change in color or font an asterisk an element shimmer or any other type and or form of a visual cue. By way of example the precondition design element associated with graphical model of illustrates a visual cue such as a board or highlight. One ordinarily skilled in the art will recognize and appreciate the precondition design element for graphical model maybe any type and or form of visual cue

In other embodiments the precondition design element may also be associated with any auditory tactile or force feedback cues such as any sound produce able from the computing device or any sensory output produce able from a haptic or touch feedback device of the computing device . For example the precondition design element for graphical model of may include an auditory tactile and or force feedback cue either alone or in combination with the precondition design element that may be provided in a visual cue graphical or textual form. Additionally the precondition design element like the precondition design element may be associated with a model element such as the signal input of the model based design as illustrated in the graphical model of .

Referring still to in other embodiments the precondition design element may comprise a textual representation such as illustrated with graphical model . In one case the precondition design element may comprise and be identified by any alphanumeric characters associated with an element of the model based design . By way of example the precondition design element for graphical model is illustrated as text associated with the signal input of the model based design . In other cases the precondition design element may be represented and comprise a portion of an element of the model based design such as a textual representation indicator or configuration of the element of the model based design. For example a signal line in a block diagram model may be configured to include a precondition. As such the signal line may include textual information in the signal s configuration that represents or identifies the precondition as discussed in more detail in conjunction with below. Additionally a textual indicator associated with an element of the model based design such as the signal line may be visually depicted in the graphical model . Furthermore the precondition design element may comprise any combination of textual or graphical representation that may or may not be visible in the graphical model .

The precondition design element may also include or be associated with information of logic or a constraint to identify define specify reference or otherwise provide the definition specification or instruction of the precondition. The constraint may be created defined specified or otherwise provided by any type and or form of graphical or textual expression. In one embodiment the precondition design element may provide pre determined or fixed set of constraint information. For example the graphical modeling tool may provide a library of precondition design elements that provide one or more constraints based on any operating performance modeling system environment or other constraints known for a specific domain or system or for a component of the design under consideration. In another example the precondition design element may provide a pre determined or fixed constraint that is further configurable or changeable. In this manner the precondition design element may provide a template for a constraint to be used as is or to be further modified for the desired use.

In another embodiment the precondition design element may be configurable to allow the constraint to be defined or provided either programmatically via any application programming interface API or by a user via an input device. In one embodiment the precondition design element may provide or include a configuration mechanism such as graphical user interface or command line interface for receiving user input or selections for defining the constraint of the precondition. For example the user interface may provide a list of one or more business rules for selection in defining the precondition of the precondition design element . Additionally in some embodiments the precondition design element may be configurable to be set to or changed to an active or inactive state. Instead of removing precondition design elements that may not be desired to be used in certain cases the precondition design element may remain associated with the model based design but not used.

The constraint of the precondition design element may be expressed or specified in any type and or form of graphical or textual language. In the exemplary embodiment of Simulink and Stateflow the constraint may be defined using any function API language statement block state diagram element graphical construct and or graphical function provided by the graphical modeling tool . In one embodiment the constraint may be specified using the high level textual programming language of MATLAB . In another embodiment the constraint may be specified in a language or in a format used by the verification tool . For example the constraint may be specified textually as a string to include text in a format or syntax known by or understandable by the verification tool . One ordinarily skilled in the art will recognize and appreciate that any type and or form of graphical or textual instruction including interpretive or non interpretive programming languages markup languages such as the HyperText Markup Language scripting languages or a custom syntax and language may be used in providing the constraint of the present invention.

Additionally the constraint may be expressed as any type and or form of logic or conditional to provide the desired precondition constraint. In one embodiment the constraint may be specified as a value or range of values to set an input parameter argument variable property attribute or other settable data element related to the model based design or the execution of the model based design in execution form . The value or range of values may include any data type such as a Boolean string integer binary array real or complex number data structure object scalar and or vector of any size and or dimension. Also the value or range of values may be specified in an inclusive or exclusive manner. For example a constraint for a signal input of a block diagram model may be specified that it should be equal to a value or range of values e.g. inclusive manner or should not be set to a value or range of values e.g. an exclusive manner. The constraint may also be expressed as conditional logic where a value of a data element of the model based design is set or changed based on the state status or value of another data element of the model based design . For example the constraint may be expressed as an if then if then else or any other type of if case select or logic conditional statement as known by those ordinarily skilled in the art.

Referring now to an illustrative precondition design element is depicted with an illustrative model based design of a graphical model . The model based design of depicts a graphical model in the form of a block diagram model such as a model provided by Simulink including multiple functional blocks connected together via signal lines as known by those ordinarily skilled in the art. A precondition design element and constraint may be associated with an element of the model based design . In the illustrated example the precondition is associated with the initial input signal of the design . The constraint of 

As illustrated in the precondition design element may be separated into multiple elements or constructs graphical or textual having a portion representing an identifier of a precondition and a portion specifying the constraint . Additionally one or more constraints may be specified for a single precondition element . The one or more constraints may be applied in combination as a logical conditional for the precondition element by for example via a logical OR or AND function. For example one constraint may be exclusively OR d with another constraint to provide a resulting constraint for the precondition. In other embodiments a constraint may be associated or used with multiple precondition elements . Although illustrates separated parts of the precondition design element one or more constraints may form and be included or otherwise incorporated in a single precondition design element . One ordinarily skilled in the art will recognize and appreciate the precondition design element and constraint may take many visual textual and or configurable forms in practicing the operations of the present invention as described herein.

Although the precondition design element is depicted in as associated with a signal input of the design the precondition design element may be associated with any portion or element of the design . The precondition design element may be associated with or provide a precondition for any element of the graphical model in the terms and granularity of the graphical model as may be provided by the graphical modeling tool . For example in the exemplary embodiment of Simulink and or Stateflow the precondition design element may be provided for any signal block state object and any other element used to provide a design . Likewise the constraint of the precondition design element may use or reference any data element accessible via the graphical model or graphical modeling tool . For example in the exemplary embodiment of Simulink and or Stateflow the constraint may use or reference any signal value signal attribute MATLAB workspace variable function parameter argument application programming interface API object property block data element state diagram element or any other data element available in Simulink and or Stateflow . One ordinarily skilled in the art will recognize and appreciate that the precondition design element and constraint may be applied in a manner relevant to the context terms elements design and environment provided by the graphical model and or graphical modeling tool .

By way of example the configuration mechanism of a user interface illustrated in may provide any suitable means and or mechanisms for identifying a precondition and or specifying a constraint . For example the user interface may provide a text field or any other suitable user interface element for specifying a name or identifier of the precondition . For specifying the constraint the user interface may provide an input element such as a text field or edit box to allow a user to enter in free form any expression of the constraint . In one embodiment the user interface may provide a slider element for selecting a value for the signal . The slider element may allow a single value to be selected or a range of values to be selected. In another embodiment the user interface may provide user interface elements to present a dial mechanism to select one or more values for a precondition constraint of the signal . For example a first dial may be used to select or provide a low limit and a second dial may be used to select or provide a high limit for a range of values for the constraint . Although the configuration mechanism is illustrated with a certain set of user interface element and one ordinarily skilled in the art will recognize and appreciate that any type and or form of user interface elements graphical or textual may be used to configure a precondition and constraint .

Referring now to a hierarchical graphical model with multiple precondition design elements is depicted in another illustrative embodiment of the present invention. Using the techniques of the present invention a precondition design element may be associated with different elements or portions of the design and at different hierarchical levels of the design . The illustrative graphical model of is a multiple block block diagram model with one of the blocks B providing or referencing a sub system or another graphical model . At the first level of the graphical model a first precondition design element is provided for the input signal and a second precondition design element is provided for the block B of the design . As illustrated in the first precondition design element may be a single construct while the second precondition design element is a multiple element construct. The second precondition design element may include multiple constraints logically combined to provide a constraint for the precondition design element . For example the value range for a data element of block B may be specified as a value greater than 0 logically AND d with a value less than 10. At the second hierarchical level of the graphical model the graphical model provides a sub system of the design via block B and a third precondition design element is provided for the input signal of the design .

Although not illustrated in the embodiment of the precondition design element of may also be deployed in the multiple precondition design element and hierarchical graphical model embodiment of . Additionally any one or more of the precondition design elements and may be configured to be active or inactive. This provides the designer the configurability to provide and use different precondition design elements and in combination or alone. For example the designer may not be concerned with the verification of the sub system or second hierarchy of graphical model and therefore set the third precondition design element to an inactive or off state. In this manner a verification tool may not consider the third precondition design element when performing verification.

Although in the precondition design element is illustrated as part of and included in the graphical model the precondition design element may be provided external to but in association with the graphical model or the design of the graphical model . In some embodiments the precondition design element may be identified and or the constraint specified in an external storage location such as a file a library another software program or set of executable instructions or any other computer readable medium or storage location. In other embodiments the precondition design element may be defined in an input file for a code generation process so that the precondition design element may be provided in association with the executable form of the design. One ordinarily skilled in the art will recognize and appreciate that the precondition design element of the present invention may be specified externally to the graphical model by other suitable means and or mechanisms and in other environments in practicing the operations of the present invention described herein.

In another aspect the present invention is directed towards a method of using a precondition design element for providing verification specifications in the graphical model. depicts an illustrative method of practicing the technique of using a precondition design element in an illustrative embodiment of the present invention. At step of illustrative method a graphical model is provided such as any of the graphical models of . In the exemplary embodiment the graphical model may be created designed edited or otherwise provided by a graphical modeling tool such as in a modeling environment of Simulink and Stateflow .

At step of illustrative method a portion of the design of the graphical model is identified for associating a precondition. For example a designer or modeler of the design may determine which elements and functionality of the system under test to provide a precondition. A precondition may be associated with the design for a variety of reasons and purposes as one ordinarily skilled in the art would appreciate. Additionally the portion of the graphical model associated with a precondition may be based on the context and environment of the system the desired behavior the intended use or goal of the system and the desire of the designer. In some embodiments the precondition design element may be used to 1 constrain the behavior of a design under test or verification to those patterns that may be more meaningful in the larger context of the design being analyzed 2 force execution patterns to be more realistic in the context of the system and the system s environment 3 improve the performance of automated verification techniques by reducing the execution space that must be explored or executed and or 4 perform guided design exploration through the use of formal analysis or test generation. One ordinarily skilled in the art will further appreciate and recognize that the precondition design element may be used to provide any type and or form of condition instruction command or directive to a testing or verification tool or to another system or environment to use or execute the design in executable form in a desired manner.

At step of illustrative method a precondition design element is provided and associated with the identified or otherwise desired portion of the design represented by the graphical model . The graphical modeling tool provides any type and or form of suitable means and or mechanism for creating identifying designing configuring specifying or otherwise providing a precondition design element . In some embodiments the graphical modeling tool provides a toolbox or palette for dragging and dropping or otherwise placing a precondition design element in the design layout area for the graphical model . A precondition design element may be associated with a portion of the design by either a physical connection in the design or by a logical or virtual association. In some embodiments the precondition design element is connected via a line or other suitable connector or graphical element to the identified portion of the design . For example a precondition design element may be connected to a signal line a block or a state of a block diagram model . In other embodiments the association between the precondition design element and the portion of the design may be formed via a reference or identifier in the configuration of the precondition design element to the desired portion of the design . One ordinarily skilled in the art will recognize and appreciate the various means and or mechanisms to associate a precondition design element with a portion of the design .

Additionally illustrative steps and may be repeated as desired to associate one or more precondition design elements with different portions of the design of the graphical model . Furthermore steps and may be performed at one or more levels of hierarchy that may be provided by the graphical model .

At step of illustrative method the precondition design element may be configured to provide the desired precondition. In some embodiments the graphical modeling tool may provide any type and or form of suitable configuration mechanism such as the user interface illustrated in to configure the precondition design element . In other embodiments a pre configured or fixed functionality precondition design element may be used. In further embodiments a template or pre configured precondition design element may be provided and further configured or modified as desired using any suitable configuration mechanism. In configuring the precondition design element at illustrative step the constraint may be defined or specified to provide the desired constraint using any graphical or textual form syntax or language as previously discussed in connection with . Additionally in practicing the operations of the present invention and illustrative method as described herein any one or more precondition design elements may be configured to be active or inactive as may be desired during the design test and verification process.

In another aspect the present invention is directed toward generating code from the graphical model incorporating the precondition design element of the present invention to provide an executable and precondition specification for the verification tool or any other system. An illustrative method of and system of of the present invention will be used to discuss the operations functions and structure of the code generation techniques of the present invention. Referring to in brief overview the code generating system comprises a code building tool having a code generator . In an exemplary embodiment of a graphical modeling and verification environment of MATLAB and Simulink the code building tool may comprise the Stateflow Coder and Real Time Workshop products both manufactured by The MathWorks Inc.

Referring to the illustrative method of the present invention obtains a graphical model . The graphical model may include one or more precondition design elements . In some embodiments the graphical model may be obtained via a file. The graphical model may comprise a file in a format that the code building tool or code generator can read and that follows a file specification for defining precondition design elements or for otherwise referencing a precondition design element . In some embodiments the precondition design element is included with or is a part of the graphical model . In other embodiments the precondition design element may be referenced by or associated with the graphical model but provided by a file or medium external or separate from the graphical model . In these cases in providing the graphical model at illustrative step any other files or resources needed to perform the code generation process as described herein may also be provided.

In some embodiments the code building tool and or code generator may obtain either the graphical model from an application programming interface API call to another application or via an interface to another environment such as the graphical modeling tool . In yet a further embodiment the graphical modeling tool or another computer program saves and converts the graphical model into a format readable by the code building tool . For example a graphical model produced with Simulink and Stateflow may be converted into an intermediate model file representation such as an .rtw type file readable by the automatic code generator of Real Time Workshop .

At step of illustrative method an executable or simulatable form of the model based design of the graphical model is provided or generated and built for verification by a verification tool . The code building tool such as Stateflow Coder and or Real Time Workshop may generate code for the graphical model . The code building tool and code generator use one or more input files in conjunction with reading and processing the graphical model .

The one or more input files may comprise files including templates commands input parameters configuration data source code data and class definitions component configuration device driver or any other information that may be used by the code generator to generate code for the graphical model . The input files may include files to provide input to and configure the code generator to generate source code files for a specific target hardware platform for example a specific processor. In an exemplary embodiment of Real Time Workshop as the code generator Real Time Workshop uses target language compiler script files with a .tlc file extension as input files to the code generation process. The .tlc files provide sections of programming instructions to be implemented for block and element references as they may be found in the graphical model during the code generation process. The .tlc files also can provide data and class definitions for data element references found in the graphical model . Furthermore the .tlc files may provide data and other information to translate precondition design elements associated with the graphical model into precondition specifications to be used by the verification tool or the target system. Additionally the .tlc files also comprise compiler directives built in functions and other code generation commands to direct Real Time Workshop during the code generation process.

In operation the code generator reads in information regarding or a representation of the graphical model and uses the input files to generate code by translating the graphical model into one or more source code files . By way of example the automatic code generation can be discussed in terms of generating code with Real Time Workshop from a block model diagram generated with Simulink . Simulink creates and stores block diagram models into model files with an .mdl file extension. As part of the code generation process Real Time Workshop reads in an .mdl model file and analyzes the model to generate an intermediate model file with an .rtw extension. This intermediate .rtw model file comprises a hierarchical structure of records describing systems and their blocks and connections analyzed from a block diagram model of the .mdl file.

A language compiler called the target language compiler of Real Time Workshop works with .tlc files and .rtw files to produce code. The target language compiler interprets a program that reads the intermediate model file description of an .rtw file. As the target language compiler encounter a record in the .rtw file it uses directives in the .tlc files corresponding to the record to direct the code generation process for the specific record. As such the target language compiler works much like a text processor. For example the target language compiler uses block .tlc files which specify the particular code for a block to transform each block into code. When it reads a record in the .rtw file that references a block the target language compiler applies code from the corresponding block .tlc file to generate code for the block in source code files . Additionally model wide .tlc files are also used to provide input to the target language compiler for global customization of the code. Model wide .tlc files may direct the target language compiler to generate main routines to provide entry points into the program source code header files to setup data structures and utility functions to support code for particular blocks. The block and model wide .tlc files can be modified to generate customized code for blocks and to generate any desired global customizations to the code.

The source code files generated from the code generator such as Real Time Workshop may comprise program instructions of a programming language such as C which may further be in a format and style following the ANSI ISO C standard. Additionally the source code files may be generated to comprise fixed point or floating point source code. The programming instructions of the source code files may be generated to run on any real time operating system or for a specific processor. In a further embodiment the programming instructions of the source code files may be optimized for performance or versatility and or for a specific target hardware platform. In another embodiment the code generator can be configured via the input files to generate custom source code comprising a style and format as directed by the input files . The code generator can be also configured via the input files to provide customized source code to support such customizations as error handling optimization code and data reduction code reusability scoping of variables and other characteristics of the source code that may be modified during the source code generation process.

In some embodiments a portion of the source code or object code generated or provided by illustrative method may be targeted to run on a specific computational hardware device such as an embedded hardware platform or a specific processor of a computing device and another portion may be targeted to run on a personal computer such as a desktop or notebook. For example a portion of the design of the graphical model may process data or perform loops that are time critical. In comparison the display may not need to be updated in a time critical manner as the viewer s eyes may only perceive updates at a certain rate. The time critical data processing or loops may be embodied in source code and or object code targeted for a specific processor of a certain speed or capability and the non time critical code may be targeted for any general computing device. One ordinarily skilled in the art will recognize and appreciate the various ways to process and target various portions of code to meet the desired functionality and or execution of the design represented by the graphical model .

At step of illustrative method one or more programs may be built from the automatically generated code to provide an executable form to execute the design represented by the graphical model . The code building tool also provides for the building of the source code files into object code to generate one or more programs to run on a target platform and or operating system or to be executed or use by a target verification tool . As depicted in the executable provides an executable form of the design represented by the graphical model .

The build process of illustrative step of the present invention may include compiling the code and linking libraries drivers and other programs via a make program or some other compiling utility. In one embodiment the code building tool invokes a compiler provided by software available with the operating system such as a make utility on a UNIX operating system. In another embodiment the compiler may be provided from a software development package such as Visual C C from Microsoft Corporation of Redmond Wash. One ordinarily skilled in the art will recognize the code building tool may invoke any type of compiler that is configured to and capable of translating the source code into object code to be executed by the target computing device .

Although the code generator is generally discussed in terms of generating source code the code generator may provide code in any other form such as object code pre existing source code or other programmable instructions suitable for representing the functionality of the design represented by the graphical model . Additionally although the illustrative embodiment of the present invention is discussed in terms of source code files and object code from a programming language like C the code generator may generate any type of programming related output such as an interpreted programming language and or scripting language. For example the code generator may generate code for per awk VBscript Javascript tcl or the technical computing programming language of MATLAB . In other cases the code generator may generate output in other types of languages such as the hardware description language of HDL or a custom or specific language of a verification tool . One ordinarily skilled in the art will recognize the various types of languages the code building tool may apply in generating code and how the code generator may build the code based on the type of language.

In other embodiments of step of illustrative method the executable form of the model based design may not need to be generated such as from an automatic code generation system. The graphical model may already be in a form that is executable by either the graphical modeling tool or the verification tool . In this manner the graphical model may provide the executable form for testing or verification by the verification tool . Although generally discussed as an executable form of the model based design the executable form may also be referred to as a simulation form or as being simulatable in that the graphical model can be executed simulated tested or verified.

At step of the illustrative method the precondition design element associated with the graphical model is provided in a form applicable by the verification tool or target system in testing or verifying the executable form of the design . For example the code generation process may provide a precondition specification for a verification tool by processing or translating the precondition design element into a desired or suitable form. In some embodiments the precondition design element is considered separate from the design and is therefore not included or incorporated in the executable form of the design . For example the precondition design element may be intended and configured not to affect the behavior of the system design . In these cases code may not be generated for the precondition design element .

In some embodiments the code generation process described above may be used to provide a precondition specification having a desired form and content for use by the target system such as the verification tool . For example the precondition specification may be processed by illustrative step to be provided in the same language as the code of the executable . In other embodiments the precondition design element and or constraint may be configured or defined to already have a form to be used and processed by a target verification tool . As such the precondition specification may be formed or provided by extracting parsing or otherwise using content from the configuration or definition of the precondition design element . In yet a further embodiment the executable form may be generated at illustrative step to incorporate any type and or form of mechanisms to provide for or apply the precondition design element and or precondition specification .

In view of steps and one ordinarily skilled in the art will recognize and appreciate that the illustrative method is directed towards providing an executable form and a precondition specification of the design such that a verification tool or other target system may execute testing or verification of the design in a desired manner by applying the preconditions according to the precondition design element . At step of illustrative method the design represented by the graphical model is verified by the verification tool by executing the executable form and applying the preconditions according to the precondition specification . One ordinarily skilled in the art will recognize and appreciate that the manner and techniques used for performing verification and applying the preconditions will be based on the verification tool . Furthermore the design and verification process may be interactive and illustrative methods and may be performed multiple times with different or modified designs and or precondition design elements to reach or otherwise provide for the desired result or to otherwise finalize a design .

In view of the structure functions and operations of the systems and methods as described herein the present invention provides a design technique and mechanism for specifying preconditions for the test analysis and or verification of a model based design. The precondition design element of the present invention can be used in a model based design approach in such a manner as to not affect or alter the behavior of the system but at the same time provide constraints for the verification of the system. The system design represented by the graphical model may be used as a design specification for an implementation and associated with or in the same graphical model the precondition design element may be used as a design specification for verification. Instead of using the configuration or development environment of the verification tool to specify preconditions the designer may specify preconditions in the graphical modeling environment in the same modeling language and format as the design specification for implementation. This enables the designer to more easily and efficiently associate results from verification and corresponding preconditions with the design specification provided by the graphical model.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

