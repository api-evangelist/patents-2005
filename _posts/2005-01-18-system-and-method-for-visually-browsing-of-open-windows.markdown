---

title: System and method for visually browsing of open windows
abstract: A method referred to as visual window browsing allows a user to browse through windows on their desktop. Aspects of the invention include responsive to a command, moving open windows to form a visual stack with the topmost window in the stack being in focus. Responsive to a browse the windows in the visual stack can be browsed, where the topmost window moves to the bottom of the visual stack and the other windows move higher in the stack, with the second highest window becoming the topmost window and being in focus. Successive browse commands causes this behavior to repeat allowing a user to cycle through each of the open windows.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08341541&OS=08341541&RS=08341541
owner: Microsoft Corporation
number: 08341541
owner_city: Redmond
owner_country: US
publication_date: 20050118
---
Aspects of the present invention are directed generally to window arrangements in an operating system. More particularly aspects of the present invention are directed to a method and system for configuring the open windows in a user interface that will allow a user to readily browse multiple windows.

As the use of computers in both the workforce and personal life has increased so has the desire to allow for easier use of them. Many operating systems today utilize a windows based configuration of application programs. Information is displayed on a display screen in what appears to be several sheets of paper.

When multiple windows are open at the same time switching quickly to the desired window can be difficult. For example the desired window may be partially or fully occluded by other open windows. Also the desired window may be minimized or hidden.

Window selection interfaces have been proposed to minimize the necessity to sort through the various open windows. Current versions of the Windows brand operating system by Microsoft Corporation include the Alt Tab key combination Task List and Taskbar which when selected presents a list of open windows in a representation different from the primary window. Similar user interfaces exist in MAC OS X brand operating system by Apple Computing Inc. of Cupertino Calif. including Apple Tab and the Dock in which a list of windows in are provided in a representation different from the primary window. Each of the aforementioned user interfaces restate or reformulate the open windows into a type of list. These interfaces however do not allow the user to view content of a window without the window being selected.

Recently Apple Computing Inc. introduced Expos in the MAC OS X brand operating system. Expos provides a user with the ability to display all open windows as thumbnails on the desktop. In operation when the user types the F9 key Expos tiles all the open windows. Namely Expos scales the windows down to a size such that all the open windows are displayed in a non overlapping form. In another aspect Expos provides a user with the ability to display view all open windows in a particular application in a non overlapping manner. Specifically when the user types the F10 key Expos tiles all of the open windows for the current application in a non overlapping form while fading to a gray all of the open windows associated with other applications.

While Expos allows the user to view open windows simultaneously multiple windows are tiled on the screen which can still lead to some confusion. It would be helpful to provide an interface which allows a user to scan quickly through open windows one at a time.

There is therefore a need for a method to allow users to quickly scan through open windows one at a time. According to one aspect of the invention open windows can be presented in a visual stack representing a Z ordering of the windows. In response to a browse command windows can be navigated through where each input causes the window at the top of the visual stack to move to the bottom of the stack and the remaining windows to move up in the stack with the window previously second in the visual stack being in focus. Successive browse commands causes this behavior to repeat allowing a user to cycle through each of the open windows.

In the following description of various illustrative embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a digital camera a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a pen stylus and tablet microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces IIIetc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces IIIetc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand Iand interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand Iredesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

Desktop space is an area of a display that allows for the display of windows corresponding to application programs. The taskbar at the bottom indicates which windows are currently in use which may be visible or minimized. A taskbar is a specific implementation of an on screen window remote control used to list and enable manipulation of windows such as activating moving hiding and minimizing. Window may be represented by taskbar button . Window may be represented by taskbar button . Window may be represented by taskbar button . Window may be represented by taskbar button . Window may be represented by taskbar button . Window may be represented by taskbar button . As shown in this example all six of the windows are shown open. Although only six windows are shown it should be understood that more or fewer windows may be open. The taskbar button order may indicate the order in which the corresponding windows were first opened. For example window is the third window from the top of the Z order as shown by its corresponding taskbar button while window was the least recent window opened in comparison to the other five windows.

Each of windows and includes an indicium respectively corresponding to the application program using the window. Each window in is shown to include an indicium. For example windows and respectively include indicium . It should be understood by those skilled in the art that any particular window may or may not include a corresponding indicium.

For the windows and shown in it is difficult to easily determine the different windows that are open and where any particular window is in the Z order. In some orientations one or more windows may completely obscure an underlying window in the Z order. In such a case a user will not be able to see the underlying window. The contents of other windows may be partially obscured by other windows higher in the Z order. Further in some cases the taskbar area may be hidden when not in use. As such a user would not even be able to quickly see the buttons without activating the taskbar area.

To initiate visual window browsing according to an illustrative embodiment of the present invention the user inputs a command in the form of a keyboard shortcut a mouse action a voice input or the like. These inputs might include a shortcut sequence like Windows Tab Alt Tab or pushing the mouse pointer to a corner of the screen. In response to the command each of the windows in animate from their starting location and move to a position in a visual stack such as shown in . A visual stack intuitively provides the user with an ordering of windows so that the open windows can be browsed or navigated through intelligently. As can be gleaned from the windows in the visual stack substantially retain their size from the configuration but are slightly scaled and skewed to provide a high fidelity three dimensional visual representation.

Each of the windows and in is configured in an order in which a window not at the top of the Z order is partially overlapped or obscured by a portion of a window higher in the Z order than the respective window. The window which is not overlapped by any other window i.e. is at the top of the Z order becomes the window in focus. In the example when visual browsing is initiated the window which was at the top of the Z order in becomes in focus. It will be understood that responsive to the command to initiate visual window browsing the window at the top of the Z order in does not necessarily become the window in focus in . Stated differently it will be appreciated that responsive to the command to initiate visual window browsing the Z ordering of the windows can be based on a number of known characteristics. For example the ordering may be based on 1 the order in which the windows were last in focus from most recent to least recent 2 distance from an edge or corner of the screen 3 alphabetical order by title of the window or by application and title or 4 window size smallest to largest. Ordering by window size can be particularly beneficial in that it would allow many windows to be ordered where the user would be able to discern some information regarding the content of many windows. A user interface may be provided in a configuration mode to allow the user to pre select the characteristic s by which the windows would be Z ordered when initiating visual window browsing.

To browse to another of the windows the user can issue another command by performing an action such as pressing the Tab key while continuing to hold the Windows key spinning the mouse wheel one click or providing another input. It will be appreciated that browsing to another window may be implemented in response to a further user input or it may occur automatically e.g. in response to a passage of time such as five seconds for example in much the same way a scan operation functions with respect to a radio. In both cases a browsing command is generated in one instance by a user and in another instance automatically. In response to the command the window at the top of the visual stack Z order in moves to the rear of the stack bottom of the Z order and the remaining windows move forward as shown in such that window moves to the top of the stack and comes into focus. The arrows in are not part of the display screen and have been provided to show the direction of the animation from moving window from the top of the visual stack to the bottom of the visual stack. Non opaque window A corresponding to window at the top of the Z order and the other non opaque portions of the windows have also been provided to represent the animation which occurs when a user browses to another window.

Subsequent browsing commands would cause the same behavior as described with respect to . Namely the window on the top of the visual stack moves to the bottom of the visual stack and the other windows move up a position in the visual stack with the window second in the Z order moving to the top of the stack and coming into focus. Following the above sequence of events the user ends their visual browsing by taking an action such as letting go of the Windows key clicking the primary mouse button or the like. Either the topmost window of the stack or a window indicated via another fashion such as clicking directly on it becomes the new topmost window and the windows animate back to the overlapping presentation of with the window in focus being moved to the top of the Z order.

In certain illustrative implementations of browsing according to the present invention all open windows substantially maintain their size as well as their position in the Z order while being browsed. While not required maintaining these parameters as described can minimize the impact of the browsing action on the user s mental model of their workspace. As such the user may be able to remember more easily the window size window position and the period in which a specific window was browsed relative to other windows to find the desired window more quickly.

In other implementations where one or more windows are maximized when visual browsing is initiated the maximized window s would be scaled to allow for a visual stack configuration to be displayed. Also when browsing is initiated the windows may be scaled so that the windows in the visual stack increase in size from topmost to bottommost window. In this implementation the window at the top of the visual stack will always be scaled to be the smallest the second window in the visual stack the second smallest and so on. Thus in one implementation when a command to browse from one window to the next window in the Z order is executed the window at the top of the stack moves to the bottom and its size is increased to be the largest window. Each other window in the visual stack would move up one spot in the Z order and be reduced in size. Such an implementation will allow many windows to be visually displayed in the visual stack and provide a user with a comparable quantum of information regarding the content of each of the windows.

While the example of the invention described with respect to discloses a system which uses all the open and visible windows one skilled in the art will appreciate that minimized or hidden windows could also be represented by thumbnails or full sized restored versions in the desktop space and thus could be browsed to by adding them to the visual stack. That is in response to a command all minimized and hidden windows could be included on the display screen as thumbnails or in restored versions initially or in response to a command issued during the visual browsing. Such a command might be invoked by selecting an area of the display entering a key input command or other types of user input. In this instance the window would open to the appropriate size and move to the appropriate location in the visual stack.

Alternatively a subset of the open visible or hidden windows could be browsed through. In one implementation browsing could be set to occur based on all windows associated with a word processing application or all windows with other common characteristics. In these scenarios the windows on the desktop could be segmented into a particular group and the browsing would only be carried out among those windows in the particular group. The screen real estate could be used entirely for the browsing action or could be subdivided as needed. Thus in certain implementations only the windows for a certain group would be present in the visual stack.

It may be desirable to limit the number of windows which can be depicted in Z order as the screen real estate may only allow a certain number e.g. 8 of windows to be displayed in such a manner that the user will be able to determine some information regarding the content of each open window. If the windows displayed are limited in number other open windows may be part of the stack but not displayed. More specifically if ten windows are open the visual stack may only show the top 8 windows in the Z order although ten windows are in the Z order. Consequently in response to a browsing command the window at the top of the Z order would move to the bottom of the Z order and would not be displayed all the other windows would move up a space in the Z order with the window previously not displayed and occupying the ninth position in the Z order moving to the eighth position in the Z order and onto the display.

The amount the windows are skewed in response to the command to initiate visual browsing can depend on the number of windows to be presented in the visual stack. In this instance the skew may increase based on the number of windows that are displayed in the visual stack. That is to allow more windows to be presented in the visual stack and still allow a user to identify some information regarding the content of the window it may be appropriate to increase the skews of the windows.

In some aspects of the invention a user can browse to a window on demand from the visual stack. Thus to browse to the third window down in the visual stack rather than browse to through the second window in the stack a user can immediately browse to the third window in the visual stack by inputting a command. shows such an illustrative implementation allowing random access to the windows in the visual stack. A user can input a window selection command which causes the selected window to slide out or otherwise move from the visual stack to reveal more of the window so that the user can preview more of the window content as shown in . The arrow simply shows the direction of the animation and is not part of the display screen. A window selection command may be any type of input such as a key combination a mouse selection of the window or a specific area of the window or the mouse pointer hovering over a portion of the window for a specific amount of time e.g. two seconds. When selected the window in addition to moving to reveal content does not come into focus retaining the Z order and returning to its original location in the visual stack after a preset time period and or in response to a command. Responsive to a further system or user command the window which has moved to reveal content may move to the top of the visual stack and into focus with the previous top window moving to the bottom of the Z order or each of the windows above the window moving to the top moving down in the Z order.

In some implementations to aid a user in identifying a window information regarding the content of the window for example the title could be placed in a tab which extends from the window in the visual stack upon initiation of visual browsing or in response to a command once browsing with the title. shows an exemplary tab . It will be appreciated that whether or not a tab is associated with the window in the visual stack could depend on how much of the window is obscured by other windows in the stack. For example the top window in the visual stack which is in focus does not need a tab. In a further alternative implementation to aid a user in identifying a window the configuration of windows could be visually stacked such that the titlebars or other primary content locations are aligned to allow a user to view these areas for each of the windows as shown in for example. A titlebar corresponds to the area of window holding the title such as titlebar for window as shown in . In still another alternative a user could move the mouse pointer over a portion of the window so that more content is revealed in a tool tip type implementation. Also a thumbnail could be provided when a user hovers over portion of a window to provide additional information.

It will be appreciated by one skilled in the art that aspects of the invention described above may be applied to any view of a collection of objects which are typically identified by their visual attributes i.e. size shape position content . For example a collection of photographs in a folder container may be presented as piles or stacks grouped by a common attribute or explicitly by the user. Because these stacks also maintain a z order aspects of the invention could be used to browse the stack of photos to locate retrieve a specific photo without having to resort to opening or flattening the stack.

It will be further appreciated by one skilled in the art that creating the visual stack manipulating the visual stack and providing the animation transitions to show the user visually what is occurring requires a 3 dimensional layout engine working with the operating system. The layout engine may be built into the operating system or it may be a standalone application which interfaces with the operating system. One obvious aspect is that the invention needs to be performed on a system with sufficient processing power to manipulate three dimensional images in real time.

In another implementation of the present invention various aspects of the present invention may be performed by an application programming interface API . For example public APIs may interface with an operating system to allow an operating system to provide the various features of the present invention. In one embodiment a software architecture for processing data representative of a Z ordering of overlapping windows on a computer display includes at least one component configured to move the windows to be in a visual stack in Z order with the topmost window in the stack being in focus and at least one application program interface to access the component. An API may receive a request to put one window in focus and other windows out of focus access the necessary function s to perform the operation and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention.

In another implementation a programming interface operable with an operating system can perform the steps including intercepting an instruction to a destination module to place one window in focus and other windows out of focus intercepting data indicating the Z ordering of the windows and providing an instruction to the destination module to move the windows to be in a visual stack where the windows are visually stacked according to the Z ordering with the one window to be placed in focus being the topmost window in the visual stack.

Illustrative aspects of the invention include providing the windows in a visual presentation configuration which can be understood by the user as having a linear or ordered arrangement even if the windows are not strictly linear in their appearance. This allows the user to cycle quickly through the windows using input commands e.g. keyboard or the mouse wheel to bring a window of interest to a position where it can be viewed at near to true fidelity. Another illustrative aspect of the invention provides a three dimensional arrangement of the windows to allow the user to see as much of the most interesting part of the window the top and left edges in left to right language layouts at near 100 scaling. These two illustrative aspects together permit the user to quickly visual identify the window he is seeking using both the contents of the window and the window shape. Another illustrative aspect resides in that transition to and from the visual presentation of the windows is carried out using animation which helps the user understand the source of the window layout.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention.

