---

title: Dynamic tagging of network data based on service level objectives
abstract: A system for dynamic tagging of network data based on service level objectives comprises one or more processors and memory coupled to the processors. The memory comprises program instructions executable by the processors to identify a service level objective associated with a particular task that comprises a transmission of data packets over a network on behalf of an application, where the network includes one or more devices (such as routers, switches, etc.) configured to provide different levels of service to data packets based at least in part on service level indicators included within the packets. The instructions are executable to dynamically generate service level indicators corresponding to the identified service level objectives for inclusion in the data packets of the task, and to transmit the packets including the service level indicators into the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07940756&OS=07940756&RS=07940756
owner: Symantec Corporation
number: 07940756
owner_city: Mountain View
owner_country: US
publication_date: 20051123
---
This invention relates to computer systems and more particularly to tagging of network data packets in computer systems based on service level objectives.

In today s highly interconnected computing environment hardware and software from a variety of different vendors may be used in order to process service requests submitted by enterprise application clients. For example when a user of a web enabled stock trading application issues a request to buy shares using a web browser running on a personal computer PC the web browser and the operating system at the user s PC may be provided by a first vendor the web application interface to the stock trading application may have been developed by another vendor the PC hardware components which may have been manufactured by a variety of vendors may have been assembled by a different vendor and so on. Various networking devices such as switches routers etc. linking the PC to a server at the stock trading application provider and the stock trading application provider to a stock exchange may also be managed by different vendors.

A user s request may be transformed at various stages during request processing e.g. from various text form entries submitted by the user one or more protocol specific encrypted data packets may be generated on the client PC examined and potentially modified at intermediate nodes of the network and reassembled at a server managed by the stock trading application provider as a purchase request. The server at the stock trading application provider may generate its own network message or messages to a stock exchange or a seller of the stock which may also be transformed on their way to the seller. No single entity may typically manage all aspects of the communication required to process even relatively simple service requests thus responsibility and control of application data flow may be distributed across multiple service providers and vendors. In many cases for example enterprise application providers may rent connectivity across wide area networks from telecommunication carriers but the enterprise application providers may have no control over the underlying network infrastructure managed by the carriers.

As more and more application data traffic is transported across third party networks such as the wide area networks managed by telecommunication carriers the need for providing differentiated levels of service across heterogeneous resource paths has been recognized. Techniques such as MPLS Multi Protocol Label Switching have been developed at least in part for tagging data packets to indicate desired levels of service. However these schemes are typically deployed statically e.g. the service level objectives may be tied to statically selected network port numbers or IP addresses. Applications that are intended to support different levels of services for different tasks or jobs e.g. to provide a higher quality of service to an online order for goods worth a million dollars than to an order for goods worth ten dollars may not be able to utilize such static techniques effectively. Although networking experts have implemented various types of sophisticated network traffic management techniques in many cases communication gaps continue to exist between the detailed and dynamically changing application knowledge typically available to enterprise software vendors and the network management expertise typically available within network service providers that is the detailed application knowledge is typically not used to make traffic management decisions. Bridging such communication gaps may lead to more effective utilization of network infrastructures from an application perspective than is usually possible today.

Various embodiments of systems and methods for dynamic tagging of network data based on service level objectives are disclosed. According to one embodiment a system comprises one or more processors and memory coupled to the processors. The memory comprises program instructions executable by the processors to identify a service level objective associated with a task that comprises a transmission of data packets over a network on behalf of an application where the network includes one or more devices such as routers switches etc. configured to provide different levels of service to data packets based at least in part on service level indicators included within the packets. The instructions are executable to dynamically generate service level indicators corresponding to the identified service level objectives for inclusion in the data packets of the task and to transmit the packets including the service level indicators into the network. On receiving a tagged packet a network device may take specific types of actions e.g. select a given path within the network from among a plurality of available paths based on the packet s service level indicator. In this way application specific knowledge such as the relative priority of two different backup tasks or the rate at which two different customers are being charged for services provided by the same application in a tiered pricing model may be used to guide the manner in which data is transmitted over a network that may not be controlled by the application vendor. For example data packets being transmitted for an online bid of ten thousand dollars for an auctioned item may be tagged as being more important and therefore requiring shorter response times than data packets being transmitted simply to browse for items at the same auction web site. The packets tagged as being more important may for example be routed over a less congested path or a shorter path to their destination than the less important packets.

Multiple data packet streams or flows corresponding to different tasks or jobs for the same application may be concurrently transmitted over the network in some embodiments with different service level indicators included in the packets of the respective streams. Thus at the same time that a given packet P with a particular service level indicator SLI is in transit in the network another packet P generated on behalf of the same application and potentially transmitted using the same network port may also be in transit with a different service level indicator SLI. In some embodiments the instructions executable to identify the service level objectives and to generate the service level indicators may be incorporated within a service level manager that runs at one or more network endpoints e.g. at a host or server where the application is executed . The service level manager may also be configured to communicate with a policy engine responsible for coordinating network traffic in order to achieve the application specific or task specific service level objectives. The policy engine may for example be configured to manage network traffic on the basis of a set of rules or policies by setting up network routing tables issuing directives to various network devices to refresh or modify their routing tables etc. The service level manager may transmit a configuration request to the policy engine requesting a desired level of service for a particular packet stream in some embodiments. In one embodiment the service level manager may send a request to the policy engine to determine the format or values to be included within service level indicators in the data packets. In one embodiment responses received from the policy engine which may for example indicate whether requests for desired service levels were accepted or rejected by the policy engine may be logged by the service level manager and the logged responses may later be used for various purposes such as renegotiating service level agreements. In some embodiments for example to reduce the load that might otherwise be generated at the policy engine as a result of large numbers of requests for service level objectives for different packet streams a number e.g. thousands of tags or service level indicators corresponding to various desired levels of service may be allocated or set up in advance. In such embodiments a selected pre allocated tag may initially be inserted into the data packets of a particular data stream and if the level of service obtained using the initial pre allocated tag is found to be insufficient a different pre allocated tag indicating a higher level of desired service may then be inserted in subsequent packets of the stream without requiring a communication with the policy engine to implement the change in tags.

Various types of networking devices and protocols may be used in the network in different embodiments such as IP over Ethernet ATM Asynchronous Transfer Mode Frame Relay SONET Synchronous Optical Network SDH Synchronous Digital Hierarchy DWDM Dense Wavelength Division Multiplexing etc. Portions of the network connecting application endpoints may include Wide Area Networks WANs managed by telecommunication carriers in some embodiments. The service level indicators may be implemented using MPLS tags IPv6 flow labels QoS Quality of Service bits Virtual LAN identifiers or any other packet tagging scheme in various embodiments as desired. In some embodiments the dynamic tagging scheme for data packets may be used in environments where enterprise network traffic enters a telecommunication carrier managed cloud via an optical or TDM Time Domain Multiplexing circuit based device. In such embodiments the dynamically inserted tags may be used to provide application awareness in conjunction with techniques such as Virtual Concatenation VCAT and Link Capacity Adjustment Scheme LCAS .

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

At least some of the network devices may be configured to provide different levels of service to different data packets based at least in part on service level indicators such as tags that may be included in the packets. A wide variety of service level indicators may be used in different embodiments. For example as described below in further detail in conjunction with the description of in some embodiments network may support Multiprotocol Label Switching MPLS in which network routers may assign labels or tags to each packet entering the network to enable packet forwarding decisions to be made based on the contents of the label thus simplifying routing decisions compared to techniques that may require complex route lookups based on destination IP addresses. In other embodiments labels or tags may be implemented within IP packet headers e.g. in IP version 6 flow labels fields as QoS Quality Of Service bits virtual LAN identifiers etc. Endpoint A may include a service level manager configured to utilize application specific knowledge such as knowledge of the relative importance of different tasks performed using a given application to drive network traffic in accordance with application specific goals.

Service level manager may be configured to identify service level objectives associated with various tasks performed using applications running on endpoint A and to generate service level indicators corresponding to the objectives for inclusion within the data packets generated for the tasks. The service level objectives may differ for different tasks or jobs performed using the same application in some embodiments. For example a purchase order request submitted via an electronic commerce application may be given a higher priority than requests to browse a catalog using the same electronic commerce application. Accordingly data packets corresponding to the purchase order may be labeled or tagged to obtain preferred treatment such as transmission over less congested or shorter routes in network compared to the treatment of the data packets of the browse requests. Similarly in some embodiments where a service provider may charge different clients at different rates for services such as remote backup using a tiered pricing model a backup on behalf of a premier customer being charged at a higher rate may be given preferential treatment compared to a backup being performed concurrently for another customer being charged the standard backup rate. Service level manager may be configured to dynamically generate service level indicators such as MPLS tags or IP flow label contents and to add the indicators at the appropriate locations within the packets generated for the application tasks. For example as shown in data packets A generated on behalf of task A with service level objective SLO A may be tagged with different service level indicators than data packets B generated on behalf of task B with SLO B. The dynamically tagged data packets may then be transmitted from one endpoint A over the network to one or more destination endpoints such as endpoint D in FIG with the specific path or route taken by a particular packet or packet stream being selected at least partly on the basis of the included service level indicators in some embodiments.

Service level manager may be configured to identify any of a variety of different types of service level objectives in different embodiments. Service level objectives may initially be specified at a relatively high level using contracts or service level agreements between the customers of a service and one or more providers of the service. Such agreements may specify for example desired response times for defined types of transactions e.g. maximum delay between a submission of a stock trade order and the completion of the order desired job completion throughputs for various categories of tasks or jobs e.g. gigabytes backed up per hour from a branch office to a disaster recovery backup site desired reliability metrics e.g. data on a local disk of a customer s workstation is to be restored from a remote backup within two hours after a disk crash etc. Some service level agreements may also allow application users to specify different service level objectives on a per request or a per job basis from among a set of objectives defined in the agreement. The terms job task application job and application task may be used synonymously herein to represent a set of operations performed in response to a request from a client of one or more applications examples of tasks include a backup of a client file system or disk a transmission of a video or audio file an online banking operation such as a bill payment etc. The request for a task may originate from a human user e.g. a bank customer using a web based interface and or from another application or program e.g. an automated backup service in various embodiments.

When a particular task is initiated at an application at an endpoint the service level manager may be configured to detect a set of one or more specific service level objectives associated with that task such as a priority or a response time target e.g. on the basis of input provided by a requester using an interface such as an HTML form that triggers the task by looking up the service level objectives in a database using the requester s identity as a key etc. In addition after determining the specific objectives to be implemented in some embodiments the service level manager may be configured to communicate with one or more policy engines responsible for traffic management policies within network e.g. to determine the specific manner or format in which data packets should be marked or tagged to achieve the identified service level objectives and or to request that packets tagged with specific tags be given special treatment in network . Policy engines may be implemented by network service providers responsible for one or more of the network devices and may in some embodiments be resident at one or more of the network devices . Policy engines may be configured to issue directives or control messages to one or more network devices in order to implement various types of policies or rules and may in some embodiments provide application programming interfaces APIs allowing external entities such as service level manager to communicate with the policy engines. In one embodiment instead of communicating directly with policy engines service level manager may be configured to send requests targeted at the policy engines to an intermediary service such as HP OpenView from the Hewlett Packard Corporation and the intermediary service may be configured to transmit the request to the policy engines.

Intermediary services may be used for example to translate generic or network agnostic requests from service level managers into network specific requests in some embodiments. In one embodiment one or more scripts which may be termed notify scripts may be executed prior to and at the end of each application task and the scripts may be used by service level manager to communicate with policy engines to enable or disable support for desired service levels for the application task within the network.

In some embodiments the policy engine or engines may return a response either directly or via an intermediary service to the service level manager indicating whether the request for special treatment for a given task s data packet stream is rejected or accepted. The service level manager may be configured to log rejections e.g. in a log file or database stored in persistent storage at an endpoint received from policy engines in some embodiments e.g. so that a record is kept of the service level actually provided by the network service provider responsible for the policy engine. In some embodiments service level manager may log additional interactions with the policy engines e.g. both acceptances and rejections of requests may be logged. The logged information may potentially be used for example to settle disputes about responsibilities for failures to meet service level objectives to determine whether service level agreements need to be modified or renegotiated and so on.

In some embodiments for example to reduce the load that might otherwise be generated at the policy engine as a result of large numbers of requests for service level objectives for different packet streams a number e.g. thousands of tags or service level indicators corresponding to various desired levels of service may be allocated or set up in advance. In such embodiments a selected pre allocated tag may initially be inserted into the data packets of a particular data stream and if the level of service obtained using the initial pre allocated tag is found to be insufficient a different pre allocated tag indicating a higher level of desired service may then be inserted in subsequent packets of the stream in real time without requiring a communication with the policy engine to implement the change in tags. Such a pre allocation scheme may reduce the overall amount of communication required with policy engine e.g. the set of pre allocated tags may be modified or changed in coordination with the policy engine only during maintenance windows rather than during period of normal operation making the set of tags available and at least part of the operation of policy engine effectively static between maintenance windows. In addition pre allocation of tags may also help to simplify billing users of the tags may simply be charged based on the numbers of packets sent using the different pre allocated tags. In one example of the use of pre allocated tags the packets corresponding to a particular backup operation or job may initially be tagged using relatively low priority pre allocated tags. If the time window in which the backup operation is to be completed is about to expire however and the backup operation is not yet completed a different pre allocated tag indicating a higher priority may be used. The change in priority may be logged or recorded for example to help in re negotiating subsequent contracts or service level agreements. In another example different pre allocated tags may be used for packets at different stages of an online auction bid interaction e.g. as the time at which an auction for a particular item is scheduled to be completed approaches higher priority pre allocated tags may be used than were used at earlier stages of the bid.

In one embodiment the service level manager may cache information on how service level objectives are to be mapped to packet level service level indicators or tags so that a separate communication with a policy engine may not be needed for each task . The marking or tagging of the data packets to indicate the desired service level may be done at various levels of a software stack in different embodiments for example data packets may be marked at a network filter driver layer between a TCP IP stack and a network card driver layer as described below in further detail in conjunction with the description of . Once the tagged data packets enter network the manner in which the tags are processed at the various network devices may differ depending for example on the specific tagging techniques used the networking protocol implemented in network etc. In some cases for example where MPLS is used a network device such as a router may examine each incoming data packet for the presence of a tag indicating service level objectives use the tag if one is found to make a decision such as a selection of a route and replace the existing tag with a new tag. In other embodiments tags may remain unchanged within the data packets during transmission e.g. while one or more network devices may be configured to read the tags and take actions in response to the contents of the tags the tags may not be modified along the route taken to the destination endpoint. In some embodiments the receiving endpoint e.g. D may be configured to track how effectively the desired service level objectives were met e.g. the data packets may include timestamps indicating when they were transmitted from a sending endpoint such as A and a service level manager at a receiving endpoint may log the actual time taken for the transmission. In addition to the service level indicators included in the data packets themselves other factors such as the current level of congestion on one or more network links or a detection of a network or link failure may also be used in providing different levels of service such as selecting different routes for various data packets in some embodiments at a given network device .

It is noted that in various embodiments the granularity at which service level objectives are associated with application data to be transmitted over a network may differ. For example in some embodiments each task job or transaction as defined by the application or applications may potentially have a different service level objective associated with it. In other embodiments all the tasks for a given application such as a backup application a distributed database management application or an enterprise resource planning ERP application may be given the same priority or service level objective. Even in embodiments where different service level objectives may be supported for different tasks of an application the actual service level objectives selected for a plurality of tasks may be identical in some cases. In one embodiment service level objectives may also be set on a per connection or per port basis e.g. based on a sender address a receiver address or a combination of sender and receiver addresses . It is also noted that service level manager may be configured to generate and insert tags indicating service level objectives for data packets even in embodiments where the network is managed or owned by the same corporate entity that owns or manages the endpoints i.e. the techniques described above may be used independently of the ownership or control of the various elements illustrated in . In some embodiments in addition to including service level objective information in data packets sent over network service level manager may be configured to coordinate management of one or more non network resources in order to achieve the desired levels of service. For example service level manager may be configured to use priority scheduling at CPUs and or storage devices at endpoints . Coordinating the use of multiple types of resources to achieve desired service level objectives may help to prevent problems such as priority inversion where for example a first task A may be given a higher priority than a second task B at one resource e.g. in network but may be prevented from making as much progress as it could because the second task B is given a higher priority at another resource such as a CPU .

An MPLS enabled network may support any of a variety of underlying communication protocols or a combination of protocols. In some IP based MPLS enabled networks the label may be inserted prior to the IP header. In ATM MPLS enabled networks Virtual Path Identifier VPI Virtual Channel Identifier VCI addressing may be used as the label. In Frame Relay networks the DLCI Data Link Connection Identifier may be used as the label. In some embodiments instead of being explicitly specified as a set of bits labels may be at least partly implicit e.g. in some types of optical networks the wavelength of the transmission may potentially be used to indicate the label. A single LSP may cross multiple Open System Interconnect OSI Layer 2 transports such as ATM Frame relay or Ethernet in some embodiments. MPLS is designed to enable end to end circuits with specific performance characteristics across any types of transport medium eliminating the need for overlay networks or control mechanisms restricted to a specific Layer 2 transport medium. Any of a variety of techniques may be used to generate and examine MPLS labels in different embodiments. An edge LSR H at which data packets leave the MPLS enabled network may be configured to remove MPLS tags labels in some embodiments e.g. to avoid potential confusion when the packets reach devices that do not support or understand MPLS tags. It is noted that while illustrates an application client and an application server as example endpoints various other types of endpoints that may not necessarily represent a client server relationship e.g. endpoints implementing peer to peer relationships may also utilize the functionality of service level manager in an MPLS enabled network.

In some embodiments IPv6 IP version 6 flow labels may be used either alone or in combination with other mechanisms such as MPLS labels to indicate desired service levels associated with data packet streams. The IPv6 flow label specification as specified in RFC Request For Comments 3697 by the IPv6 Working Group of the Internet Engineering Task Force IETF defines the generic requirements for flow state establishment using flow labels. According to the specification a flow is a sequence of packets e.g. packets A of sent from a particular source to a particular unicast anycast or multicast destination that the source desires to label as a flow. A flow may comprise all packets in a specific transport connection or a media stream but does not necessarily have to be mapped to a transport connection. IPV6 source nodes supporting flow labeling are required to label known flows e.g. TCP connections or application streams even if the source node itself does not require flow specific treatment. A 20 bit label flow field in the IPv6 header may be used to label the packets of a flow. A flow label of zero may be used to identify packets that are not part of any flow. The triplet of flow label source address destination address may be used to identify the flow to which a particular packet belongs. IPv6 flow labels may be retained during transmission i.e. the labels generated at a source may be delivered unchanged to a destination . Service level manager may be configured to generate appropriate labels conforming to the IPv6 flow label standards in various embodiments to indicate desired service level objectives for data packets and network devices may implement various specific techniques to support IPv6 flow labeling. Additional details on the specific requirements of IPv6 flow labeling may be found in the specifications related to RFC 3697 published by the IETF. IPv6 flow labels may be used in combination with other service level objective specification techniques such as MPLS tags in some embodiments. Other techniques such as Virtual LAN identifiers Quality of Service QoS bits etc. may also be used either in isolation or in combination with one another to specify service level objectives for data packets in various embodiments.

In some embodiments the dynamic tagging scheme for data packets described above may be used in environments where enterprise network traffic enters a telecommunication carrier managed cloud via an optical or TDM Time Domain Multiplexing circuit based device. In such embodiments the dynamically inserted tags may be used to provide application awareness when the traffic reaches a digital cross connect or optical switch that switches traffic at VT1.5 1.5 Mbps or STS 1 52 Mbps in conjunction with techniques such as Virtual Concatenation VCAT and Link Capacity Adjustment Scheme LCAS . For example burst intensive applications sensitive to time of day considerations i.e. applications that require different levels of service depending on the time of the day may be able to take non contiguous or stranded STS 1s and logically aggregate them into a single virtual group so that the transport layer channels in the core of the network provide a bandwidth group that better correlates with large access bandwidth that is enabled by Gigabit Ethernet RPR Resilient Packet Ring etc. Tagging of data packets as described above may allow the network to implement such logical aggregations dynamically and or with greater application awareness than may be possible using current techniques in which for example a phone call or other communication may be needed from the enterprise customer to the carrier to implement the aggregation .

Inbound network traffic may flow in the opposite direction at a destination endpoint packets received from the network may be passed through the NIC to the network card driver . Before the incoming packets reach the TCP IP stack in some embodiments network filter driver layer may remove part or all of the tags indicative of the service level objectives. The data packets may then be assembled as needed in the TCP IP stack and the operating system before being passed to the application layer at the destination endpoint .

In some embodiments the application layer may be configured to trigger the operations of service level manager including network filter driver layer e.g. an application may determine whether or not its data packets or the data packets of a specific job or task are to include service level objective indicators and to activate service level manager if indicators are to be included. In some embodiments the service level objective indicators may be inserted into the data packets even if the underlying network is not guaranteed to support differential levels of service e.g. in one environment service level manager may be configured to make a best effort to send data packets using network devices that implement support for packet level service level objectives but if such devices are not available due to a temporary network outage or for some other reason the tagged data packets may actually be transmitted over a path on which network devices treat all packets equally.

The service level manager may be configured to dynamically generate a service level indicator representing the service level objectives for a particular packet or a stream of packets block include the indicator in the packet or packets block and transmit the packets into the network block . On receiving the tagged data packets one or more network devices may be configured to take specific types of actions e.g. select a specific next hop of a route from among a set of alternative hops based on the service level indicators. In some embodiments a service level manager may be configured to track the extent to which the desired service level objectives are being met e.g. on the basis of acknowledgments received from a destination endpoint that indicate how long it took for packets to be transmitted for a given task and to modify the service level indicators included in subsequent packets for the task. For example in one implementation service level manager may be configured to assign priority levels between 0 and 9 to data packets where a higher priority level indicates a shorter response time objective. If assigning a priority level of 5 to the first few packets of a task does not result in the desired objectives being met the priority level may be raised to 6 or higher for subsequent packets or a policy engine may be contacted to indicate that the desired service levels are not being achieved and to take corrective actions . At any given point in time multiple packet streams corresponding to different tasks performed using a given application may be being transmitted across network . In the example where priority values between 0 and 9 are assigned to data packets a transmission of a first stream of packets with priorities set to 2 on behalf of a low priority task may overlap at least partly in time with a transmission of a second stream of packets with priorities set to 8 for a higher priority task performed using the same application. Packets for different tasks may be sent from the same port or from different ports some of which may be dynamically selected at the sending endpoint. Similarly packets for different tasks may be received at the same port or at different ports at the receiving endpoint.

As shown in block of the service level manager may be configured to provide a user interface to map selected applications and or jobs to service level objectives. In response to input received via the interface block new mappings or modifications to existing mappings may be stored e.g. in a mapping database. For each application job that is started the service level manager may be configured to consult the existing mappings to determine whether any additional operations are required to meet the job s service level requirements block . Some jobs may not need any special treatment e.g. if they are classified as low priority jobs. In the depicted embodiment if additional operations are needed to meet the job s service level objectives service level manager may be configured to use a network agnostic application programming interface API to specify the objectives block . The network agnostic request may then be translated into a network specific request or a set of network specific requests e.g. at an intermediary translation service before being sent to a policy engine and or to one or more network devices block .

In some embodiments network agnostic techniques may also or instead be used by service level manager for purposes other than communication with policy engines . For example in one embodiment data packets may be tagged initially in a network agnostic manner by service level manager to indicate desired service level objectives and the network agnostic tags may be translated at an intermediate service into network specific tags before the packets are actually transmitted over the network.

In one embodiment service level manager may be configured to associate service level objectives with data packets based on external parameters that may not be specific to a given task e.g. data transmissions initiated during peak working hours e.g. between 8 AM and 6 PM in a given time zone may be given priority over transmissions initiated during non peak working hours. Service level manager may provide an interface such as a configuration file to specify parameters to be used in determining the service level objectives in some embodiments. In one embodiment the specific network ports used for data transmission on behalf of various tasks performed using an application at an endpoint may be selected dynamically so the service level indicators to be included in data packets by service level manager may not be statically determined on the basis of specific port numbers or port identifiers alone.

In addition to service level manager memory and or storage devices may also store operating systems software and or software for various applications such as a backup manager a replication service an e mail service a database management service an ERP application etc. in various embodiments. In some embodiments service level manager may be included within an operating system a storage management software product or another software package while in other embodiments service level manager may be packaged as a standalone product. In some embodiments part or all of the functionality of service level manager may be implemented via one or more hardware devices e.g. via one or more Field Programmable Gate Array FPGA devices or in firmware.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

