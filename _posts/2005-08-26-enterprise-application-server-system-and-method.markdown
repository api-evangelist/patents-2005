---

title: Enterprise application server system and method
abstract: An application server system includes a main server and one or more clients controlled by the main server. The clients execute one or more applications in one or more virtual client environments. Each virtual client environment includes a lightweight server operable to instantiate one or more application objects in response to receiving configuration information from the main server. The application objects are each associated with an application being executed at the client. The application objects store operating information related to the associated application. The lightweight server is further operable to receive operating information from the application objects relating to the operation of the associated applications and to communicate the received information to the main server. Furthermore, the lightweight server is operable to control the applications based on at least one of: (i) the configuration information received from the main server and (ii) further instructions received from the main server after instantiation of an application object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332479&OS=08332479&RS=08332479
owner: Hewlett-Packard Development Company, L.P.
number: 08332479
owner_city: Houston
owner_country: US
publication_date: 20050826
---
This disclosure relates generally to the field of software operational environments and more specifically to an enterprise application server system and method.

Particular business operations require numerous applications to perform the various functions of the business or a particular aspect of the business . A problem arises in such circumstances since all of these various applications need to be controlled and handled with each application potentially having its own way of handling operation and bookkeeping mechanisms synchronization multiprocessing timing in addition to the associated business tasks. In addition the various applications may have separate instances each customized for a particular customer of the business. The individual management of these applications leads to a lack of productivity since the business functionality of the applications is intertwined with operating system dependent tasks in the code of each application. A primary obstacle is the complexity inherent to the operating conditions of the system.

Existing application server technologies such as Java 2 Platform Enterprise Edition J2EE and Microsoft s Net are intended to provide an infrastructure for network distributed applications that share data across an enterprise. However neither of these technologies provide a way to control the applications from the infrastructure. Furthermore neither help to discharge the application programmer from the tasks of the system programmer or offer a unified technique that is not application related for handling the applications bookkeeping and monitoring requirements.

An enterprise application server system and method are provided. According to one embodiment an application server system includes a main server and one or more clients controlled by the main server. The clients execute one or more applications in one or more virtual client environments. Each virtual client environment includes one or more application objects that are each associated with an application being executed at the client. The application objects store operating information related to the associated application. Each virtual client environment also includes a lightweight server operable to instantiate the application objects in response to receiving configuration information from the main server to receive operating information from the application objects relating to the operation of the associated applications and to communicate the received information to the main server. Furthermore the lightweight server is operable to control the applications based on at least one of i the configuration information received from the main server and ii further instructions received from the main server after instantiation of an application object.

Certain embodiments of the present invention may include one or more of the following technical advantages. For example the enterprise application server EAS system according to particular embodiments supports easy assembling deploying and maintenance of scalable multi tier applications across an enterprise. Such an EAS system is server based and helps separate the business functionality that is implemented in the application modules of the system from the management of the application modules. The EAS system uses an additional level of abstraction meta information that allows the independent definition of both an application s business functionality and its deployment.

This architecture leads to several advantages. For example since the business logic is isolated from services and platform related code this discharges developers from deployment and reliability issues creates higher reliability of overall system and allows applications to be more easily deployed in different environments. In an environment such as an enterprise that needs to run a large number of different applications the ability to re use service and deployment tools can lead to a considerable savings of programmer time and a very short time to market due to the available flexibility. Furthermore the EAS architecture described above provides hardware independence and scalability with respect to the applications data and persistency model. In addition the architecture provides higher availability of the overall system through integrated services for state maintenance multi level monitoring business dependent activity value collections reporting and quality measurement. The system also provides fault independence via single exit point improved system performance via definition of data processing units for applications and clustering fail over and load balancing features.

It will be understood that the various embodiments of the present invention may include some all or none of the enumerated technical advantages. In addition other technical advantages of the present invention may be readily apparent to one skilled in the art from the figures description and claims included herein.

From the perspective of the operating system the EAS system is seen as a set of processes such as Lisp list processing language processes running on a distributed network. From the perspective of the application side the system is seen as an operating system like infrastructure providing access to various services. From the perspective of the EAS system the applications are seen as data on which the system acts according to a defined protocol. In particular embodiments the EAS system is a set of Lisp worlds running distributed on a network of computers. From outside the operating system a world is seen as one of the programs running on a computer. From inside the operating system a world is an environment that contains programs threads and data that are self contained. The worlds can be replicated and tuned for specific uses. Each of these worlds runs programs used as an infrastructure for the execution of the applications that use this infrastructure as if it were the operating system itself. The infrastructure is itself programmable separately from the applications. The worlds contain both the infrastructure and the applications. The applications follow a protocol that allows their behavior to be controlled from the infrastructure level. Although Lisp is used as an example the EAS system may be implemented using any suitable general purpose programming language such as C Java Delphi SmallTalk or C that offers multiprocessing and object orientation with multiple inheritance. In addition a Lisp implemented EAS system may also handle applications other than Lisp applications such as C or Java application provided that it follows the appropriate protocol and interfaces.

The EAS system includes several components that cooperate in order to provide application handling. These components include a main server that manages the distribution of virtual client environments over various client computers . The client computers are seen by the main server as a pool farm of computers on which the virtual client environments may be executed and managed. Each virtual client environment is used to run one or more applications for users associated with a client computer . Multiple distinct virtual client environments may be executed in the same client computer with completely different applications and different settings. In particular embodiments each virtual client environment may be a separate Lisp world that is managed by the main server . As described in further detail in conjunction with the applications running on a virtual client environment are controlled by a component called a lightweight server that handles application objects associated with each application. The application objects are data elements that are tied to the applications. The application objects store all the application related information in order for the EAS system to properly handle the application. Each application may run one or more processes for example tasks or threads that have an associated data element the process companion. Each process is tied to its companion so that its activity may be controlled and monitored by actions applied to the process companion by the lightweight server. The application object may perform bookkeeping of the processes running via a table identifying the process companions.

At any time a new application class can be defined by sub classing from the basic application class and a specific EAS handling protocol can be assigned to the new class. Applications may be characterized at the meta information level using application objects by 

The main server performs load balancing by attempting to keep the virtual client environments uniformly distributed over the client computers . Furthermore if one of the client computers crashes then the main server redistributes the virtual client environments that used to run on that computer to the remaining client computers thus providing failure protection . The main server has an associated main server database that may be used to store data used by the main server to manage the various virtual client environments and application instances running in the virtual client environments as described in detail below. The database may typically be incorporated in the main server however in particular embodiments the database may be external to the main server .

The EAS system may also include one or more spare main server systems that may be used as needed for back up purposes. All of these various components of the EAS system are coupled via suitable wired or wireless network links. These network links may be a part of any suitable network such as a local area network LAN a metropolitan area network MAN a wide area network WAN and or the Internet. Furthermore the network links coupling the components of the EAS system may themselves be coupled to one or more other networks . The main server and client computers may communicate via a messaging subsystem that allows communication between the components independent of their physical location.

The main server and client computers may be implemented using any suitable computing devices that may be physically distributed any appropriate distances from one another for example across an enterprise s buildings in the same city or across the world . In particular embodiments the main server runs on dedicated hardware with special measures taken to prevent it from hardware failures. For example the main server may implemented so as to have CPU and power supply redundancy and data back up for example using RAID disks . Such precautions are due to the fact that the main server or associated components such as database stores all of the deployed software components in the EAS system of particular embodiments as well as all data created and used by all running applications. However in such embodiments the main server does not run any applications except server software which coordinates all of the client computers and provides the services needed by the client computers . The client computers in these embodiments do not store any deployed EAS software components locally except for shell scripts and no applications use the local storage of the associated client computer for any created or used data. Instead the client computers run the applications as instructed by the main server and use the disk space made available to them on the main server . This ensures interoperability between client computers .

As illustrated in the example main server has several functional components to implement the features described above. For example the main server includes an main server kernel that provides communication of information between the main server subsystems and the client computers and their associated virtual client environments. The kernel also loads and starts the various main server subsystems. The kernel uses the database to maintain various information on the EAS system . For example the kernel may maintain a list of the available client computers the virtual client environments running on the client computers the applications being executed on the virtual client environments the processes running in the virtual client environments and the communication channels to these processes.

In addition the example main server also includes several core subsystems . These include an application manager a resource manager a timer service and a locator service . The application manager maintains a static list which may be stored in the database which specifies for each user customer of the EAS system what applications must run which pairs of applications may not run in the same virtual client environment and how many virtual client environments should run each application if not just one virtual client environment . The application manager may also maintain an estimation of the number of client computers that are normally available to run applications. Based on this information the application manager controls the configuration of the client computers available to it both at start up and as operational conditions change in order to promptly adapt to the operational conditions. Specifically the application manager dispatches applications to available virtual client environments. For example a new application may be dispatched to an idle virtual client environment or if not virtual client environments are idle to a newly created virtual client environment on the least used client computer . To perform its control functions the application manager may construct maintain and use a dynamic database of information that includes a list of running and connected client computers a list of the one or more virtual client environments of each client computer for example identified by its client computer name and its system port and its attributes for example the user on behalf of which the virtual client environment runs and the list of applications run by the virtual client environment and the average CPU usage statistics for each client computer .

The main server may provide a number of services to the applications running on the client computers . In embodiments of the EAS system implemented using Lisp the valid requesters of such services may be the Lisp processes. Every such requester may be identified with one or more attributes such as the associated virtual client environment the Lisp process name of the requester the process type and the associated user.

One type of service that is provided is resource management which is provided by the resource manager . A resource is a server owned object that is named by the applications with a string and constructed by the server with that string name upon an application request. The following example services may be offered for a named resource 

The main server may also provide a timer service . The timer service provides timer functions which are executed as needed. For example the following services may be offered 

Furthermore the main server may provide a locator service . The locator service allows a process to locate processes of a certain type in another virtual client environment than its own on the same or another client computer . The locator service is used to match processes which then communicate with each other by their own means For example using a messaging subsystem . For example the following services may be offered 

In addition the main server may include other subsystems than those described above. For example the main server may include an operator interface to allow an operator to access and control the main server . Any other suitable subsystems may also or alternatively be included.

The lightweight server is responsible for handling all the application related activities and provides an interface to declare create start stop update describe and monitor applications. This interface consists of specific messages for communication with the main server and of an application programming interface API exposed to the applications which allows for example the applications to send service requests reports and other information to the main server . The lightweight server also implements the concept of job . A job defines the list of applications that a lightweight server runs for a particular user. Once a virtual client environment is registered with the main server the main server sends a work message with all the job related information that is transmitted to the lightweight server via the dispatcher . Upon receiving the work message the lightweight server may then perform the following steps to run one or more applications identified in the work message using the virtual client environment . First the lightweight server initializes the name of the job and of the user this makes the job and user specific locations such as files and directories in the main server file system available to the virtual client environment . The lightweight server then loads specific information needed to configure the applications and starts system related processes processes used for monitoring tracing gathering statistics etc. . Then for each application identified in the job the lightweight server instantiates an application object an instance of the application according to the received configuration information starts the application and notifies the main server that the application has been started. Each application object will have at least a main process and may also have one or more additional processes two additional processes and are illustrated as an example . Each process may have an associated function. Furthermore although each virtual client environment and corresponding lightweight server is illustrated as running only one application in any suitable number of applications and associated processes may be run in a single virtual client environment .

After starting the application object and running the main process and possibly additional processes the lightweight server manages the application according to the defined configuration and processes message received from the main server associated with the application. During this time the lightweight server can provide information about the user applications and processes associated with the virtual client environment to the main server . For example the lightweight server updates the information about the state of the applications and sends messages to the main server in order to keep the centralized information consistent. Control of the applications is maintained via a set of methods defined in the lightweight server and application objects that allow starting and stopping timing dynamic re configuration tracing monitoring and statistics collection on an application specific basis without intervention in the code of the application. The application handling may further include specialization of the methods that implement the lightweight server functionality on application object subclasses thus allowing the way an application or a set of applications is deployed to be changed without any intervention in the application code.

From the perspective of the application programmer the lightweight server presents an API that abstracts the operating system interface as well as the centralized services offered by the main server . For example the lightweight server API may allow the programmer to access user and application specific locations in the file system start additional processes to control multiprocessing send notification messages to provide communication between applications located on different virtual client environments and collect activity information about applications.

Every application process has an associated process companion. For example the main process Process 1.1 has an associated process companion Companion 1.1 the first additional process Process 1.2 has an associated process companion Companion 1.2 and the second additional process Process 1.3 has an associated process companion Companion 1.3 . Each process is tied to its companion so that its activity may be controlled and monitored by actions applied to the process companion by the lightweight server . When an application is started the lightweight server starts the application s main process. Before the process is started it is first allocated its companion and the link between the two is registered.

The main function which is declared as the value of an main start function initialization argument provided to define application macro is not started directly. Instead it is wrapped into a start main application method of the application object. This method provides the process top level loop in which the main start function is called. This means that the preset function of every application s main process is the same and only the main start function which is called inside differs from one application to another. The start main application method is not exported and therefore not accessible for explicit calls from the application code. However since the start main application method is specialized on the application object it allows overloading for specialization on the subclass that is defined by the define application macro. This is a powerful mechanism that allows consistent discrimination in the handling of different application types without changes in the application s code. A similar mechanism is provided for the additional processes with the exception that the additional processes main function is not wrapped into a loop. Thus when an additional process function exits the process is de registered its companion is released and the process dies.

Although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

