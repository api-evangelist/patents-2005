---

title: Integrating applications in multiple languages
abstract: A method, system, and computer readable medium for integrating applications in multiple languages comprises receiving properties related to an application in an original language, importing source files related to the application, receiving classes related to the source files, mapping data types related to the classes, receiving properties related to an application in a target language, and generating integration classes related to the data types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797688&OS=07797688&RS=07797688
owner: 
number: 07797688
owner_city: 
owner_country: 
publication_date: 20050322
---
The present application is related to U.S. patent application Ser. No. 11 086 121 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING AN ORIGINAL APPLICATION WITH A REMOTE APPLICATION U.S. patent application Ser. No. 11 086 211 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING APPLICATIONS IN MULTIPLE LANGUAGES U.S. patent application Ser. No. 11 086 120 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR INTEGRATING AN ORIGINAL LANGUAGE APPLICATION WITH A TARGET LANGUAGE APPLICATION and U.S. patent application Ser. No. 11 086 102 entitled SYSTEM METHOD AND COMPUTER READABLE MEDIUM FOR NORMALIZING SOURCE FILES IN MULTIPLE SOFTWARE LANGUAGES the disclosures of which are incorporated in their entirety by reference herein.

The present invention is related to integrating applications and more specifically to a system and method for integrating applications in multiple software languages.

Various limitations are associated with integrating applications such as difficulty in sharing the structure of application data and application programming interfaces classes . As such it is cumbersome for an application written in one language to access a functionality provided by an application written in a different language. It is currently tedious to integrate these applications because a common structure must be defined in a third language such as Extensible Markup Language Common Object Request Broker Architecture Event Definition Language etc. .

The present invention overcomes these problems and limitations by providing a system and method for integrating applications in multiple software languages.

The present invention comprises a system method and computer readable medium for integrating applications in multiple software languages. In one embodiment a method for integrating applications in multiple software languages comprises receiving properties related to an application in an original language importing source files related to the application receiving classes related to the source files mapping data types related to the classes receiving properties related to an application in a target language and generating integration classes related to the data types.

In anther embodiment a method for integrating applications in multiple software languages comprises receiving properties related to an application in an original language importing source files related to the application receiving classes related to the source files mapping data types related to the classes and generating integration classes related to the data types.

In a further embodiment a computer readable medium comprises instructions for importing source files related to an application in an original language receiving classes related to the source files mapping data types related to the classes receiving properties related to an application in a target language and integrating the original language application and the target language application.

In yet anther embodiment a system for integrating applications in multiple software languages comprises a source language module comprising an adapter and a target language module adapted to invoke a method on a proxy class and send a message indicating an intent to invoke the method on the source language module wherein the adapter receives the message and invokes the method on the source language module.

If they are not selected the software and or user are prompted to select the classes methods and other constructs in the program at step . If they are selected it is determined if mapping for all complex user defined types is provided at step . In one embodiment the software program verifies the selected constructs against all target languages. The software program identifies the mapping of the constructs in the original source language to the target language. If the mapping is not provided the software and or user are prompted to perform the mapping for all complex user defined types used in parameters return types and exceptions in step . In one embodiment if the construct is complex in nature and has no equivalent in a target language the software program prompts the user to provide a mapping for the construct. If the mapping is provided it is determined if any target languages are selected at step . If they are not selected the software and or user are prompted to select the target languages at step . If they are selected software is generated to connect the source language application with the target language application s at step . The generated code consists of adapters on the source language side to export existing source language application objects. The generated code consists of proxies on the target language side to provide access to source language application objects.

In one embodiment a method for integrating applications in multiple languages comprises receiving properties related to an application in an original language importing source files related to the application receiving classes related to the source files mapping data types related to the classes receiving properties related to an application in a target language and generating integration classes related to the data types wherein the original language and the target language are at least one of a following language a different language a same language and a related language and wherein the generating includes integrating the original language application and the target language application. The method further comprises receiving a plurality of properties related to a plurality of applications in a plurality of original languages and target languages wherein the data types related to the target language are equivalent to the data types related to the original language.

In the method the importing includes normalizing the at least one language into a common representation wherein the common representation includes a metadata structure. The method further comprises receiving methods related to the classes wherein the methods are selected and wherein the classes are selected. The method also comprises providing mapping for fundamental types in the at least one language wherein the mapping is provided for at least one of a following class non complex classes and complex classes wherein the mapping for the non complex classes are provided by default and wherein the mapping for the complex classes are provided by a user.

In the method the integration classes includes at least one of a following element adapter classes related to the original language proxy classes related to the target language data types related to the target language streamers related to the target language and streamers related to the original language. Also the data types related to the target language are equivalent to the data types related to the original language.

The present invention also includes a method for integrating applications in multiple software languages comprising receiving properties related to an application in an original language importing source files related to the application receiving classes related to the source files mapping data types related to the classes and generating integration classes related to the data types.

The present invention further includes a computer readable medium that comprises instructions for importing source files related to an application in an original language receiving classes related to the source files mapping data types related to the classes receiving properties related to an application in a target language and integrating the original language application and the target language application.

The input file is imported into an application which is a software program implementing the current invention that generates files or classes on an original or source application side and files or classes on a remote or target application side . The streamer class is generated for Class B which is used as the return type for the getB method in Class A while the streamer class generated for Class C is used as the type of the member in Class A. The Adapter class is generated for Class A that provides target language applications to invoke the getB method and access the member of original source application objects. The input file the application the source application side and the target application side may fully and or partially reside on a client a server and or a client and a server.

A proxy class related to the target language sends a request to an adapter class related to the original language and a response and an exception are received by the proxy class . The request the response and the exception are sent generally based on data types and related to the target language streamers and related to the target language and streamers and related to the original language. More specifically the proxy class is generated for the Class A to be used in the target language applications as a proxy for the original source application objects. The proxy class contains a getB method an access for a member and a mutator for the member.

The Class B is an equivalent class for Class B in the original source language that forms the return type of the getB method in the proxy while the Class C is an equivalent class for Class C in the original source language that is used in the accessor and mutator for the member. The streamer classes and are streamer classes generated for the generated Class B and Class C respectively.

The target language application communicates with the source language application by invoking the getB method on the proxy class. The method invocation causes the generated code to create a data packet containing the intent of the target language application to invoke the getB method on the source language application object. The packet is transferred to the source language application . The source language application adapter receives the packet and invokes the method on the original source language application object. The return data of the method is returned as a response packet to the target language application . If an exception occurs during the invocation of the method on the original source language application object the exception data of the method is returned as a exception packet to the target language application .

In one embodiment a system for integrating applications in multiple software languages comprises a source language module comprising an adapter and a target language module adapted to invoke a method on a proxy class and send a message indicating an intent to invoke the method on the source language module wherein the adapter receives the message and invokes the method on the source language module wherein the target language module is adapted to receive a response to the message and wherein if an exception occurs during the invocation of the method on the source language module the target language module is adapted to receive an exception message.

Although an exemplary embodiment of the system and method of the present invention has been illustrated in the accompanied drawings and described in the foregoing detailed description it will be understood that the invention is not limited to the embodiments disclosed but is capable of numerous rearrangements modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims. For example the functionality performed by the input file the application the source application side and the target application side can be performed by one or more of the input file the application the source application side and the target application side in a distributed architecture and on or via any electronic device. Further such functionality may be performed by depicted and or un depicted contents of the input file the application the source application side and the target application side .

