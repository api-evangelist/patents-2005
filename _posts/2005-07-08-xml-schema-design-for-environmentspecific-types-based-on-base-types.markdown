---

title: XML schema design for environment-specific types based on base types
abstract: XML Schema Designs for environment-specific types based on XML base types are disclosed. The invention provides a series of “base types” in the XML Schema. Each base type is in an environment-specific XML Schema namespace that disambiguates the environment's types from all other types defined by any other environment. The XML Schema Design then defines the final type as an anonymous type, derived from the environment-specific base type. The base type is defined with any XML Schema type facets that apply to all derivatives of the base type, and the anonymous final type is defined with additional XML Schema type facets to fully describe the type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930680&OS=07930680&RS=07930680
owner: Microsoft Corporation
number: 07930680
owner_city: Redmond
owner_country: US
publication_date: 20050708
---
Generally the invention relates to XML schema designs. More particularly the invention relates to an XML schema design for environment specific types based on base types.

In designing an XML schema it is often desirable to define one or more environment specific base types. As used herein the term environment specific base type refers to a static type for use in a particular environment. The term environment refers to a programming domain such as SQL server c etc. Different programming domains typically have their own type systems.

Often when moving data to XML environment specific type information is simply thrown away. For example if data is being exported from Microsoft SQL Server and the type of the data is NVARCHAR 256 in the SQL Latin1 General Cp437 BIN collection the output schema might simply specify the output type information as xsd string. In this case the recipient of such a result would not have any type information available in order to apply environment specific processing to the data and would not for example be able to properly maintain the sort order for the data when it is displayed in a list with other data. Alternatively the data might be exported with type annotations. In this case it might be typed as xsd string and an additional annotation of sqltypexsd sqltypedecl NVARCHAR 256 SQL Latin1 General Cp437 BIN might be added. The problem with this is that it creates two separate parallel type systems and does not describe the types using a derivation system such that behavior associated with a base type can be inherited by derived types. Another option would be to define a set of static XML type which describe all possible environment specific types. The problem with this is that the set of all possible environment specific types is enormous and attempting to define and communicate a static set of all such types would be prohibitively expensive. For example consider if NVARCHAR can have lengths between 1 and 4096 and if there were 32 known collations. In this case there would be 4096 32 131 072 distinct type permutations for NVARCHAR alone.

It would be desirable therefore if there were available XML schema designs for environment specific types based on base types.

The invention provides a series of static base types in the XML Schema. Each base type is in an environment specific XML Schema namespace that disambiguates the environment s types from all other types defined by any other environment. The XML Schema Design then defines the final type on an as needed basis as an anonymous type derived from the environment specific base type. The base type is defined with any XML Schema type facets that apply to all derivatives of the base type and the anonymous final type is defined with additional XML Schema type facets to fully describe the type.

Using the example provided in the Background section an XML Schema namespace may be defined for Microsoft SQL Server. A type nvarchar may be defined in that XML Schema namespace. An anonymous final type may then be defined as deriving from the nvarchar base type and type facets describing the length and collation information.

An intermediate processor may be able to recognize the anonymous final types as being eligible for environment specific programming assistance by recognizing that they are declared as derivatives of the non ambiguous environment specific XML Schema namespace that was defined for that environment. An example of environment specific behavior which might apply to all instances of nvarchar would be handling of DBNull values. DBNull is an example of an environment specific behavior whereby the special value DBNull has specific semantics when comparing two values of type nvarchar.

It should be understood that a method according to the invention may apply not only to the XML Schema for Microsoft SQL Server but to any XML Schema where base types in an environment specific namespace are defined with XML Schema type facets and then anonymous final types are defined as derivatives of those base types.

Although not required the invention can be implemented via an application programming interface API for use by a developer or tester and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers e.g. client workstations servers or other devices . Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. An embodiment of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an example system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology compact disc read only memory CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data . RAM may contain other data and or program modules.

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the example operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client devices can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. An embodiment of the present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

One way to solve this would be to add an attribute to the definition of the type. provides example XML for an XML schema type definition with such an attribute. As shown the attribute could indicate that the type is a sqltypes string where the namespace sqltypes is an alias for a location e.g. an Internet location where type information can be found e.g. http schemas.microsoft.com . . . . Thus one could see this and infer additional information about the type. Another known approach is depicted in wherein an xs annotation XML schema facet is used to contain the annotation. Both of these mechanisms are compliant with the XML schema standard and both will be recognized by those skilled in the art as being in used in the industry today. This serves to demonstrate that this annotation mechanism has the problem of having ambiguous syntax and thus requires processors to either require one syntax over another or to generate and recognize multiple syntaxes all of which serves to cause interoperability problems.

A method according to the invention for defining an environment specific XML type may include defining an environment specific XML Schema name space. Preferably the environment specific XML Schema namespace is a unique namespace that disambiguates the environment specific type from any other types defined by any other environment. The namespace may be specific to a certain environment or programming domain. Examples of such a programming domain include a computer programming language such as C for example or a database query language such as SQL for example.

An environment specific XML base type which may be based on an XML base type may be defined in the environment specific name space. The environment specific XML base type may be defined within an XML namespace. Preferably the environment specific XML base type is defined with one or more XML Schema type facets that apply to any or all derivatives of the environment specific XML base type. The environment specific XML base type may be based on a non ambiguous XML base type. In the ideal case a static environment specific XML schema document would be created which declared all of the environment specific base types for a particular environment. The actual choice of which types to declare as base types would be based on decisions about the environment specific type system such that base types are chosen which naturally describe base types in that environment. For example the concept of some type of string is common to many environments with string types of specific lengths being used to describe particular instances of data. A static set of base types which included a generic string type would thus be natural while attempting to declare all of the possible string types with lengths included would obviously make the static environment specific type declaration so large as to be unwieldy.

As concrete types are needed for instances of XML documents anonymous environment specific XML type may be derived from the environment specific XML base type. The environment specific XML type may be defined with an additional XML Schema type facet to fully describe the environment specific XML type. One or more restrictions may be added to the environment specific XML type.

At step an environment specific XML schema namespace may be chosen. The namespace may be unique for the programming domain e.g. database . Thus the namespace may disambiguate the environment specific type from any other types defined by any other environment.

At step a set of one or more environment specific base types may be defined with that namespace. Preferably the smallest possible set of environment specific base types is defined such that all possible types for that environment domain can be described as derivatives of the environment specific base types.

At step an environment specific type may be derived from one or more of the environment specific base types. At step any necessary additional restrictions may be added to the environment specific type. An example of such an environment specific type definition is shown in . Such a type definition might include collation information for string types or a change to the DBNull behavior from the default for that type or restrictions on the range of values which might be contained within a type derived from a numerical type.

It should be understood that when dealing with a number of base types some of them will be more useful if described in shorthand. For example the fact that a restriction can be defined once and then later referred to is useful because the restriction need not be defined every time. Not only does this provide a shorthand description but the same mechanism also allows for domain specific recognition. Defining a type system using this type of mechanism may be valuable because it provides a number of advantages such as these in same mechanism.

The invention therefore solves at least two problems. First common types may be used as a shorthand and programming environments enabled to recognize domain specific types so they can add additional semantics. For example a type can be predefined and its attributes inherited by all of its derivations. Thus the invention provides a more manageable way of associating additional semantics for a particular environment and controlled size of the static schema to be defined. Additionally by using techniques according to the invention one can provide additional information to people who are consuming the XML schemas without disrupting those who do not recognize that the schema is specifically defined for a particular environment.

Thus there have been described XML Schema Designs for environment specific types based on XML base types. Though the invention has been described in connection with certain preferred embodiments depicted in the various figures it should be understood that other similar embodiments may be used and that modifications or additions may be made to the described embodiments for practicing the invention without deviating therefrom. The invention therefore should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the following claims.

