---

title: Architectural design for make to stock application software
abstract: Methods, systems, and apparatus, including computer program products, for implementing a software architecture design for a software application implementing a make to stock process. The application is structured as multiple process components interacting with each other through service interfaces, and multiple service interface operations, each being implemented for a respective process component. The process components include an Accounting process component; a Production process component; a Site Logistics process component; a Confirmation and Inventory process component; a Customer Requirement Processing process component; a Demand Forecast Processing process component; a Supply and Demand Matching process component; a Production Trigger and Response process component; an In-house Requirement Processing process component; a Sales Scheduling Agreement Processing process component; and a Demand Planning process component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402426&OS=08402426&RS=08402426
owner: SAP AG
number: 08402426
owner_city: Walldorf
owner_country: DE
publication_date: 20051230
---
The subject matter of this patent application relates to computer software architecture and more particularly to the architecture of application software for make to stock.

Enterprise software systems are generally large and complex. Such systems can require many different components distributed across many different hardware platforms possibly in several different geographical locations. Thus the architecture of a large software application i.e. what its components are and how they fit together is an important aspect of its design for a successful implementation.

The invention can be implemented as methods systems and apparatus including computer program products for implementing a software architecture design for a software application implementing a make to stock process. The application is structured as multiple process components interacting with each other through service interfaces and multiple service interface operations each being implemented for a respective process component. The process components include an Accounting process component a Production process component a Site Logistics process component a Confirmation and Inventory process component a Customer Requirement Processing process component a Demand Forecast Processing process component a Supply and Demand Matching process component a Production Trigger and Response process component an In house Requirement Processing process component a Sales Scheduling Agreement Processing process component and a Demand Planning process component.

The subject matter described in this specification can be implemented to realize one or more of the following advantages. Effective use is made of process components as units of software reuse to provide a design that can be implemented reliably in a cost effective way. Effective use is made of deployment units each of which is deployable on a separate computer hardware platform independent of every other deployment unit to provide a scalable design. Service interfaces of the process components define a pair wise interaction between pairs of process components that are in different deployment units in a scalable way.

Details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and in the description below. Further features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

As shown in the make to stock design includes four deployment units a Financial Accounting unit a Logistics Execution unit a Supply Chain Control unit and an Integrated Business Planning unit .

The Financial Accounting deployment unit contains an Accounting process component that records all relevant business transactions.

The Logistics Execution deployment unit includes three process components a Production process component a Site Logistics process component and a Confirmation and Inventory process component . The Production process component combines all the activities required to manage the production execution process on the manufacturing shop floor. Production requests are received from planning and are converted into production orders production lots and production tasks during the production preparation phase. The production order describes the production process. The production lot collects all actual data for the production process. The production tasks are used to dispatch self contained work items to the operators on the shop floor. During the production execution and finalization phases production confirmations are created which update inventory finance and planning.

The Site Logistics process component supports all preparing and execution tasks concerning internal inventory movements. The Site Logistics process component may also provide stock information and may enable decision making through exception and alert information. The Confirmation and Inventory process component combines all the tasks required to confirm inventory changes and provided activities.

The Supply Chain Control deployment unit includes six process components a Customer Requirement Processing process component a Demand Forecast Processing process component a Supply and Demand Matching process component a Production Trigger and Response process component an In house Requirement Processing process component and a Sales Scheduling Agreement process component .

The Customer Requirement Processing process component combines the tasks required for processing customer requirements and provides an interface to presales sales and services. The Customer Requirement Processing process component also receives the customer requirements prepares them and passes them on to Supply and Demand Matching as supply planning requirements

The Demand Forecast Processing process component collects all demand forecasts for further processing. For example a validation may be carried out or the requirements may be split over time. According to the results created by the demand forecast component the requirements are passed on to the supply and demand matching component as planned independent requirements.

The Supply and Demand Matching process component combines all the tasks necessary to ensure that sufficient material receipt elements exist to cover material demand while taking available capacity into account. The Supply and Demand Matching process component also collects all the various material demands from customer requirement processing in house requirement processing demand forecast processing and sales scheduling agreement processing.

The Production Trigger and Response process component provides an interface to production from a supply planning perspective. It contains all the tasks necessary for creating and changing production requisitions. Furthermore the Production Trigger and Response process component receives information about the production progress from production and updates the production requisitions and stock data according to this information

The In house Requirement Processing process component combines the tasks required for processing in house requirements and provides an interface to a Supplier Relationship Management solution from a Supply Chain Control view. The In house Requirement Processing process component collects all the in house planned independent requirements for which it triggers sourcing and substitution. According to the results of these tasks the requirements are passed on to Supply and Demand Matching process component as supply planning requirements.

The Sales Scheduling Agreement Processing process component combines all tasks required for the inbound processing of delivery schedules and the outbound processing of delivery schedule confirmations.

The Integrated Business Planning deployment unit includes a Demand Planning process component . The Demand Planning process component combines all the tasks required to anticipate future demand. This information may then be used for supply and capacity planning.

The Source of Supply Determination process component uses two business objects to determine a source of supply a supply quota arrangement business object and a source of supply business object.

Not explicitly represented in the figures is a foundation layer that contains all fundamental entities that are used in multiple deployment units. These entities can be process components business objects and reuse service components. A reuse service component is a piece of software that is reused in different transactions. A reuse service component is used by its defined interfaces which can be e.g. local APIs Application Programming Interfaces or service interfaces.

In contrast to a deployment unit the foundation layer does not define a limit for application defined transactions. Deployment units communicate directly with entities in the foundation layer which communication is typically not message based. The foundation layer is active in every system instance on which the application is deployed. Business objects in the foundation layer will generally be master data objects. In addition the foundation layer will include some business process objects that are used by multiple deployment units. Master data objects and business process objects that should be specific to a deployment unit are assigned to their respective deployment unit.

A process component of an external system is drawn as a dashed line process component drawn as icon . Such a process component is used to represent the external system in describing interactions with the external system however this should be understood to require no more of the external system that it be able to produce and receive messages as required by the process component that interacts with the external system.

Interactions between process component pairs involving their respective business objects process agents operations interfaces and messages are described as process component interactions which determine the interactions of a pair of process components across a deployment unit boundary i.e. from one deployment unit to another deployment unit. Interactions between process components are indicated in by directed lines arrows . Interactions between process components within a deployment unit need not be described except to note that they exist as these interactions are not constrained by the architectural design and can be implemented in any convenient fashion. Interactions between process components that cross a deployment unit boundary will be illustrated by the figures of this patent application these figures will show the relevant elements associated with potential interaction between two process components but interfaces process agents and business objects that are not relevant to the potential interaction will not be shown.

The architectural design is a specification of a computer software application and elements of the architectural design can be implemented to realize a software application that implements the end to end process mentioned earlier. The elements of the architecture are at times described in this specification as being contained or included in other elements for example a process component is described as being contained in a deployment unit. It should be understood however that such operational inclusion can be realized in a variety of ways and is not limited to a physical inclusion of the entirety of one element in another.

The architectural elements include the business object. A business object is a representation of a type of a uniquely identifiable business entity an object instance described by a structural model. Processes operate on business objects.

A business object represents a specific view on some well defined business content. A business object represents content which a typical business user would expect and understand with little explanation. Business objects are further categorized as business process objects and master data objects. A master data object is an object that encapsulates master data i.e. data that is valid for a period of time . A business process object which is the kind of business object generally found in a process component is an object that encapsulates transactional data i.e. data that is valid for a point in time . The term business object will be used generically to refer to a business process object and a master data object unless the context requires otherwise. Properly implemented business objects are implemented free of redundancies.

The architectural elements also include the process component. A process component is a software package that realizes a business process and generally exposes its functionality as services. The functionality contains business transactions. A process component contains one or more semantically related business objects. Any business object belongs to no more than one process component.

Process components are modular and context independent. That they are context independent means that a process component is not specific to any specific application and is reusable. The process component is the smallest most granular element of reuse in the architecture.

The architectural elements also include the operation. An operation belongs to exactly one process component. A process component generally has multiple operations. Operations can be synchronous or asynchronous corresponding to synchronous or asynchronous process agents which will be described below. An operation is the smallest separately callable function described by a set of data types used as input output and fault parameters serving as a signature.

The architectural elements also include the service interface referred to simply as the interface. An interface is a named group of operations. Each operation belongs to exactly one interface. An interface belongs to exactly one process component. A process component might contain multiple interfaces. In one implementation an interface contains only inbound or outbound operations but not a mixture of both. One interface can contain both synchronous and asynchronous operations. All operations of the same type either inbound or outbound which belong to the same message choreography will belong to the same interface. Thus generally all outbound operations to the same other process component are in one interface.

The architectural elements also include the message. Operations transmit and receive messages. Any convenient messaging infrastructure can be used. A message is information conveyed from one process component instance to another with the expectation that activity will ensue. An operation can use multiple message types for inbound outbound or error messages. When two process components are in different deployment units invocation of an operation of one process component by the other process component is accomplished by an operation on the other process component sending a message to the first process component.

The architectural elements also include the process agent. Process agents do business processing that involves the sending or receiving of messages. Each operation will generally have at least one associated process agent. A process agent can be associated with one or more operations. Process agents can be either inbound or outbound and either synchronous or asynchronous.

Asynchronous outbound process agents are called after a business object changes e.g. after a create update or delete of a business object instance.

An output process agent will generally perform some processing of the data of the business object instance whose change triggered the event. An outbound agent triggers subsequent business process steps by sending messages using well defined outbound services to another process component which generally will be in another deployment unit or to an external system. An outbound process agent is linked to the one business object that triggers the agent but it is sent not to another business object but rather to another process component. Thus the outbound process agent can be implemented without knowledge of the exact business object design of the recipient process component.

Inbound process agents are called after a message has been received. Inbound process agents are used for the inbound part of a message based communication. An inbound process agent starts the execution of the business process step requested in a message by creating or updating one or multiple business object instances. An inbound process agent is not the agent of a business object but of its process component. An inbound process agent can act on multiple business objects in a process component.

Synchronous agents are used when a process component requires a more or less immediate response from another process component and is waiting for that response to continue its work.

Operations and process components are described in this specification in terms of process agents. However in alternative implementations process components and operations can be implemented without use of agents using other conventional techniques to perform the functions described in this specification.

The architectural elements also include the deployment unit. A deployment unit includes one or more process components that are deployed together on a single computer system platform. Conversely separate deployment units can be deployed on separate physical computing systems. For this reason a deployment unit boundary defines the limits of an application defined transaction i.e. a set of actions that have the ACID properties of atomicity consistency isolation and durability. To make use of database manager facilities the architecture requires that all operations of such a transaction be performed on one physical database as a consequence the processes of such a transaction must be performed by the process components of one instance of one deployment unit.

The process components of one deployment unit interact with those of another deployment unit using messages passed through one or more data communication networks or other suitable communication channels. Thus a deployment unit deployed on a platform belonging one business can interact with a deployment unit software entity deployed on a separate platform belonging to a different and unrelated business allowing for business to business communication. More than one instance of a given deployment unit can execute at the same time on the same computing system or on separate physical computing systems. This arrangement allows the functionality offered by a deployment unit to be scaled to meet demand by creating as many instances as needed.

Since interaction between deployment units is through service operations a deployment unit can be replaced by other another deployment unit as long as the new deployment unit supports the operations depended upon by other deployment units. Thus while deployment units can depend on the external interfaces of process components in other deployment units deployment units are not dependent on process component interaction within other deployment units. Similarly process components that interact with other process components or external systems only through messages e.g. as sent and received by operations can also be replaced as long as the replacement supports the operations of the original.

The Production Lot business object is used to execute production. It collects all actual data for a homogeneous production process and documents its progress. By using a production lot actual quantities are aggregated confirmation documents are created and plan reductions are calculated. The Production Lot business object forms the basis for integration with a Financials solution and for a process oriented genealogy.

A Notify of Production Lot to Accounting outbound process agent invokes a Notify of Production Lot Status Change operation to inform Accounting Document Processing about a status change of a production lot. The Notify of Production Lot Status Change operation is used in a Production Accounting Out Interface and may transmit a Production Lot Accounting Notification message to the Accounting process component . The message is received in a Production Accounting In interface by a Maintain Subledger Account operation . The Maintain Subledger Account operation is a notification to inform Accounting Processing about creation change or deletion of production orders. Upon receiving a notification message a Maintain Production Ledger Account inbound process agent may update the Accounting Notification business object . The Accounting Notification business object is a common input channel for all kinds of operational business transactions into Financial Accounting that is called by operational components in order to record the business transactions in Financial Accounting.

The Production Confirmation business object represents a document that collects actual data that was posted with reference to a production order. The Production Confirmation business object updates inventory finance and planning. A Notify of Production Progress from Production Confirmation to Accounting outbound process agent may invoke a Notify of Inventory Change and Activity Confirmation operation or a Request Inventory Change and Activity Confirmation Cancellation operation . Both operations are part of an Inventory And Activity Accounting Out interface If the confirmation operation is invoked then an Inventory Change and Activity confirmation Accounting Notification message is sent to the Accounting process component . If the cancellation operation is invoked then an Inventory Change and Activity Confirmation Accounting Cancellation Request message is sent to the Accounting process component .

The messages and are received by an Inventory and Activity Accounting In interface where operations may be performed. If a notification message is received then a Create Accounting Document operation is performed to Receive Inventory Change Accounting Notifications from the Production process component . If a cancellation message is received then a Cancel Accounting Document operation is performed to cancel requests received from the Production process components. Cancellations and updates may be sent by a Maintain Accounting Document based on Inventory and Activity inbound process agent to the Accounting Notification business object .

A Request Production from Production Requisition to Production outbound process agent may invoke a Request Production operation that sends a request to Production to produce a certain quantity of a specific material by a requested due date. The Request Production operation is part of a Producing Out interface . Upon completion of the operation a Production Request message is sent to the Production process component . The message is received in a Maintain Production Request operation where production services are requested. The Maintain Production Request operation is part of a Producing In interface . A Maintain Production Request inbound process agent may then send an update to a Production Request business object . The Production Request business object is a request from planning to manufacturing to produce a certain quantity of a certain product at a certain time.

The Production Request business object may use a Confirm production Request to Production Trigger and Response outbound process agent to invoke a Confirm Production Request operation . The operation may generate and transmit a Production Request Confirmation message to the Production Trigger and Response process component . The message is received in a Change Production Requisition based on Production Request Confirmation operation .

A Production Confirmation business object may use a Notify of Production Progress to Production Trigger and Response outbound process agent to invoke a Notify of Production Progress operation . The operation is part of a Production Out interface . The operation may transmit a Production Progress Notification message to the Production Trigger and Response process component . The message is received in a Change Production Requisition based on Production Progress operation which is part of a Producing In interface . A Maintain Production Requisition based on Production inbound process agent may then update the Production Request business object .

Changes in production requisitions may be sent from the Production process component to a Supply and Demand Matching process component which may then update a Planning View on Inventory business object a Planned Material Flow business object and a Production planning Order business object .

A Notify of Inventory Change From Site Logistics Confirmation to Accounting outbound process agent invokes a Notify of Inventory Change and Activity Provision operation to send an Inventory Change Accounting Notification to Accounting. Alternatively a Request Inventory Change and Activity Provision Cancellation operation may be invoked to request inventory change and activity provision cancellation. Both operations may be used in an Inventory and Activity Accounting Out interface . If the Notify of Inventory Change and Activity Provision operation is invoked then an Inventory Change and Activity Confirmation Accounting Notification message is sent to the Accounting process component . If the Request Inventory Change and Activity Provision Cancellation operation is invoked the Inventory Change and Activity Confirmation Accounting Cancellation Request message is sent to the Accounting process component .

The messages and are received by an Inventory and activity Accounting In interface where operations may be performed. If a notification message is received then a Create Accounting Document operation is performed to Receive Inventory Change Accounting Notification from Confirmation and Inventory or Site Logistics Processing or Production. If a cancellation message is received then a Cancel Accounting Document operation is performed to cancel requests received from Confirmation and Inventory or Site Logistics Processing or Production process components. Cancellations and updates may be sent by a Maintain Accounting Document based on Inventory and Activity inbound process agent to the Accounting Notification business object .

The demand planning business object may use a Notify of Forecast from Demand Planning to Demand Forecast Processing outbound process agent to invoke a Notify of Forecast operation that sends the current and deleted forecasts to the Demand Forecast Processing process component . The Notify of Forecast operation is part of a Demand Forecasting Out interface . A Product Forecast Notification message is then sent to a maintain Demand Forecast operation that creates updates or deletes the demand forecast object with the given forecast data. The Maintain Demand Forecast operation is part of a Demand Forecasting In interface . A Maintain Demand Forecast inbound processing agent may then update a Demand Forecast business object .

The subject matter described in this specification and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structural means disclosed in this specification and structural equivalents thereof or in combinations of them. The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more computer programs tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program also known as a program software software application or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. a data server a middleware component e.g. an application server or a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein or any combination of such back end middleware and front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as an exemplification of preferred embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments may also be provided in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment may also be provided in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

The subject matter has been described in terms of particular variations but other variations can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

