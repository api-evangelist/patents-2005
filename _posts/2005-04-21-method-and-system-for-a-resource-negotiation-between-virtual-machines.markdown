---

title: Method and system for a resource negotiation between virtual machines
abstract: A method of agreeing on the utilization of at least one computer resource between two virtual machines includes sending a first resource request by a first virtual machine to a second virtual machine having computer resources to allocate to the first virtual machine. The second virtual machine responds by sending at least one available resource for use by the first virtual machine. The first virtual machine can select from the at least one available resource. Both the first and second virtual machines can then execute on the agreed resource utilization by the first virtual machine and begin using the resource. When conditions change, either the first virtual machine or the second virtual machine can request a renegotiation of the agreement to use computer resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08166473&OS=08166473&RS=08166473
owner: Microsoft Corporation
number: 08166473
owner_city: Redmond
owner_country: US
publication_date: 20050421
---
This application shares some subject matter with co owned U.S. patent application Ser. No. 11 128 647 entitled Partition Bus filed May 12 2005 now U.S. Pat. No. 7 689 800.

The invention relates to the field of computer programming. More specifically the invention relates to resource negotiation between partitions in a virtual machine.

Virtual computing allows multiple virtual machines or partitions each having their own operating system to run on a host computer. The host computer has a virtualizer program that allows the host computer to emulate the instructions of a virtual machine program which may have a different computing model than the host computer. The host computer virtualizer program can also virtualize the hardware resources of the host machine for virtual machine use. The virtual machine that is requesting hardware resources such as CPU memory I O and disk space may be called a device consumer or a client with respect to the partition that is providing the resource.

In a virtual machine system a virtualizer program executing on the operating system software and hardware architecture of the host computer mimics the operation of an entire virtual computer partition. The virtualizer program acts as the interchange between the hardware architecture of the host machine and the instructions transmitted by the software e.g. operating systems applications etc. running within the emulated virtual machine partition environment. Generally it is desirable to keep one virtual machine separated from the other virtual machines as well as separated from the host. Separation or isolation of one virtual machine from another is useful to segregate errors and faults such that one virtual machine fault does not affect another virtual machine. Yet in some configurations it is desirable to have one virtual machine access host resources available to a second virtual machine. However there are challenges to realizing such a scheme.

In some computer software applications on host computers the system software drivers associated with a resource device communicate with the device to determine capacity and features. The software communicating with a device may have the ability to query the capacity and features of the device but the device does not have the ability to alert the software if these features or capabilities change. Also there is no protocol in the software and hardware s communication that allow for a guaranteed minimum level of service or contract in dealing with capacity and features. The lack of a fully interactive agreement between hardware and software can present problems if hardware changes or if software requirements change.

A partitioning environment using emulated devices has similar problems as the physical hardware environment of a host computer since the virtualized devices have already been defined by a physical device specification. One aspect of this problem is that as hardware gets more complex there arises a desire for a more interactive method of capacity and feature negotiating between the hardware and software. This is especially true in a partitioning system for several reasons.

Computer resource providers may have to service multiple virtual machine partitions which share a single physical device. If the software in a resource consuming partition requires an added amount of performance then the over use of the computer resource by other partitions can leave one or more virtual partition resource consumers or clients unable to fulfill their requirements.

If the capacity or the features of a given computer resource change after partitioned resource consumers or clients have been initiated there is no mechanism for altering the allocation of resources without restating either or both of the virtual machine resource client or the host resource provider.

Thus there is a need for a system or method to provide a more flexible approach to the allocation of computer resources to accommodate changing requirements and capabilities. The present invention addresses the aforementioned needs and solves them with additional advantages as expressed herein.

An aspect of the invention includes a method and system for the negotiation of a contract of services between a computer resources services provider and computer resources services client. The services provider and services client may reside in different virtual machine partitions of a host computer. An aspect of the invention is a resolution of the problem of changing computer resource requirements by a resource client or changing resource availability as perceived by a resource provider. In one embodiment a virtual services client requests computer resources from a virtual services provider and obtains interactively an agreement as to the granted resources. If the availability or usage of resources changes so as to invalidate the agreement the virtual services provider can ask for a renegotiation of the computer resources with the virtual services client. If the virtual services client perceives a need to change the resources it requires for functionality the virtual service client can request a renegotiation of the agreement of services.

In one embodiment of the invention virtual service provider can provide computer resources to a virtual service client. Protocols allowing communications between a virtual service provider and a virtual service client allow a back and forth negotiation and subsequent agreement between services requested and services granted. In one embodiment the communications between the provider and client concern hardware and software resources and may be described as being a negotiation for capacity and features of client needed resources for a virtual machine partition. One aspect of the invention includes the ability for a virtual service provider or a virtual service client to invalidate the existing contract for computer resources and demand a renegotiation and establishment of a new contract. In this manner the virtual service client can be guaranteed a minimum level of service. Additionally the virtual service provider can initiate a renegotiation of the service contract and can cause its changes to be reflected to the virtual service client.

A VSP provides device related services to a virtual service client VSC . The services provided do not necessarily look like what would be provided by any particular real hardware HW device instead the services are often at a higher level of abstraction than what real HW would provide. The VSP may provide virtual device services without relying on any corresponding real HW. For example a VSP may be a virtual video display device whose output is not currently being shown on any real display. This example may be implemented without the involvement of any real video display HW and may be implemented without being paired with any corresponding real video display HW. Alternately the VSP may be doling out a portion of the resources of a specific corresponding real HW device In this instance the VSC uses the HW resources to make it appear to the client partition that the client partition has a complete device of a similar type. For example a file on an IDE disk can be given to a partition and made to look like a complete SCSI disk not shown . A VSP can provide all the resources of a real HW device to a VSC. An example occurs when a VSP provides all the storage space on a real disk to a corresponding VSC so that all the storage space of the real disk can be used by the VSC. A VSC can be in the same partition as a VSP. For example a device emulator that happens to reside in the same partition as the VSP may include a VSC that the device emulator uses to request and use resources provided by the VSP. A VSC can be in a different partition from the VSP in this case there is typically no device emulator involved. Many virtual devices or emulated devices may be needed by a partition or virtual machine to render functionality to the partition and the functionality of said devices may be provided via a virtualized service provider VSP .

A second partition also resides in system and uses a link to the virtualization software of the host computer to provide the partition with functionality. In the context of the current invention the second partition contains a virtual service client VSC . A virtual service client VSC is the client of a virtual service provider VSP . The VSC can also be thought of as the device driver for the abstract virtualized device that a VSP offers.

According to an aspect of the invention a communication channel is present and available to the first partition having the virtual service provider and the second partition having the virtual service client . In one embodiment the communication channel is a software entity acting to allow communications between virtual machine partitions. Embodiments of the communication channel are the subject of a co owned U.S. Pat. No. 7 689 800 entitled Partition Bus. 

In one embodiment aspects of the invention may be realized in a virtual machine partitioning environment. shows a single VSP and VSC. This could represent any of the VSPs required by the virtual machine partition including storage network video input or audio. In the virtual machine environment embodiment the VSC and VSP will be in negotiation for capacity and features offered by the VSP using a communication channel .

In one embodiment the communication channel may operate as a software medium allowing protocol transactions between virtual channels. is a depiction of exemplary protocol formats consistent with aspects of the invention. Message is an initialize message which maybe be used for example to send an initialize message from a VSC to a VSP. Message is an initialize complete message which is may be used for example as a response by a VSP to a VSC. Message is a request bandwidth message which may be used for example by the VSC to request services or resources from a VSP. Message is a request bandwidth complete message which may be used for example by a VSP to respond to a VSC concerning the resources available. Message is a start message which may be used for example by the VSC to begin operations. Message is a start complete message which may be used for example by a VSP to acknowledge a start of VSC resource operations. The protocols depicted in are used as a base of exchanges across the communications channel to enable the implementation of a request and response arrangement of resource allocation according to an aspect of the invention.

The exemplary protocols of may be used to allow a negotiation of computer resources between two communicating partitions. Features and capacities of the computer resources may be requested offered accepted granted and renegotiated as needed. The virtual service provider or the virtual service client may initiate a renegotiation as their circumstances change. Renegotiation can have the effect of providing a minimum level of service between a service provider and a service client if hardware changes from the point of view of the either partition. For example hardware can undergo a capacity or feature change which may necessitate a renegotiation of a contract for service. Hardware can also appear to have changed as a result of a virtual partition being moved from one host machine to another. In one embodiment a withdrawal of a granted service to a client may be withdrawn by the service provider. In such a circumstance control of the granted resource would return to the service provider.

According to aspects of the invention the protocols of may be used to negotiate or renegotiate a contract of service for a multiplicity of hardware or software devices including but not limited to a network device a MAC address a storage device an input device an audio device a device driver a video device and an interface such as an I O channel such as a USB device. For example a network device negotiation feature may include the amount of bandwidth needed by a network device or the MTU maximum transmission unit used by the network device or its MAC address. A storage device negotiation feature may include the amount of bandwidth needed by a storage device the amount of storage needed by a storage device the read write ability of a storage device or the disk cache capacity of a storage device. An input device negotiation feature may include the layout and keys of a keyboard device or the layout buttons and wheels of a mouse device. An audio device negotiation feature may include the number of input and output channels present in an audio device the depth of the channels for both input and output from an audio device or the ability to capture output from an audio device DRM protection . A video device negotiation feature may include the amount of VRAM present in a video device the 3D capabilities of a video device the number of video overlays implemented by a video device or the ability to take a screen scrape of a video device DRM protection . An I O device negotiation feature may include the type and number of I O channels. For example the negotiation may include the number of devices supported by a USB bus device the amount of bandwidth needed by a USB bus device or the supported versions of USB e.g. 1.1 2.0 or enhanced version .

The VSC chooses the capacity and features than can accommodate its request from the features and capacities that were offered by the VSP step . It should be noted that this exchange at steps and are essentially a negotiation of resources or services needed by the virtual service client available of the virtual service provider. As such this exchange is analogous to a negotiation of services requested services available and services accepted. The VSC and the VSP essentially agree on the level of services to be made available by the provider to the client and work together to utilize the services step . At this step execution of the agreement or contract for services between the two partition entities begins.

According to an aspect of the invention changing circumstances may require a renegotiation of the contract or negotiated agreement for specific resources and capabilities services between the provider and the client. One such example circumstance may occur when hardware is updated added or removed. Under these circumstances the virtual service provider may no longer be able to honor the pre existing agreement to provide services to the virtual services client. Alternately the virtual service provider may have additional or different services in which the client might be interested. Accordingly the provider preferably initiates a negotiation for a new contract corresponding to the services affected by the changed circumstances of updated added or removed hardware. Another possible cause for changing conditions may be the need to re allocate resources among different partitions. This may be determined as a result of some monitoring operation in the host computer or another administrative entity.

Step is invoked if the VSP detects a change in circumstances causing the provider to request that the VSC utilize different resources. If the VSP does have a need to renegotiate the agreement for services step then the method moves back to step where the VSP determines the capacity and features that it may offer to the VSC and offers the VSC those changed services. As before the VSC chooses the services it needs step and both the VSC and VSP execute on the contract and the agreed upon services are made available to the client partition. In another embodiment the VSP may request a renegotiation of services provided to the VSC at step . The VSP may offer services to the VSC which differ from the already allocated resources being used by the VSC. The VSC may refuse the offer of a changed resource or service. The VSP may grant the VSC continued use of the already allocated resource.

If the VSP does not have changed circumstances as queried by step then the VSC can determine if it needs changed services step . The VSC may detect that it has a need for changed services because of several causes. One cause for changed services to a virtual service client would be if the partition were moved from one host computer to another. Under those circumstances either the VSP or the VSC can detect the host system environment change and request different services. In another instance a VSC may determine that the resources made available by the VSP are no longer functioning well enough for the VSC partition to function. In this instance the VSC may determine that a new negotiation and contract for VSP services is appropriate.

If a renegotiation is not needed the question at step is answered in the negative and the VSC and VSP continue to honor their contacts and use the allocated resources for the benefit of the VSC step . If the question at step is answered positively and the VSC requests a change in resources then the method moves to step where the VSC asks the VSP for a new set of available features and capacities of resources. Steps and follow until a new set of resources is agreed upon by the provider and client and acted upon in step . Thus the method of provides a vehicle for the updating of requirements and allocations based on needs perceived by either the virtual service provider or the virtual service client in a dynamic environment responsive to changes in any of the participating partitions as well as the host computer.

Initially both the VSP and VSC begin at the start positions at states and respectively. At state the VSC can send an initialize message of . The VSC can then enter into the protocol uninitialized state . The VSP receives the initialize message and moves into the protocol uninitialized state . The VSP then responds by sending an initialize complete message to the VSC. The VSP may then move into the protocol initialized state . The VSC receives the initialize complete message and moves into the protocol initialized state . At this time both the VSP and VSC have agreed in a particular message protocol. In one embodiment of the invention the protocol is representative of a protocol allowing the use of a virtual machine bus permitting communications between different virtual machine partitions.

With both VSC and VSP having an initialized protocol the VSC can request features and capacities of resources that it requires for functionality of its virtual machine partition. When a VSC needs resources that are not already allocated it moves to the features not negotiated state . From there the VSC can send a request bandwidth message to a VSP. The VSP can respond with a bandwidth complete message . It should be noted that the VSP may or may not grant the VSC the resource or bandwidth that the VSC requested. Accordingly there may be a back and forth exchange or negotiation between the VSP and the VSC before a grant of resources is received by the VSC in the request bandwidth complete message .

After both VSP and VSC agree to the resource bandwidth that can be allocated to the VSC then the VSC executes on the contract or agreement and send a start message to the VSP. The VSC then moves into the running state . The VSP can send the start complete message to the VSC in response to the start message . At this point the VSP can move into the running state . Since both VSP and VSC are in the running states the VSC can utilize the resources available via the VSP.

In some circumstances the VSP may detect that the resources being used by the VSC have changed. This can occur due to an upgrade addition or removal of capacity or features of a resource. In another circumstance the VSP may be informed that a re allocation of resources to a VSC is required. The present invention allows a renegotiation of the contract for services between the VSP and the VSC. In the instance where the VSP discovers a need to renegotiate the VSP moves from the running state to the protocol initialized state . The VSP sends an initialize message to the VSC. The VSC then detects that its resources are about to change and moves to the protocol uninitialized state .

Once in an uninitialized state the VSC can send an initialize message to the VSP. The VSP can respond with an initialization complete message . The VSC can then generate a request bandwidth message to begin the process of exchanging bandwidth and messages between the VSC and VSP to obtain a new grant of resources. In this instance a re negotiation of services for the VSC occurs and then the VSP can start to provide the granted services.

In another scenario the VSC may be the entity that requests a change in services. For example assuming that both VSC and VSP are in the running states of and respectively a change in contract may be requested by the VSC. This may be precipitated by the VSC because the services granted by the VSP are no longer appropriate according to the resource utilization level of the VSC virtual machine partition. At that point the VSC can detect the need for additional or changed resources and send an initialize message to the VSP. The VSC can then enter into the protocol uninitialized state . The VSP receives the initialize message and responds by moving into the protocol uninitialized state .

Both VSP and VSC are now in the protocol uninitialized states and respectively. As before the VSP and VSC move into their protocol initialized state s and respectively. The VSC generates the request bandwidth message to identify its requested resources. The two entities negotiate the resources to be used by the VSC as described above and execute the agreement by entering the running states of and respectively. Thus it can be understood that if either the VSP or the VSC detects a need to renegotiate the agreement for services then the current invention accommodates that need.

Although not required embodiments of the invention can also be implemented via one or more operating systems for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system s application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system s application programs other program modules and program data . Note that these components can either be the same as or different from operating system s application programs other program modules and program data . Operating system s application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from Microsoft Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via one or more operating systems application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement a method for establishing and renegotiating a contract of computer resources. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the signal processing services of an embodiment of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

