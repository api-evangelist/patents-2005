---

title: Function converting apparatus and function converting method
abstract: A function converting method has storing correspondence-information between operating system function information and device function information, converting a function of an operating system into a function of an equipment driver based on the correspondence-information, and controlling so that the converted function is executed by the equipment driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07626718&OS=07626718&RS=07626718
owner: Fuji Xerox Co., Ltd.
number: 07626718
owner_city: Tokyo
owner_country: JP
publication_date: 20050912
---
This application claims priority under 35USC119 from Japanese Patent Application No. 2005 090186 the disclosure of which is incorporated by reference herein.

The present invention relates to a function converting apparatus generating data for outputting to a device a function converting method a storage medium storing a function converting program a device data generating apparatus a device data generating method and a storage medium storing a device data generating program.

Conventionally when print is executed by an image forming apparatus such as a printer or like equipment a personal computer hereinafter refer to PC connected to the image forming apparatus generates device data described by a language such as a page description language PDL or the like which can be interpreted by the image forming apparatus executing the print and outputs this data to the image forming apparatus for example refer to Japanese Patent Application Laid Open JP A No. 11 212749 . Based on printing data generated by an application according to a version of operating system installed on a PC the technique of JP A No. 11 212749 generates device data using a printer driver which can be interpreted by a printer corresponding to this printer driver the printer driver being compatible with the same operating system version. In other words the technique of JP A No. 11 212749 converts a single data format defined by the operating system into a single data format defined by the device.

In general if a new function is added such as with a new Application Program Interface being added to the operating system hereinafter referred to as OS during a version upgrade of the OS of the above PC it is necessary to change the device driver so as to make it compatible with the new API function.

However a problem is generated in that it is impossible to use the function corresponding to the new API from an old application compatible with the functions of the OS before adding the new function. On the contrary it is also hard to use only the functions corresponding to the old API from the new application corresponding to the OS after adding the new function. In other words there is generated a problem that an unconformity is generated between the functions which the OS can provide and the associated functions of devices such as image forming apparatuses or the like due to the addition of the new function to the OS or the like.

A function converting method has storing correspondence information between operating system function information and device function information converting a function of an operating system into a function of an equipment driver based on the correspondence information and controlling so that the converted function is executed by the equipment driver.

A description will be given of an embodiment in accordance with the present invention with reference to the accompanying drawings.

The printing system is constituted by a PC and printers to corresponding to at least one image forming apparatus. The PC and the printers to are connected via a network so as to be able to receive and send data and commands.

The PC is mainly structured such as to include a storage unit for storing various data an operating unit for inputting various commands by a user a display unit for displaying various information a communicating unit for receiving and sending data with respect to at least one printer to via the network a ROM for storing in advance various processing routines described below refer to and various data and a control unit for controlling the operation of respective units constituting the PC . The communicating unit the display unit the operating unit the storage unit and the control unit are connected via a bus such as a data bus an address bus or the like so as to be able to receive and send data and commands.

Each of the printers to is provided with a communicating unit for sending and receiving data to and from the PC via the network a control unit for controlling the operation of respective units constituting the printer s and an image forming unit which based on control of the control unit analyzes device data input from the PC and executes output based on the device data. The communicating unit the image forming unit and the control unit are connected via a bus so as to be able receive and send data and commands between each other. In the present embodiment in order to simplify description an explanation will be made based on the assumption that two printers a printer and a printer are connected to the network so as to freely send and receive the data to and from the PC . However three or more printers may be connected to the network and the number of printers is not limited to two.

A software structure of the PC in accordance with the present embodiment is provided with an operating system hereinafter referred to as OS as shown in and various applications are operated on the OS . In this case the OS can employ a generally widely used general purpose OS for example WINDOWS UNIX Linux and the like. Further the application is exemplified by document creation software spreadsheet software and the like operating on the general purpose OS. In this case in the present embodiment a description will be given based on the assumption that as a result of a change the OS version is upgraded with the old version being version and the latest version of OS being version and the PC is installed with version of OS however versions are not limited to versions and .

In the present embodiment a description will be given on the assumption that there are various applications installed in advance on the PC and that of these application A corresponds to the old version version in the present embodiment and application B correspond to the new version version in the present embodiment .

The OS is schematically configured so as to include application programming interfaces APIs for utilizing the functions of the OS from each of the applications A and the applications B and APIs for calling up the respective functions of the printer and the printer . Further a printer driver for generating print data which can be interpreted by the printers to is loaded on the PC .

The versions of APIs and APIs are upgraded along with the version upgrade of the OS in the same manner as the applications .

In the present embodiment a description will be given based on the assumption that an API A corresponding to the old version of the OS and an API B corresponding to the new version of the OS are loaded as the APIs . In the same manner a description will be given on the assumption that an API A corresponding to the old version of the OS and an API B corresponding to the new version of the OS are loaded as the APIs .

The printer driver stores printer information representing each of at least one printers to and version information representing the version of the OS corresponding to each of the printer information in a corresponding manner. The printer driver is configured to include handler unit that is compatible with all APIs a conversion rule storage unit an API conversion control unit a device data generating unit and a device transfer unit .

The all API compatible handler unit is a functional unit for calling up the API A or the API B prescribed by the OS . The conversion rule storage unit is a functional unit for storing in advance conversion rules for converting the functions corresponding to each version of the APIs into the functions corresponding to other versions of the APIs . In the present embodiment the functional unit stores in advance conversion rules for converting the functions defined in the API A into the functions defined in the API B or converting the functions defined in the API B into the functions defined in the API A.

In the conversion rule storage unit there is stored as conversion rules in a coordinated corresponding manner function information of the API A or API B before conversion for calling up the functions of each of the printers and and function information of the API A or the API B after the conversion. In other words the function information is coordinated in such a manner that the functions of one version of API can be converted into the functions of a different version of API .

Version information which expresses the version of the corresponding API A or API B is stored together with each item of the function information.

In the present embodiment corresponding to each of these items of function information is stored in advance in a coordinated manner either command execution conversion information instructing the conversion of a function or command non execution conversion information instructing that the conversion of the function is not executed. That is conversion information expressing whether or not the conversion of a function is instructed.

In this case in the present embodiment a description will be given based on the assumption that in the conversion rule storage unit it is function information of the API A or API B before conversion which is for calling up the functions of each of the printer and the printer and function information of the API A or API B after conversion which are stored as the conversion rules in a coordinated manner. However it is equally possible that for the function information before conversion the function information of the APIs which is for utilizing the functions of the OS from each of the applications A and B may be stored in a coordinated manner.

Further in the present embodiment a description will be given based on the assumption that the function information of the API A or the API B before conversion which is for calling up the function of each of the printers and and the function information of the API A or the API B after the conversion are stored as the conversion rules in a coordinated manner in the conversion rule storage unit . However command function information of the API A or the API B before conversion which is for calling up the function of each of the printers and and command function information of the API A or the API B after the conversion may be stored as the conversion rules in a coordinated manner in the conversion rule storing unit .

The device data generating unit is a functional unit for generating device data described by a language such as a page description language PDL or the like which can be interpreted by each of the printers to . The device transfer unit is a functional unit for transferring the device data generated by the device data generating unit to each of the corresponding printers to .

The device data generating unit is configured to include an API A compatible driver core unit corresponding to the API A and an API B compatible driver core unit corresponding to the API B. The API A compatible driver core unit is a functional unit for generating device data which can be interpreted by the printer when selected with a print command by a user. The device data is generated from the print data prepared by an application based on the functions of the API A after the functions have been converted by the API conversion control unit . The API B compatible driver core unit is a functional unit for generating device data which can be interpreted by the printer when selected with a print command by the user. The device data is generated from the print data prepared by an application based on the functions of the API B after the functions are converted by the API conversion control unit .

A description will be given below of a process executed by the control unit of the PC in accordance with the invention with reference to .

When one of the applications from the applications A and B installed in the PC is started in accordance with an operation command of the user by the operating unit and the print executing command of the print data prepared via the application is given a processing routine shown in is executed proceeding to step where the printer information representing the printer for outputting the data is input and then proceeding to a step .

For example in the step printer information representing the printer can be input for outputting the print data prepared by the application A corresponding to the old version of the OS from the printer that corresponds to the new version of the OS . Further for example in the step printer information expressing the printer can be input for outputting print data prepared by the application B corresponding to the new version of the OS from the printer that corresponds to the old version of the OS .

The next step executes a start command of the API corresponding to the printer to which the print executing command is applied in the step mentioned above and acquires the print data from the application .

For example in the step in the case that the application B corresponding to the new version of the OS is used for generating the print data the API B corresponding to the new version is started. Further in the case that the application A corresponding to the old version of the OS is used for generating the print data the API A corresponding to the old version is started.

The next step searches the API started in step mentioned above within the conversion rule storage unit and determines whether or not the version information of the API started in step mentioned above matches the version information of the API corresponding to the application to which the print execution command is applied in step mentioned above. In the case that the version of the API matches the version of the API the procedure goes to step and in the case that they do not match the procedure goes to step .

It may be configured such that further associated with the conversion rules stored in the conversion rule storage unit is command conversion information and this is coordinated to the functions of the API before conversion which include the version information of the API corresponding to the application to which the print execution command is applied in step mentioned above and the functions of the API after the conversion which include the version information of the API started in step mentioned above. In this case in the determination in step if command execution conversion information is associated then the procedure proceeds to step and in the case that command non execution conversion information is associated the procedure proceeds to step .

The step converts the functions of the API of the same version as that of the API corresponding to the application preparing the print data into the functions of the API corresponding to the printer designated by the printer information acquired in the step mentioned above based on the conversion rules stored in the conversion rule storage unit .

In detail in the case that the version of the API corresponding to the application preparing the print data is the new version and the version of the API corresponding to the printer of the printer information acquired in step mentioned above is the old version on the basis of the process of step the functions of the API A of the old version are converted into the functions of the API B of the new version.

On the contrary when the version of the API corresponding to the application preparing the print data is the old version and the version of the API corresponding to the printer of the printer information acquired in step mentioned above is the new version on the basis of the process of step the functions of the API B of the new version are converted into the functions of the API A of the old version.

For example in the case that a transmissive attribute is supported in the functions of the new version API B and the transmissive attribute is not supported in the function of the old version API A the functions of the API are converted so as to form an apparent transmission function giving the appearance of trasmissive printing.

In particular when converting the functions of the API B into the functions of the API A function conversion is executed by converting a graphic drawing function A into a graphic drawing function B as shown in . In detail the data expressing the shape is not changed and the color is changed to a pattern density based on a fill attribute value with reference to a color attribute before conversion 2 and reference to a fill attribute value before conversion 4 as shown in the graphic drawing function B. Further the type of fill attribute is changed to fill attribute type and the numerical value of the fill attribute is replaced by a constant .

In the case of the executing the conversion mentioned above for example in the case that blue is set for the color attribute in the attribute of the drawing function A expressing the functions of the API B in which is set for the fill attribute and 50 is set as the numerical value of the fill attribute then is set for the fill attribute when converted into the functions of the API A and the attribute is expressed by a pattern with a color attribute as 50 of blue .

For example if the printing is executed from the printer which corresponds to the API B using the API having the transmissive attribute the output image forms the blue image drawn at a transmission factor of 50 as shown by an image as shown in . On the other hand if the printing is executed from the printer corresponding to the API A having no transmission attribute by using the API B having the transmission attribute the output image forms a blue image drawn by a blue checkered pattern as shown in .

On the other hand as shown in when converting the functions of the API A the old version into the functions of the API B the new version a graphic drawing function A is converted into a graphic drawing function B. In detail the data expressing the shape is not changed the color of the pattern and the pattern rate are not changed of the fill attribute kind is converted into and the information expressing the pattern rate is defined as the numerical value of the fill attribute.

As mentioned above it is possible to convert the functions of the old version API A into the functions of the new version API B convert the functions of the new version API B of the new version into the functions of the old version API A and convert the functions of APIs between respective versions.

In this case if a function or attribute which is not included in the functions of the old version API A but is included in the functions of the new version API B it is preferable to store in advance within the printer driver a correspondence table representing the functions which are not included in the functions of the API A of the version but are included in the functions of the API B of the version . Further for example in the case of converting the API A of the version into the API B of the version it is possible to carry out conversion by adding the missing functions.

In particular as shown in it is possible to convert a graphic drawing function A of the API A into a graphic drawing function B of the API B by adding an attribute of a security attribute to the graphic drawing function A of the API A. In this case as opposed to the above when converting the API B of the version into the API A of the version it is preferable to convert the functions of the API B into the functions of the API A by deleting the functions of API B which are not included in the API A.

The next step starts the driver core that corresponds to the version of the API corresponding to the printer selected by the printer information acquired in step above either a driver core corresponding to the API A or a driver core corresponding to the API B . After generating the device data which the selected printer indicated by the printer information acquired in step can interpret using the started driver core and based on the functions of the API A or API B converted in accordance with the process of step above the procedure proceeds to step .

However if the determination in step is affirmative the procedure proceeds to step and the driver core corresponding to the API of the printer indicated by the printer information acquired in step above either the driver core corresponding to the API A or the driver core corresponding to the API B . After generating the device data which the selected printer of the printer information acquired by step above can interpret using the started driver core and based on the functions of the API the procedure proceeds to step .

For example in accordance with the process of step above as shown in when a graphic drawing function A is defined as the API A and the shape the color the fill attribute type and the numerical value of the fill attribute are defined as attributes of the function the version description within the drawing function A is equal to the version description within the drawing function B as shown by the graphic drawing function B. Accordingly the device data which the printer indicated by the printer information acquired in step above can interpret is generated by using the attribute defined by the drawing function A as it is without conversion.

The next step outputs the device data generated in step or step to the printer or the printer according to the printer information acquired in step mentioned above.

The next step determines whether or not all the printing data is processed and in the case that the print data is left the procedure goes back to step and the process is continued. If it is determined that all the print data is processed the present routine is finished.

As described above in accordance with the present embodiment if the version of the OS corresponding to the printer instructed for outputting the print data is the same as the version of the OS corresponding to the application program preparing the print data then the device data which can be interpreted by the printer instructed from the print data prepared by the application is generated on the basis of the functions of the API corresponding to the printer outputting the instructed print data. On the other hand if the version of the OS corresponding to the printer outputting the instructed print data is different from the version of the OS corresponding to the application program preparing the print data then it is possible to convert the functions of an API that corresponds to the version information associated with the application program generating the print data into the functions of an API corresponding to the printer to which the output is instructed and to generate the device data which can be interpreted by the printer based on the print data.

In particular when the version of the API corresponding to the printer to which the print is instructed is different from the version of the API corresponding to the application which instructs the print execution it is possible to convert the functions of the API of the same version as the version of the API corresponding to the application in which the print execution is instructed in such a manner as to obtain the functions of the API of the version of the API corresponding to the printer to which the print is instructed to generate device data on the basis of the converted functions and to generate device data which can be interpreted by the printer to which the print is instructed so as to output to the printer to which the print is instructed.

Accordingly even in the case that the version of the OS corresponding to the application program generating the print data is different from the version of the OS corresponding to the output printer it is possible to generate the device data on the basis of the functions relating to the output of the device data provided in the output printer in a versatile manner.

Further since by one printer driver it is possible to generate the device data on the basis of the functions relating to the output of the device data provided in the printer to which the print is instructed based on print data prepared by applications of different versions it is possible to provide a versatile printer driver.

In this case simplicity of explanation a description has been given of the present embodiment based on the assumption that there are the version of OS is upgraded two times the old version and the new version and respective corresponding application API API and printer are provided with two kinds of the old version the version and the new version the version in accordance with the history of the version upgrading of the OS . However the invention is not limited to two kinds of OS and plural kinds of applications API API and printer may be provided on the basis of the versions in correspondence to the history of the version upgrading of the OS . In this case even when the version of the operating system corresponding to the application program generating the image data is different from the version of the operating system corresponding to the printer outputting the print data it is possible to generate the device data based on the functions relating to the output of the device data provided in the printer outputting the device data in a versatile manner by executing the same process as shown in mentioned above.

According to an aspect of the invention there is provided a function converting apparatus. The function converting apparatus comprises storage means that stores correspondence information for making correspondences between operating system function information which includes predetermined functions of an operating system and types of operating system and device function information which represents equipment driver functions relating to the predetermined functions and types of equipment driver converting means that at a time when a predetermined function of an operating system and an equipment driver are specified converts the predetermined function of the specified operating system into the specified function for an equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and executing means that controls so that the converted function is executed by the specified equipment driver.

According to another aspect of the invention there is provided a function converting apparatus. The function converting apparatus comprises storage means that stores correspondence information for making correspondences between operating system function information representing sets of function commands relating to predetermined functions of an operating system and types of the operating system and device function information which represents sets of equipment driver function commands relating to the predetermined functions and types of equipment driver converting means that at a time when a predetermined function of an operating system and an equipment driver are specified converts a function command relating to the specified function of the operating system into a function command relating to the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and transmitting means that transmits the converted function command to the specified equipment driver.

According to another aspect of the invention there is provided a function converting apparatus. The function converting apparatus comprises storage means that stores correspondence information making correspondences between operating system function information which includes predetermined functions of an operating system utilized by applications operating on the operating system and types of the operating system and device function information which represents equipment driver functions relating to the predetermined functions and types of the equipment driver converting means that at a time when a predetermined function of an operating system and an equipment driver are specified converts the specified predetermined function of the operating system into a function of the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and executing means that controls so that the converted function is executed by the specified equipment driver.

According to another aspect of the invention there is provided a device data generating apparatus. The device data generating apparatus comprises storage means that stores in advance operating function information representing functions relating to device data output of an operating system and versions thereof and image forming apparatus function information representing functions relating to device data output of image forming apparatuses and versions thereof after making correspondences between the operating system function information and the image forming apparatus function information converting means that converts at a time when an image forming apparatus is selected by an application on the operating system and print execution is instructed the operating system device data output functions into the image forming apparatus device data output functions of the selected image forming apparatus on the basis of correspondence information stored in a storage means and generating means that generates device data interpretable by the image forming apparatus on the basis of the function information converted by the converting means.

According to another aspect of the invention there is provided a function converting method in a computer. The function converting method comprises storing correspondence information which makes correspondences between operating system function information which includes predetermined functions of an operating system and types of the operating system and device function information representing functions of an equipment driver relating to the predetermined functions and types of the equipment driver converting at a time when a predetermined function of the operating system and an equipment driver are specified the predetermined functions of the specified operating system into the functions of the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and controlling so that the converted function is executed by the specified equipment driver.

According to another aspect of the invention there is provided a function converting method in a computer comprises storing correspondence information which makes correspondences between operating system function information representing function command sets relating to predetermined functions of an operating system and a type of the operating system and device function information representing function command sets of an equipment driver relating to the predetermined function and a type of the equipment driver converting at a time when the predetermined function of the operating system and the equipment driver are specified the function command of the specified operating system into the function command of the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and transmitting the converted function command to the specified equipment driver.

According to another aspect of the invention there is provided a function converting method in a computer. The function converting method comprises storing correspondence information which makes correspondences between operating system function information which includes predetermined functions of an operating system utilized by applications operating on the operating system and a type of the operating system and device function information representing functions of an equipment driver relating to the predetermined functions and a type of the equipment driver converting at a time when a predetermined function of the operating system and an equipment driver are specified the predetermined functions of the specified operating system into the functions of the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and controlling so that the converted function is executed by the specified equipment driver.

According to another aspect of the invention there is provided a device data generating method. The device data generating method comprises storing in advance operating function information which represents functions relating to output of device data of an operating system and a version thereof and image forming apparatus function information which represents functions relating to output of device data of an image forming apparatus and a version thereof after making correspondences between the operating function information and the image forming apparatus function information converting at a time when an image forming apparatus is selected by an application on the operating system and print execution is instructed the operating system device data output functions into the selected image forming apparatus device data output functions on the basis of correspondence information stored in a storage means and generating the device data interpretable by the image forming apparatus on the basis of the converted device data output function information.

According to another aspect of the invention there is provided a storage medium readable by a computer. The storage medium storing a program of instructions is executable by the computer to perform an operation. The operation comprises storing correspondence information which make correspondences between operating system function information which includes predetermined functions of an operating system and a type of the operating system and device function information which represents functions of an equipment driver relating to the predetermined functions and a type of the equipment driver converting at a time when a predetermined function of the operating system and an equipment driver are specified the predetermined functions of the specified operating system into the functions of the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and controlling so that the converted function is executed by the specified equipment driver.

According to another aspect of the invention there is provided a storage medium readable by a computer. The storage medium storing a program of instructions is executable by the computer to perform an operation. The operation comprises storing correspondence information making correspondences between operating system function information representing function command sets relating to predetermined functions of an operating system and a type of the operating system and device function information which represents function command sets of an equipment driver relating to the predetermined functions and a type of the equipment driver converting at a time when a predetermined function of the operating system and an equipment driver are specified the function command of the specified operating system into the function command of the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and transmitting the converted command function to the specified equipment driver.

According to another aspect of the invention there is provided a storage medium readable by a computer. The storage medium storing a program of instructions is executable by the computer to perform an operation. The operation comprises storing correspondence information which makes correspondences between operating system function information which includes predetermined functions of an operating system utilized by an application operating on the operating system and a type of the operating system and device function information which represents functions of an equipment driver relating to the predetermined functions and a type of the equipment driver converting at a time when a predetermined function of the operating system and the equipment driver are specified the specified predetermined function of the operating system into the function of the specified equipment driver on the basis of the type of the operating system of the correspondence information and the type of the specified equipment driver and controlling so that the converted function is executed by the specified equipment driver.

According to another aspect of the invention there is provided a storage medium readable by a computer. The storage medium storing a program of instructions is executable by the computer to perform an operation. The operation comprises storing in advance operating function information representing functions relating to device data of an operating system and a version thereof and image forming apparatus function information representing functions relating to output of device data of an image forming apparatus and a version thereof after making correspondences between the operating function information and the image forming apparatus function information converting at a time when an image forming apparatus is selected by an application on the operating system and print execution is instructed the operating system device data output functions into the selected image forming apparatus device data output functions on the basis of correspondence information stored in a storage means and generating the device data interpretable by the image forming apparatus on the basis of the converted device data output function information.

In the present embodiment description is given of a case that one driver is provided in the PC and the device data is generated so as to be output to the printer serving as the image forming apparatus however it may be configured so that various equipment different from the image forming apparatus is connected to the PC so as to be able to receive and send the data and the signal and device data is generated by one driver for each of the various items of equipment so as to output to the various equipment.

