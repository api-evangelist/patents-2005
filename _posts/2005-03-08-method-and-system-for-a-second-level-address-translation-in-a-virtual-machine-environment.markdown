---

title: Method and system for a second level address translation in a virtual machine environment
abstract: A method of performing a translation from a guest virtual address to a host physical address in a virtual machine environment includes receiving a guest virtual address from a host computer executing a guest virtual machine program and using the hardware oriented method of the host CPU to determine the guest physical address. A second level address translation to a host physical address is then performed. In one embodiment, a multiple tier tree is traversed which translates the guest physical address into a host physical address. In another embodiment, the second level of address translation is performed by employing a hash function of the guest physical address and a reference to a hash table. One aspect of the invention is the incorporation of access overrides associated with the host physical address which can control the access permissions of the host memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07428626&OS=07428626&RS=07428626
owner: Microsoft Corporation
number: 07428626
owner_city: Redmond
owner_country: US
publication_date: 20050308
---
The invention relates to the field of computer programming. More specifically the invention relates to address translation from a guest virtual address to a host physical address in a virtual machine environment.

Virtual computing allows multiple virtual machines each having their own operating system to run on a host computer. The host computer has a virtualizer program that allows the host computer to emulate the instructions of a virtual machine program which may have a different CPU model than the host computer. The host computer virtualizer program can also virtualize the hardware resources of the host machine for virtual machine use. The virtual machine that is requesting hardware resources such as CPU memory I O and disk space is called a guest with respect to the host computer.

In a virtual machine the guest computer system only exists in the host computer system as a pure software representation of the operation of one specific hardware architecture. The terms virtualizer emulator direct executor virtual machine and processor emulation are sometimes used interchangeably to denote the ability to mimic or emulate the hardware architecture of an entire computer system using one or several approaches known and appreciated by those of skill in the art. A virtualizer program executing on the operating system software and hardware architecture of the host computer mimics the operation of the entire guest computer system.

The virtualizer program acts as the interchange between the hardware architecture of the host machine and the instructions transmitted by the software e.g. operating systems applications etc. running within the emulated guest virtual machine environment. In one virtual machine environment embodiment the emulated environment may include a virtual machine monitor VMM which is a software layer that runs directly above the host hardware perhaps running side by side and working in conjunction with the host operating system and which can virtualize all the resources of the host machine as well as certain virtual resources by exposing interfaces that are the same as the hardware the VMM is virtualizing. This virtualization enables the virtualizer as well as the host computer system itself to go unnoticed by operating system layers running above it. In a virtual machine environment the multiple virtual machines impose performance requirements on the hardware resources of the host machine. It is desirable to keep one virtual machine separated from the other virtual machines as well as separated from the host. Separation or isolation of one virtual machine from another is useful to segregate errors and faults such that one virtual machine fault does not affect another virtual machine. Thus some virtual machine embodiments map the virtual machine hardware accesses into separate host computer system resources. One such resource is random access memory. This important system resource must be carefully managed in a virtual machine environment.

One type of CPU that may be used as a host computer resource is the x86 family of processors. This family has a built in memory address lookup mechanism that allows a virtual address say in one application to be converted to a physical address via a process known as a page walk or paging. shows a typical prior art page walk process implemented in hardware in an x86 processor family.

A typical x86 family processor running with the paging enabled relies on a set of page descriptors and page tables to create a sparse map of virtual address to physical address translations. Such machines can extend the mapping structure by introducing a third lookup table the page descriptor page tables PDPT and larger page table entries PTE to produce a physical address.

The x86 processor may also contain a translation look aside buffer TLB in which it places the most recently traversed table mappings placing within the TLB the virtual address and related physical address. Subsequent processor memory accesses look to the TLB to avoid the page table walk of resulting in higher efficiency in machine cycle use. But this efficiency is not normally used in the virtual machine environment.

When an operating system is executing in a virtual machine created by a VMM the physical addresses of the guest are virtualized and it is often the case that these guest physical addresses do not correspond to host physical addresses. Consequently these guest generated page tables cannot be directly traversed by the address translation hardware described in . Instead the Virtual Machine Monitor VMM refers to guest generated tables to create a corresponding new set of shadow page tables to create mappings of the guest virtual addresses to host physical addresses. Accordingly when a guest virtual address is loaded into the control register by the guest virtual machine operating system the page table walk results of may become non applicable and a machine exception is generated. The machine exception can then access a routine in the VMM to use the control register guest virtual address to point to the shadow mappings created by the VMM. This VMM intervention is very expensive in terms of machine cycles. Although the hardware oriented page walk of may take on a dozen or so machine cycles the VMM intervention may take thousands of machine cycles.

In addition any changes the guest virtual machine makes to its page tables require VMM intervention to update the corresponding shadow page tables. The overhead of shadow page table maintenance is high both in time consumed to maintain the shadow mappings and in the memory space consumed by the shadow mappings. The VMM has to intercede any time the guest operating system makes any substantive changes to its mappings.

In addition the translation look aside table TLB cache which normally speeds up processor operation is largely rendered ineffective by a VMM intervention. The TLB is cleared any time multitasking occurs within a selected virtual machine. The TLB is also cleared any time the context changes from one virtual machine or guest to another virtual machine or guest. Thus the implementation of virtual machine operation can adversely affect not only the hardware schemes for quick address lookup such as the TLB but also adversely affect the effectiveness of the page walk hardware.

Thus there is a need for a method and system to implement fast memory translation from a guest virtual address to a host physical address in a virtual machine environment. It would be advantageous to take advantage of hardware already in place to facilitate a virtual address to physical address translation. The present invention addresses the aforementioned needs and solves them with additional advantages as expressed herein.

Aspects of the invention solve the problem associated with a virtual machine monitor VMM having to maintain a virtual machine s page table mappings and overhead associated with such activity. Embodiments of the invention describe methods and a system to build new mapping structures that can be traversed by a processor s address translation hardware to allow the guest page tables to be directly referenced with minimal or no VMM intervention.

In one aspect of the invention a host CPU receives a guest virtual address from a guest program operating in a virtual machine. The host CPU is permitted to use its page walk hardware to produce a guest physical address. A second level of address translation is needed to translate the guest physical address to a host physical address. One embodiment of the second level translation involves traversing a two tier tree structure to arrive at a host physical address. This embodiment uses the guest physical address as an index in the tree traversal. Another embodiment involves using the guest physical address as input to a hash algorithm where a host physical address can be obtained from a guest physical address.

In one aspect of the invention a translation look aside buffer is updated after a second level address translation to increase the speed of future accesses to a target host physical address. In another aspect of the invention access control information which can place limits on the use of a host memory location are read when a host physical address is obtained. This access information can override the guest physical address access control so that the host memory is properly protected in the virtual machine environment.

The hardware oriented page walk provides the first level translation of a guest virtual address to a guest physical address. If a second level translation that translates a guest physical address into a host physical address can be added at points and of then the hardware of the host CPU may be used to advantage. It is desirable to perform the guest virtual address to host physical address translation without requiring any changes to the guest code or data structures it creates to represent the logical to physical translations. This method is transparent to the guest operating system.

According to an aspect of the invention if a translation look aside buffer TLB is used a successful hit on the buffer with a guest virtual address would allow the TLB to translate the guest virtual address directly to a host physical address. This type of operation in a virtual machine environment allows the host processor to efficiently execute the virtual machine application. If however the host processor TLB does not contain a guest virtual address to host physical address entry then a translation is needed and aspects of the current invention may be employed. Instead of software based shadow table translation maintenance as discussed above in the prior art the current invention utilizes the hardware based TLB miss fill process to perform a translation to determine a host physical address from a guest virtual address.

However a guest physical address cannot be used directly by the host computer to access hardware resources allocated to the virtual machine operation. A second level of address translation is needed to resolve the intermediate and the final guest physical address accesses and output of the first level address translation to a host physical address which the host computer can use to access hardware resources for the virtual machine. Accordingly the guest physical address is provided via to the second level address translation .

The guest physical addresses are resolved into host physical addresses by referring to a second level address translation SLAT table which is indexed by guest physical addresses. The processor of the host computer determines if it is using a SLAT process by examining an enablement flag stored in a control register . In an x86 CPU environment this second control register can be CR4. Yet another control register contains the host physical address of the SLAT table origin. This control register when used with the guest physical address input assists the second level address translation to reference a final host physical address.

According to the present invention in a host computer with second level address translation enabled the VMM permits the guest to load the real processor s page table origin control register with the guest physical address values because all page table walks and physical addresses are relocated or controlled by a SLAT table associated for the virtual machine which is maintained by the VMM.

Additional processor controls can be provided to modify the behavior of the processor to allow control register to be set directly by the processor when the VMM determines the guest is at virtual ring 0. Such a control eliminates the need for the VMM to intervene since with SLAT enabled the intervention action is to load the guest virtual address.

According to an aspect of the invention the second level address translation may be performed in various ways. In one embodiment a SLAT table may be organized as a tree structure. In another embodiment the SLAT table may be organized as a hashed page table. In either embodiment the table referenced in the SLAT may be indexed by the guest physical address from the hardware oriented first level address translation. Additionally the second level address translation may provide a physical page descriptor that contains a related physical address and access overrides.

In another embodiment of the invention the time cost of a second level address translation may be avoided if the translation look aside buffer contains appropriate second level address translation information. For example in one embodiment when a first level address translation is performed guest physical addresses are determined from a guest virtual address as described in the first half of at points and . If a translation look aside buffer is loaded with a guest physical address to host physical address correlation then the first level address translation may be followed immediately by a TLB lookup to determine the host physical address from the guest physical address. This process essentially eliminates the need to perform multiple table walks as in for the second level address translation. However if the TLB does not have the guest physical address to host physical address correlation then a second level address translation is needed. is a depiction of one embodiment of a second level address translation.

If a second level address translation is needed but the host physical address result is not present in the host then a machine exception may be generated. This situation allows the VMM to become involved and either resolve the address translation or reflect a page fault to the guest.

In another aspect of the invention access information is associated with the host physical address and of respectively. Initially the guest virtual address access requested by the guest virtual machine most likely has access controls on the resulting guest physical address. These access controls regulate how the guest views access permissions on the guest physical address. However in a virtual machine environment the host process or VMM should retain ultimate control on the access privileges associated with host physical memory. Thus a scheme for access controls within the second level address translation scheme is warranted.

Table 1 below indicates one embodiment of an entry in a second level address lookup table of . Table 1 includes the host physical address p a guest index x and an access override field a . Table 2 below indicates one embodiment of an entry in a second level address hash table of . Table 2 includes a guest physical address g a host physical address p and an access override field a .

The use of access overrides associated with host physical addresses can occur in either the second level address translation tables or the TLB. These access overrides can protect the host physical address from misuse of the host physical memory by a virtual machine. Such access control can impose read write or execute limitations on the memory accessed by a virtual machine. Other uses of access overrides may also be made. One example is that of placing break points or notifications of an area in memory that is accessed by a virtual machine on a host system resources. Other advantages of access protection include the ability to protect areas of the guest and host memory against malicious attack the creation of memory mapped regions to implement virtual memory mapped registers allowing various debugging and diagnostic capabilities external to the guest and allowing an owner partition to define the cacheability of a page regardless of the guest s specification of cacheability.

A first level address translation is performed step to determine a guest physical address from the guest virtual address. This translation is a hardware oriented translation using facilities that the host CPU has for an address page walk. The intermediate page table accesses and the result of the first level translation and page walk are guest physical addresses. Each guest physical address now can be used as in input to perform a second level address translation step . The result of the second level address translation is a host physical address with a corresponding access override information.

The host CPU can then access the host physical address location for the virtual machine program. It is possible that the host physical address is not valid step . If an invalid host physical address is encountered the host CPU can generate an exception and the CPU can be directed to resolve the address using the virtual machine monitor step . If the host physical address is valid then after a successful access to that location a new TLB entry may be generated. This new TLB entry will lessen the impact of future address translation to the same address because the TLB may be used to supply the host physical address as was performed in steps and .

In an aspect of the invention the second level address translation may be used by a host computer wherever a virtual address for an application or operating system requires translation to a host physical address. For example the second level address translation may be used where the host CPU is accessing local or machine memory such as random access memory or an I O location. The second level address translation also finds utility to resolve host physical addresses when direct memory access DMA operations are being set up. In the instance of DMA the host CPU can use aspects of the invention to resolve host physical addresses related to virtual addresses before the DMA operation begins.

Once the second level address lookup table entry is identified the entry may be read step . The table entry is a host physical address corresponding to the guest physical address received in step . In addition access control information may be read step that controls the access permissions for the host physical address. This host physical address access control information overrides the initial guest physical address access controls.

The corresponding hash table entry is a host physical address corresponding to the guest physical address received in step . In addition access control information may be read step that controls the access permissions for the host physical address. This host physical address access control information overrides the initial guest physical address access controls. One benefit of a hash table is that a range of hash table entries may be accessed by the method . Accordingly a range of guest physical to host physical address pairs may be searched per slot or group. This grouping provides a multiple entry search opportunity for the detection of the appropriate host physical address.

In the context of a virtual machine environment the computing environment of may be implemented with one or more processors where a host operating system may service a multiplicity of different virtual machines. In this context the configuration of provides an exemplary instance of a single CPU system with the capability to host multiple virtual machines each having an operating system and requesting hardware resources from the host computer of .

Although not required embodiments of the invention can also be implemented via an operating system for use by a developer of services for a device or object and or included within application software. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs appliances lights environmental control elements minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network bus or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.

With reference to an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer system typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to Random Access Memory RAM Read Only Memory ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disk Read Only Memory CDROM compact disc rewritable CDRW digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer system may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM CDRW DVD or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer system . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer system through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory not shown . In addition to monitor computer systems may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer system may operate in a networked or distributed environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer system although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer system is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer system typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer system or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s .NET platform available from Microsoft Corporation includes servers building block services such as Web based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device one or more portions of an embodiment of the invention may also be implemented via an operating system application programming interface API or a middle man object between any of a coprocessor a display device and a requesting object such that operation may be performed by supported in or accessed via all of .NET s languages and services and in other distributed computing frameworks as well.

As mentioned above while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to implement an fast translation from a guest virtual address to a host physical address in a virtual machine environment. Thus the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same similar or equivalent systems and methods achieved by embodiments of the invention.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the signal processing services of an embodiment of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While aspects of the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the claimed invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

