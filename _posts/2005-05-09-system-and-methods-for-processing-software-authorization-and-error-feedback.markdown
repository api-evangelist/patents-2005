---

title: System and methods for processing software authorization and error feedback
abstract: Software error feedback information, typically that associated with authorization failures due to operating system resource access checks, is automatically communicated to a software vendor with actions needed to prevent the software application error from occurring on the client computer. If possible, information associated with the software error is communicated to the client computer in order to mitigate the error by modifying how the client computer's operating system interacts with the software application so that the error may be avoided and user interaction minimized. Modifications may include automatically redirecting a resource request associated with the authorization failure in a manner such that authorization will be granted by the operating system and prevent the authorization failure due to the access check.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07886193&OS=07886193&RS=07886193
owner: Microsoft Corporation
number: 07886193
owner_city: Redmond
owner_country: US
publication_date: 20050509
---
The present invention relates to handling errors generated by software applications. More particularly the present invention relates to handling errors generated by software applications in the access of operating system resources.

With the advent of increasingly secure computer operating systems users often encounter errors when running software applications especially those unknown to the operating system. When those applications attempt to access various resources offered by the operating system due to increased access checks an error message often will appear that requires the user s interaction to continue or the application may be aborted or otherwise not be fully functional.

For example having end users indicate whether they trust an application that is unknown to the operating system before the operating system allows the application to run creates a number of problems. Users are typically ill equipped to assess trustworthiness and rightfully annoyed about being inundated with such requests.

In view of the above problems it would be beneficial to provide a system and method to process software authorization and error feedback to provide continuous improvement with minimal user interaction in the operation of existing software on increasingly secure operating systems having strict access checks. It would also be beneficial to provide a system that allows older or unknown software applications relative to a secure operating system to run smoothly and that minimizes the total number of user interactions required.

In view of the foregoing the present invention provides a method for processing software application error feedback. The method comprises automatically receiving software error feedback information from a client computer and determining whether modifying how the client computer s operating system interacts with the software application will prevent a software application error associated with the software error feedback information from occurring. Also if communicating information to the client computer that modifies how the client computer s operating system interacts with the software application will prevent the software application error from occurring then that information may be communicated to the client computer.

In another embodiment of the present invention a method is provided for processing software application error feedback information. Software error feedback information is automatically received from a client computer. The information comprises a particular software application in which the error occurred information regarding a problem receiving authorization from the client computer operating system to run the software a reason for authorization failure and whether the software application aborted operation or continued to run with limited functionality. The next acts comprise sorting software error feedback information according to which software applications cause the most frequent errors examining at least one of the software applications that caused the most frequent errors in determining whether modifying how the client computer s operating system interacts with the software application will prevent a software application error associated with the software error feedback information from occurring communicating information to the client computer that modifies how the client computer s operating system interacts with the software application if doing so will prevent the software application error from occurring and otherwise communicating the software error feedback information to a software vendor with actions needed to prevent the software application error from occurring on the client computer.

The present invention provides systems and methods to process software application errors to minimize user interaction and continually improve the software application and operating systems on which it runs. Software error feedback information typically that associated with authorization failures due to operating system resource access checks is automatically communicated to a software vendor with actions needed to prevent the software application error from occurring on the client computer. If possible information associated with the software error is communicated to the client computer in order to mitigate the error by technical means such as modifying how the client computer s operating system interacts with the software application so that the error may be avoided and user interaction minimized. Modifications may include automatically redirecting a resource request associated with the authorization failure in a manner such that authorization will be granted by the operating system and prevent the authorization failure due to the access check.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer .

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through an non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As mentioned a computer such as described above can be deployed as part of a computer network. Further the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. Thus the present invention may apply to both server computers and client computers deployed in a network environment having remote or local storage. More and more graphics applications are becoming deployed in network environments. thus illustrates an exemplary network environment with a server in communication with client computers via a network in which the present invention may be employed. As shown a number of servers etc. are interconnected via a communications network which may be a LAN WAN intranet or the Internet with a number of client computers etc. In a network environment in which the communications network is the Internet for example servers can be Web servers with which the clients etc. communicate via any of a number of known protocols such as hypertext transfer protocol HTTP . The invention may also leverage peer to peer networking techniques. Each client computer and server computer may be equipped with various application program modules other program modules and program data and with connections or access to various types of storage elements or objects across which files may be stored or to which portion s of files may be downloaded or migrated. Each client computer and server computer may also be connected to additional storage elements such as a database. Thus the present invention can be utilized in a computer network environment having client computers for accessing and interacting with a network and server computers etc. for interacting with client computers.

Referring next to shown is a block diagram illustrating interaction between a client computer a software distribution server software vendor and an operating system o s patch management module according to the present invention. Software applications to be run on the client computer may originate at the software vendor site or software distribution server . The software vendor is typically the party that is selling or otherwise providing the software application under a license to the end user at the client computer site . This software is then forwarded to a software distribution server through physical transportation of software storage media or through an appropriate communication channel such as a computer network described above. The software distribution server may be co located with the software vendor or remote from the software vendor but is the mechanism specialized to deliver the software to licensed end users at the client computer site and typically is a repository for operating system and other software ready to be released to the client computer often through various automated processes.

Once the client computer attempts to run the software application but encounters an error such as an authorization failure for example through the client computer s operating system that will not allow the software to run properly feedback regarding this error is communicated back to the o s patch management module . The information provided by the feedback includes but is not limited to the particular application in which the error occurred problems receiving authorization from the client computer s secure operating system to run the software the reasons for authorization failure and whether the software aborted operation or continued to run with limited functionality. Other relevant information pertaining to the failure may also be provided. If there was a problem with receiving authorization this may prevent the software application from starting correctly stop the software application from continuing to run or allow the software application to run but with limited functionality. An example of the reason for the authorization failure may be for example that the software application attempted to access a resource and received an access denied response. Actions automatic or otherwise may then be taken at the o s patch management module in response to the error feedback received . One such action may be to provide updated or different software to the client computer to either fix the error or allow the software to run on the client computer operating system. Also the feedback may be communicated to the software vendor so that the software vendor may take actions in addition to or instead of those at the software distribution server and provide software updates changes or authorizations to the software distribution server to transmit to the client computer . This shows that the feedback from the client computer flows to the o s patch management service which can patch the o s directly or feedback the triaged and categorized data to the software vendor for their action.

Also block could be shown to have more than one instantiation. Regardless it will be whether to patch the o s or to send the data to the software vendor for them to patch.

Referring next to shown is a flow chart illustrating the processing of software authorization and error feedback within the framework of according to the present invention. Once error feedback is received originating from the client computer it is sorted by the relative occurrence of the errors and the applications with the higher rates of reported errors are classified for priority attention in a triage fashion for example. It is then determined which errors can be mitigated by technical means . If so the errors are mitigated by technical means . For example if an error is the result of a user not having required access to a file or registry it may be possible to re direct a file open or registry open to a different location where the user does in fact have access. If so such a mitigation would be implemented through the communication back to the client computer and may also be automatic.

If the error can not be mitigated by technical means then one of the following actions may be manually or automatically chosen at the software distribution server based on the feedback provided test a fix for the error on other versions of the software application that are failing and then put the fix into a database that is distributed with regular software updates send the feedback results to the software vendor with specific actions or changes needed or as a fix modify the operation of the client computer s operating system to permit the software application to operate successfully and send the fix to existing client computers to effect the change in all copies of the operating system in the field. Such a fix may be for example to modify the operation of the operating system file or registry virtualization to permit the software application to operate successfully. One or more of the courses of action above may be taken in response to a particular error however usually only one course of action would be sufficient. Other actions may also be taken as appropriate in addition to or instead of those listed above to minimize the time the end user at the client computer must spend dealing with software authorization failures and errors.

The various techniques described herein may be implemented with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computer will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

The methods and apparatus of the present invention may also be embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as an EPROM a gate array a programmable logic device PLD a client computer a video recorder or the like the machine becomes an apparatus for practicing the invention. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates to perform the indexing functionality of the present invention. For example the storage techniques used in connection with the present invention may invariably be a combination of hardware and software.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example while exemplary embodiments of the invention are described in the context of graphics data in a PC with a general operating system one skilled in the art will recognize that the present invention is not limited to the PC and that processing of software authorization and error feedback may apply to any computing device such as a gaming console handheld computer portable computer etc. whether wired or wireless and may be applied to any number of such computing devices connected via a communications network and interacting across the network. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate. Therefore the present invention should not be limited to any single embodiment but rather construed in breadth and scope in accordance with the appended claims.

