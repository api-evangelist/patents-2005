---

title: System and method for installing one or more programs, and at least a portion of their environment
abstract: A system and method installs a computer program, as well as the environment in which the computer program operates, if such environment is not already installed. The program as well as its environment are obtained via one or more servers and a computer network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07913248&OS=07913248&RS=07913248
owner: Adobe Systems Incorporated
number: 07913248
owner_city: San Jose
owner_country: US
publication_date: 20050325
---
This application is related to U.S. application Ser. No. 11 090 402 entitled System and Method for Communicating Information Over a Network filed on Mar. 25 2005 by Kevin Lynch David Calaprice Ethan Malasky and Tracy Stampfli application Ser. No. 11 090 741 entitled System and Method for Updating One or More Programs and Their Environment filed on Mar. 25 2005 by Tracy Stampfli and Rebekah Hash each having the same assignee as this application and each is incorporated herein by reference in its entirety.

The present invention is related to computer software and more specifically to computer software for installing programs over a network.

Computer software may provide productivity or other benefits to a user of the computer software. However potential users of computer software may be reluctant to use or even try computer software because of the overhead involved in the acquisition of the computer software. Users who could benefit from the productivity enhancements or other benefits of the software do not receive them because they may be reluctant to overcome the hurdles involved in acquiring new software.

One such hurdle is the installation process itself. Many computer programs require the user to perform a complicated installation process before the software can be installed. If the computer software only runs in an environment that is not installed on the potential user s computer system the potential user must locate the environment install it and then install the computer software. For example if a user does not have the proper operating system that is a prerequisite of the latest software application the user must locate the operating system install it and then install the new computer software. Installing the environment and or the software can require the user to perform multiple steps such as downloading the software to a location remembering the location at which the software was downloaded running the software and then answering a number of questions about how and where to install the software. All of this can be a significant inconvenience to the user and the user may simply abandon efforts to obtain the benefits originally desired computer of the software when confronted with these issues. The problem becomes even greater when the user considers that the investment in time and energy to install the software and its environment are very real but the potential benefits to be obtained are unproven and might not ever be realized by that user.

In some cases the mere determination as to whether the potential user s computer system has the proper environment required by the computer software may itself represent overhead to the installation process that is sufficient to cause the user to avoid installing new software. For example if the computer software requires a particular minimum processor speed to operate the potential user may not know whether his or her computer system has a processor operating at that speed or the equivalent processor. The identification as to whether the potential user s computer system has the minimum required environment may be more trouble than the user is willing to undergo to attempt to obtain the as yet unproven benefits promised by the software. The potential user may not even have any idea how to go about making the determination as to whether his or her computer system meets the minimum requirements of the software and this problem can act as a further obstacle to installing the software.

Still another obstacle may be the problem of locating a place to purchase or license the software. A potential user may read about the software on the manufacturer s web site but the manufacturer may not sell or license the software from that web site requiring the user to search around for a retailer of that software.

Additionally the user may be reluctant to pay the cost of the software. The cost of the software may include markups from each of a distributor and the retailer which make the price of the software more expensive than the user can justify paying for software whose benefits to the user are not proven. If the software is not available in a retail store the user trusts the user may be reluctant to purchase license or otherwise obtain the software from an otherwise unknown and un trusted Web site.

Because of the time and trouble and the involved in performing these activities and the perceived risk of using an unknown source a user may be extremely reluctant to install software whose benefits are unproven. As a result many potential benefits of computer software are never achieved because the potential user is reluctant to go through the overhead of the installation process.

The overhead for the user is not the only reason that some software is not distributed. There is also overhead on the part of the software developer that can prevent some software from ever being made available in the first place. A new software manufacturer is required to set up an infrastructure for distribution including packaging design manufacturing retailing and distribution agreements and other overhead that may be too much effort for the developer of a niche application or one for which there is uncertain demand. The developer could attempt to market it from a web site but the effort involved in directing sufficient customer traffic to the web site could be too expensive e.g. due to advertising and public relations costs to make the effort worthwhile particularly for a new software developer. Furthermore the software developer might be required to assist potential users with the installation process including the determination as to whether the potential user s computer system contains the proper environment for the computer software. All of this overhead can prevent software that can provide benefits to a user from ever being developed in the first place.

What is needed is a system and method for distributing software that can identify whether a potential user s computer system contains the proper environment for the software can automatically install the proper environment on the user s computer system if it does not have it can automatically install the software for the user once the user s system contains the proper environment and can direct potential customers to obtain the product in a manner that potential users trust without requiring the developer to employ a distributor and retailer and their corresponding markups while reducing the support the developer is required to provide to potential users of the computer software.

A system and method detects whether a user s computer system has the environment required to run a program desired by the user and if not obtains and installs the environment. The system and method obtains the program and installs it. The system and method can list the programs available for the environment and allow the user to obtain and install any such program from within the environment increasing the chance that the user will trust the process and without requiring a separate retail distribution process.

The present invention may be implemented as computer software on a conventional computer system. Referring now to a conventional computer system for practicing the present invention is shown. Processor retrieves and executes software instructions stored in storage such as memory which may be Random Access Memory RAM and may control other components to perform the present invention. Storage may be used to store program instructions or data or both. Storage such as a computer disk drive or other nonvolatile storage may provide storage of data or program instructions. In one embodiment storage provides longer term storage of instructions and data with storage providing storage for data or instructions that may only be required for a shorter time than that of storage . Input device such as a computer keyboard or mouse or both allows user input to the system . Output such as a display or printer allows the system to provide information such as instructions data or other information to the user of the system . Storage input device such as a conventional floppy disk drive or CD ROM drive accepts via input computer program products such as a conventional floppy disk or CD ROM or other nonvolatile storage media that may be used to transport computer instructions or data to the system . Computer program product has encoded thereon computer readable program code devices such as magnetic charges in the case of a floppy disk or optical encodings in the case of a CD ROM which are encoded as program instructions data or both to configure the computer system to operate as described below.

In one embodiment each computer system is a conventional SUN MICROSYSTEMS ULTRA 10 workstation running the SOLARIS operating system commercially available from SUN MICROSYSTEMS Inc. of Mountain View Calif. a PENTIUM compatible personal computer system such as are available from DELL COMPUTER CORPORATION of Round Rock Tex. running a version of the WINDOWS operating system such as 95 98 Me XP NT or 2000 commercially available from MICROSOFT Corporation of Redmond Wash. or a Macintosh computer system running the MACOS or OPENSTEP operating system commercially available from APPLE COMPUTER CORPORATION of Cupertino Calif. and the NETSCAPE browser commercially available from NETSCAPE COMMUNICATIONS CORPORATION of Mountain View Calif. or INTERNET EXPLORER browser commercially available from MICROSOFT above although other systems may be used.

Referring now to a system for installing a computer program and optionally its environment is shown according to one embodiment of the present invention. System includes client computer system network and some or all of servers 

Client computer system is a conventional computer system such as a personal computer mobile telephone PDA or other computing device such as was described above with respect to . When a user wishes to install a computer program on client computer system the user navigates to a manufacturer web site using browser coupled via operating system to a conventional set of a keyboard mouse and monitor or other similar device via input output of communication interface which has a suitable interface. The user navigates browser by designating an address of web server to browser either by typing it into an address input box or clicking a link. Browser sets up a communication session with web server by providing a request to communication interface via operating system and communication formats and transmits the request to web server via network .

In one embodiment all communication into or out of client computer system over network is made via input output of communication interface . Communication interface is coupled via input output to network which may be any conventional networks such as the Internet or a local area network or both. In one embodiment communication interface is a conventional communication interface that supports Ethernet TCP IP and or other conventional communication protocols.

Communication interface sends the request to web server which may be any conventional web server. Web server sends a response that contains a web page file. Communication interface provides the web page file to browser which stores the web page file into storage via operating system . All files retrieved as described herein may be stored into storage which may be memory or disk storage as described above.

In one embodiment the web page file includes or references a file containing computer code and browser also retrieves and stores this file into storage . The file containing computer code may include a conventional Flash movie file specified by Macromedia Inc. at the web site Macromedia.com and such specification is incorporated by reference in its entirety. Although a Flash movie file is used herein any computer code that can cause a computer system to perform the functions described herein may be used according to the present invention. It is noted that in spite of the fact that the file is referred to as containing computer code other files described herein also contain computer code. 

In one embodiment this additional file containing computer code has a type that may be represented by the extension of the filename of the file and browser attempts to locate a plug in to the browser that is registered for the type of the file. If it does not locate the file browser requests it from code executor server . In the case of a Flash movie file the plug in is the Flash Player product commercially available from Macromedia Inc. of San Francisco Calif. Code executor server supplies a code executor which may be a plug in to browser or another product that is capable of executing code in the file containing computer code as described herein such as the Flash Player product described at Macromedia.com and such description is hereby incorporated by reference in its entirety. Code executor installs itself by registering to operating system browser or both and one or both of these associate code executor with one or more types of files that code executor identifies as being of any number of one or more types it is able to process. Although code executor is described herein as a plug in to a browser other items that can execute code as described herein may be used by the present invention.

Because the web page received from web server contains the file containing computer code having a name corresponding to the type registered by code executor browser causes the file containing the computer code to be executed by code executor . In one embodiment the computer code is Flash action script and other Flash movie code that is described in the help files of the Flash MX 2004 authoring tool and such description is hereby incorporated by reference in its entirety.

The file containing computer code and retrieved from web server is shown in in one embodiment of the present invention. Referring now to file may contain environment instruction set program instruction set each described below as well as other code that perform other functions. File may be a Flash movie file in the .swf format described at Macromedia.com and such description is hereby incorporated by reference in its entirety.

In one embodiment other code directs code executor to check if code executor itself is at least at a version specified in other code . If not other code directs code executor to instruct the user that a newer version of code executor is available and asks if the user wishes to retrieve it. If the user assents other code directs code executor to download the latest version of code executor and install it. Code executor performs such instructions by downloading the latest version from code executor server and registers it to browser operating system or both and may prompt the user to restart browser or client computer system . If the user assents to the prompt code executor directs operating system to restart browser or client computer system and operating system complies. The user may then begin the process of retrieving the web page again. This time code executor will be the correct version.

In one embodiment environment instruction set contains one or more instructions that instruct code executor to check client computer system for the proper environment and install it if necessary. Exhibit A illustrates representative code for checking to see if the Central product is installed and if not to install it. Exhibit A also contains code and instructions regarding the monitoring of the installation process. More detail on coding for Central may be found at macromedia.com devnet central on the World Wide Web. In one embodiment the program is a program that runs under the Central environment commercially available from Macromedia Inc. and described at the web site of Macromedia.com and the environment is a version or the latest version of the Central product commercially available from Macromedia Inc. An environment according to the present invention may include any one or more computer hardware or software product in other embodiments. The specifications of the proper environment may be provided in environment instruction set or may be inherent in it. For example Central may always be the environment.

In response to the instructions in environment instruction set code executor scans client computer system for the proper environment using conventional hardware and or software discovery techniques. For example to determine whether the Central product is installed code executor queries operating system to identify whether one or more files corresponding to the Central product or other environment have been stored in a subdirectory in which such files would have been stored if the product was installed.

If code executor determines that the proper environment is installed on client computer system code executor executes program instruction set in the file it is executing. Otherwise before executing program instruction set and under the directions set forth in environment instruction set code executor retrieves or orders the proper environment via network downloads it and installs it as will now be described.

In one embodiment to retrieve the proper environment code executor retrieves from environment supply server the file shown in . Although this file is described as a single file it may be multiple files or a part of another file such as file . Referring now to A and B the file of is shown according to one embodiment of the present invention. Code executor obtains the address of environment supply server either internally within code executor to ensure that a malicious supplier of environment instruction set does not supply a rogue environment or from environment instruction set described above and requests the file via communication interface and optionally via browser .

File contains code in a set of one or more instructions describing a user interface or the user interface strings that can be used in a predefined user interface that code executor contains internally or retrieves from code executor server or environment supply server in response to a command in instructions that informs the user that the environment is required to install the software and prompts the user for permission to install it. The user interface may contain user interface elements such as text messages push buttons and the like as well as code that can be executed by code executor for example all in the form of a Flash movie or Flash movie clip. Code executor executes the code and displays the user interface which may contain a push button to allow the user to indicate agreement to install the environment. If the user so indicates using the user interface displayed code executor executes the one or more instructions in retrieve install instruction set that instruct code executor to retrieve the environment or those portions of the environment that may have been identified when code executor scanned client computer system . File may contain other code in addition to the sets described herein 

Code executor obtains the environment or portion thereof from environment supply server and installs the environment for all or any portion of the environment that is software. The location of the environment may be specified in file or file or it may be specified internally as part of code executor .

If hardware is necessary for the proper environment in one embodiment code executor may order it from environment supply server for delivery to the user and provide instructions for its installation into client computer system .

Once the proper environment has been installed code executor may attempt to redetect the environment to confirm that the proper environment has been installed by reexecuting some or all of environment instruction set or it may skip such redetection. If the proper environment has been installed code executor executes instruction set .

In one embodiment the proper environment consists of any or all of a boot loader master controller agent manager application manager and console manager described in one of the related applications. These items together are included as the conventional Central product commercially available from Macromedia.com although other environments may be used according to the present invention.

Instruction set contains one or more instructions that instruct code executor to obtain the program that was initially desired by the user. In one embodiment the program consists of any or all of an agent an application and one or more pods as described in the related application. Each of these items may consist of one or more files or a portion of a file and all files are specified by a manifest having an address on manifest server specified by program retrieval instruction set .

Code executor retrieves the manifest from manifest server via communication interface network and optionally browser as specified by program retrieval instruction set . In one embodiment the manifest is an XML file that specifies the location of the one or more files of the program.

Code executor under direction of program retrieval instruction set then parses the manifest to identify the location of the one or more files that make up the program. In one embodiment the files for a given program are located on one or more files server that is different from manifest server however in another embodiment files server and manifest server are the same set of one or more servers. In one embodiment for security purposes code executor enforces a rule that requires the manifest and all files for the corresponding program to come from a single internet domain to ensure that a third party does not alter the manifest to cause unauthorized files to be retrieved and installed. Under the direction of program retrieval instruction set code executor retrieves the one or more files into storage. and then installs the program corresponding to the files. In one embodiment installing the program involves copying or logically moving by renaming the some or all of the files for the program retrieved from files server to a location on storage that the environment described above can access although other embodiments may involve other conventional file installation activities such as decompressing them or registering them via a registry.

Under control of program retrieval instruction set code executor then executes or directs operating system to execute the program installed using the environment. In one embodiment the program is one or more Flash movies executed by the agent manager application shell manager and console manager each including a Flash movie player modified as described in the related application and its related Flash movie operating under the direction of a master controller which includes a Flash movie player and its related Flash movie as described in the related applications. Execution of the program may be performed by directing operating system to run a boot loader described in the related application and providing the name or other identifier of the program to the boot loader. The boot loader provides the name or other identifier of the program to the master controller which causes the program to be executed as described in the related application.

Servers may be operated by or on behalf of the same commercial entity but one that is different from the one or more commercial entities that operate servers or on whose behalf such servers are operated. In one embodiment different programs may be retrieved from different manifest servers and different files servers . Different web servers may be used to initiate the process for different programs. Although two of each such servers are shown in the figure any number of sets of such servers may be used and as noted above each set of servers may be combined to a fewer number of servers.

It is noted that the only user intervention involved is the request for the original web page and an optional confirmation to install the environment if it is not already installed. All of the other steps can occur without user intervention although additional user intervention steps may be involved at any point in the process.

In one embodiment certain programs are installed with the environment. One such program contains an application and an agent that operates under control of code executor as described in one of the related applications. The agent retrieves from environment supply server a list of available programs and for each such program a description thereof and a link that enables the program to be downloaded. Each item on the list may be registered by developers or distributors of applications along with the URL or other location on manifest server from where the file containing computer code may be located. The application displays the list and when the link is clicked the agent retrieves the file containing the computer code as described above and the installation process proceeds as described above under the direction of that file. The file need not contain environment instruction set because the environment is already installed. In one embodiment instead of the file containing computer code the URL in the list contains a URL to the manifest for the program in manifest server and the agent provides code executor with the instructions that would have been in the file to start the installation of the program by retrieving the manifest and continuing as described above.

The agent and application contain instructions for performing these functions and are stored in storage and executed by code executor . In such embodiment code executor operates as the agent manager consisting of a Flash player modified as described in the related applications and operating under the direction of its associated movie file and application shell manager consisting of a Flash player modified as described in the related applications and operating under the direction of its associated movie file as described in the related applications.

Step may involve checking an existing plug in or other means of executing the code file for a version identifier that is at least as high as that specified in the code file prompting the user to retrieve a newer version and receiving assent from the user. Step may involve retrieving a newer version of the plug in or other means of executing the code file installing it prompting the user to restart the browser or the computer system and restarting the browser or computer system with the user beginning again at step as indicated by the dashed line in the Figure or the method continues at step .

At step the computer system on which the program is to be installed which may be the same computer system from which the request was generated in step is checked to determine whether it has the proper environment to run the program as described above. If the computer system has the proper environment the method continues at step and otherwise one or more servers that can be used to obtain the environment are identified and the environment or whatever portion may not reside on the computer system is obtained over a network using the one or more servers as described above and the environment or such portion is installed and the method continues at step in one embodiment or step in another embodiment illustrated by the dashed line in the Figure. Step may include retrieving a file containing a user interface and instructions used to prompt the user to request permission to install the environment as described above and or a file containing the text of the prompts as described above. Step may include receiving and installing one or more programs that are supplied with the environment such as a program that performs steps as described above.

At step the client computer system onto which the program is to be installed is optionally checked to determine whether the program is already installed. If so the program is run and otherwise a manifest describing the location of the one or more files that make up the program is located as described above and the manifest is obtained over a network and the method continues at step . In one embodiment no check is made to determine whether the program is already installed and so steps and are not performed and step follows step unconditionally.

The manifest is parsed to identify the one or more locations of the one or more files corresponding to the program . Some or all of the files described by the manifest are requested and received over a network as described above and optionally installed. The program corresponding to the one or more files retrieved in step is run in one embodiment although in another embodiment illustrated by the dashed line in the Figure step follows step instead of step directly following step .

Once the environment is installed any of the installed programs may be run as described in step and the related applications. In one embodiment the program is a program that lists programs available for installation and allows the user to have them installed with a single click of a button. If such program is run as in step a list of available programs is requested from a server over a network. The programs may have been developed by various commercial entities descriptions of which are stored in the server. The list of programs and details about the programs such as its developer any length of a free trial period and the price of the program is received from the server and displayed to the user in a manner that allows the user to select a program from the list . A selection is received from the user corresponding to one of the programs on the list. Step or in one embodiment may follow step with the location of the manifest for each program being contained in the list and the manifest and its location of the selected program being used in step . Alternatively step may be performed between steps and either step or step with step involving retrieving a file containing code as described above from a location specified for that program on the list received in step .

Referring now to a system for obtaining and operating a computer program and optionally its environment is shown according to one embodiment of the present invention and is a different way of describing the system described with reference to A and B that performs the method of . Browser operates as browser described above. Browser stores the web page into browser storage as well as the specification of the environment and the location of the manifest both from the code file. Browser also downloads environment check manager optional program check manager manifest retriever program files retriever program files installer and program operator as part of the code file and signals environment check manager . When signaled environment check manager identifies whether the client computer system on which browser operates contains the proper environment for the computer program. If so environment check manager signals program check manager in one embodiment or manifest retriever in another embodiment. If not environment check manager signals environment permission retriever manager .

Environment permission retriever manager downloads environment permission manager environment retriever and environment installer and signals environment permission manager . When signaled environment permission manager causes instructions to be provided to the user that some or all of the environment is required and prompts the user to install it. If the user responds in a manner that indicates that permission to install the environment is granted environment permission manager signals environment retriever which retrieves the environment and may also retrieve certain programs that appear to the user as preinstalled stores it into environment storage and signals environment installer which installs the environment as environment and installs any such preinstalled appearing programs such as agent and application and signals program check manager or manifest retriever .

Optional program check manager when signaled attempts to locate in program files storage the program having the name specified in browser storage that was retrieved as part of the code file. If the program is located program check manager signals program operator and otherwise signals manifest retriever .

When signaled manifest retriever retrieves the location of the manifest from browser storage retrieves the manifest from that location stores it into manifest storage and signals program files retriever . Program files retriever retrieves the program files corresponding to the manifest stores them into program files storage and signals optional program files installer in one embodiment or program files operator in another embodiment. When signaled program files installer installs the program files in program files storage for example by copying them or renaming them into another area of program files storage . Program files installer signals program operator which retrieves the name of the program from browser storage or manifest storage and runs the program for example by signaling environment with the program name as described above. Program operator may be part of environment .

Environment may run any program including the program that contains agent that retrieves from a server the list of programs that can be installed provides the list to an application which displays it to the user allows a selection to be made and then provides the location of a file containing code to manifest retriever to initiate the installation process of the program selected.

 here we wait for status messages letting us know if the user cancels the Central install or if it downloads completely.

Calling download the actionscript command System.product.download executes Flash player code which brings up a dialog within the Flash movie asking the user if they want to download Central.

In order to display this dialog the Flash player first queries a cgi file on macromedia.com supplying the name of the

If the user ok s the install dialog the Flash player queries the cgi file again getting the file to download based on the platform OS.

During the install process actionscript in our browser movie can poll periodically until the install is complete and Central is running.

We create a LocalConnection object in our Flash movie which is used to talk to a LocalConnection object in Central LocalConnection is an actionscript object enabling communication between say two different Flash movies in different browser windows or a Flash movie in a browser and one in the standalone player etc. It basically works by a Flash player instance writing information into shared memory and checking that memory on idle to see if any messages have written for it . myLC new LocalConnection call the localconnection function send . Parameters are the name of the localconnection we want to send to macromedia.com central the method of that localconnection we want to call installService the location of the product.xml file identifying our application and the name of a localconnection we have created to receive status messages about the install. myLC.send macromedia.com central installService productXMLUrl statusConnection 

