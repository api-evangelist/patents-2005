---

title: Heuristically detecting spyware/adware registry activity
abstract: Methods, apparati, and computer-readable media for detecting the presence of malicious computer code in a computer. In a method embodiment, persistence points in an operating system of the computer are examined (). When a pointer to a temporary directory is found () at a persistence point, a declaration is made () of a suspicion of malicious code being present in the computer. Second and third method embodiments are used when the computer has a native operating system () controlling hardware () functions and a user-interface operating system () built on top of the native operating system (). A fourth method embodiment is used when the computer has an operating system comprising a kernel () and a user interface ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08104086&OS=08104086&RS=08104086
owner: Symantec Corporation
number: 08104086
owner_city: Mountain View
owner_country: US
publication_date: 20050303
---
This invention pertains to the field of thwarting a category of malicious computer code known as spyware or adware.

Spyware adware is a category of malicious computer code that is a growing nuisance and a threat to the privacy of computer users.

Spyware is software that persists itself in an unusual or an obnoxious way on the user s computer. The computer does not know that the spyware is present. The user did not give permission to the spyware to reside on the user s computer. The spyware may be difficult to uninstall even manually. It tries to mask its presence as it extracts something from the user s computer. The item that is extracted might be relatively innocuous such as a marketing preference or something very important such as the user s credit card number.

Adware may visibly display a pop up ad on the user s computer or it may simulate clicks from the user to obtain revenue for an advertiser. Adware can range from quasi legitimate to deceitful.

Regardless of the particular definitions that are employed this category of malicious computer code is an increasing menace and must be thwarted while minimizing the rate of false positive declarations of spyware adware.

Methods apparati and computer readable media for detecting the presence of malicious computer code in a computer. In a method embodiment persistence points in an operating system of the computer are examined . When a pointer to a temporary directory is found at a persistence point a declaration is made of a suspicion of malicious code being present in the computer. Second and third method embodiments are used when the computer has a native operating system controlling hardware functions and a user interface operating system built on top of the native operating system . A fourth method embodiment is used when the computer has an operating system comprising a kernel and a user interface .

A first method embodiment of the present invention is illustrated in . The method starts at step . At step persistence points associated with the computer s operating system are examined by an inventive module. The inventive module can be implemented in any combination of hardware firmware and software. When implemented in software the inventive module may reside on any computer readable medium such as a hard disk floppy disk CD DVD etc.

While the invention will be described in the context of a single inventive module performing the inventive steps said inventive steps can just as easily be performed by a plurality of inventive modules performing individual inventive steps. For example with respect to the method embodiment illustrated in there can be separate examination detection and declaration modules that are coupled together.

By persistence point is meant an item file or program that remains associated with the operating system even when the operating system is rebooted. Thus persistence points include registry locations shortcut locations and initialization files.

At step the inventive module inquires as to whether there exists a pointer from a persistence point to a temporary directory. For example in Windows operating systems there is a temporary directory where items are placed for short term use. It is within a hidden directory usually the user doesn t even see it. If there is no pointer from the persistence point to a temporary directory control is passed back to normal functions of the computer at continuation step . If on the other hand there is a pointer from a persistence point to a temporary directory the inventive module declares a suspicion of malicious code being present in the computer at step .

The theory behind this first method embodiment is that persisting out of a temporary directory is unusual and therefore inherently suspicious. Spyware adware has a need to persist but a temporary directory is normally used for items that do not persist.

A computer architecture usable with the second and third method embodiments is illustrated in . A native operating system controls hardware of the computer. A user interface operating system is built on top of the native operating system and is used by the human user to control the functioning of the computer. A set of APIs Application Programming Interfaces is associated with user interface operating system . Similarly a set of APIs is associated with native operating system . The user interface APIs are different than the native APIs . APIs can for example be used to construct a registry editor which edits values of registry . An example of this architecture is a Windows32 operating system built on top of a WindowsNT operating system .

Other examples of this architecture are the Windows 95 operating system being built on top of a DOS operating system DOS being built on top of the Windows98 operating system and Unix being built on top of the WindowsNT operating system . This architecture is a fairly standard technique used to aid porting.

Said second and third method embodiments are illustrated in . The method starts at step . At optional step the inventive module verifies that the architecture of the computer being examined is one in which a user interface operating system is built on top of a native operating system as illustrated in . If not control is passed to normal functions of the computer at step . If this architecture is present step is performed at which the inventive module inquires as to whether a registry value points to a file with a path length greater than the maximum path length allowed by the user interface operating system . For example in Windows32 the maximum path length is 260 bytes whereas in WindowsNT the maximum path length is 65 536 bytes. If there is a registry value pointing to a file having a path length greater than the maximum path length allowed by the user interface operating system step is performed otherwise step associated with the third method embodiment is performed.

At step the inventive module inquires as to whether the file identified in step uses a path syntax associated with the native operating system . For example this could be the UNC syntax in the case where the native operating system is WindowsNT. A UNC designation for a file starts with . If step determines that the file identified in step uses a path syntax associated with the native operating system the inventive module declares at step as previously described in conjunction with a suspicion of malicious code being present in the computer.

Thus ends the description of the second method embodiment. It will be noted that two conditions must be satisfied in said second embodiment for a declaration of a suspicion of malicious code to be made namely 1 a registry value points to a file having a path length greater than the maximum path length allowed by the user interface operating system and 2 said file has a path syntax associated with the native operating system . The theory behind the second embodiment is that the spyware adware author has used a path length and a syntax associated with the native operating system in order to disguise the file from the purview of the user interface operating system . For example the registry editor is normally written using the user interface APIs and thus wouldn t normally be able to detect or delete the unconventional file hidden in registry by the spyware adware author. Yet this file can nevertheless be executed by the user interface operating system .

The third method embodiment is illustrated in step where the inventive module inquires as to whether there is a registry value having a null character as the last character of the value. If so step is performed at which the inventive module declares a suspicion of malicious code being present in the computer. If not normal functions of the computer are resumed at step as before.

The theory behind the third method embodiment is that the top operating system uses registry values that terminate in the null character whereas the bottom operating system does not. For example Windows32 uses registry values that terminate in the null character while WindowsNT uses a length based nomenclature. This enables the spyware adware author to hide his code. For example in the WindowsNT operating system the spyware adware author might write a registry value as 4FOO where is the null character. The beginning numeral 4 gives the number of bytes in the value. The Windows32 operating system translates this value to F00 because there has to be a at the end of the value. This enables the Windows32 operating system to read the value. However said operating system cannot write to or delete the value because when it translates back down to WindowsNT terminology it translates the value into 3FOO not the original 4FOO . This makes the value non deletable.

As an optional condition to be satisfied before step is entered the inventive module can inquire as to whether the registry value having a null character as the last character of the value is associated with a persistence point. If so it is an even stronger indication that malicious code is present in the computer.

When a declaration is made at step of a suspicion of malicious code being present in the computer for either of the first second or third method embodiments the inventive module can perform at least one of the three following steps 

monitor the location where the suspected malicious code is present this can yield information concerning who inserted the code there for example by examining the date and

perform additional investigative techniques on the suspected malicious code e.g. subject it to an anti virus anti worm or anti spyware adware scan.

A fourth method embodiment of the present invention is used when the architecture follows that illustrated in . In the operating system has a kernel surrounded by a user interface . This architecture is used by all Windows operating systems from Windows95 on and all versions of UNIX LINUX and Solaris but not for example DOS or Windows3.0 or Windows3.1.

The fifth method embodiment of the present invention is illustrated in and begins at step . At optional step the inventive module inquires as to whether the operating system is of the type illustrated in . If not control is passed to the continuation module as before.

If the operating system is of the type illustrated in step is performed wherein an enumeration module portion of the inventive module performs an enumeration operation in kernel mode. This produces a list of all the items present in kernel . Then at step enumeration module performs an enumeration operation in user mode. This produces a list of all the items present in user interface . At step comparison module portion of the inventive module determines whether there are items that are present in kernel that are not present in user interface . If not control is passed to continuation module as before. If on the other hand there are items that are present in kernel that are not present in user interface these items are flagged at step by flagging module portion of the inventive module as being of special interest. At this time these items can be investigated further to see whether in fact they comprise spyware adware. It would be imprudent to delete these items without further investigation because they could comprise security software which is typically placed inside kernel . Thus deleting such items would produce false positives.

The theory behind the fifth method embodiment is that if a piece of spyware adware is stealthed it will appear in the kernel but not in the user interface .

The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the art that would yet be encompassed by the spirit and scope of the present invention.

