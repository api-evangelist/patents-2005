---

title: Presentation of media content
abstract: A media services interface for use in a readable medium playback device enables synchronization of disparate media playback, network directed playback of media, media playback control via displayed html/javascript file, logging of consumer identifier, media identifier, and playback device identifier in a cookie or log file. The media services comprises a command handler, a properties handler, an event generator, a cookie manager, a navigator state module, an identifier engine, an initialization module, and a bookmark manager. The command handler executes commands received from a connected network, a displayed html/javascript file, etc. The properties handler provides information relating to system states in response to queries including the status of any network connections. The event generator generates events in response to predetermined system occurrences. The cookie manager records information for later reading including the tracking of consumer identifier, playback device identifier, and readable medium identifier triples. The navigator state module maintains information regarding the state of the playback device and the interaction with the readable medium. The identifier engine carries out determination of the identity of the readable medium. The initialization module controls system initialization. The bookmark manager generates bookmarks which preserve positions in the playback of the readable medium for later recall. Network sources can provide media content and issue commands which synchronize the playback of both network and readable medium originated content over multiple playback devices through the use of the synchronization abilities of the media services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454515&OS=07454515&RS=07454515
owner: Sonic Solutions, A California corporation
number: 07454515
owner_city: Novato
owner_country: US
publication_date: 20050520
---
The present patent document is a continuation of U.S. patent application Ser. No. 09 935 756 filed Aug. 21 2001 now U.S. Pat. No. 7 178 106 of Lamkin et al entitled PRESENTATION OF MEDIA CONTENT FROM MULTIPLE MEDIA SOURCES which is a non provisional of provisional application Ser. No. 60 226 758 filed Aug. 21 2000 and a non provisional of provisional application Ser. No. 60 246 652 filed Nov. 7 2000 and a non provisional of provisional application Ser. No. 60 251 965 filed Dec. 5 2000 and a non provisional of provisional application Ser. No. 60 259 075 filed Dec. 29 2000 and a non provisional of provisional application Ser. No. 60 302 778 filed Jul. 2 2001 and a continuation in part of application Ser. No. 09 644 669 filed Aug. 24 2000 now abandoned and a continuation in part of application Ser. No. 09 649 215 filed Aug. 28 2000 which is a continuation in part of application Ser. No. 09 644 669 filed Aug. 24 2000 now abandoned which is a non provisional of provisional application Ser. No. 60 220 397 filed Jul. 24 2000 and a continuation in part of application Ser. No. 09 295 856 filed Apr. 21 1999 now abandoned and a continuation in part of application Ser. No. 09 296 202 filed Apr. 21 1999 now abandoned and a continuation in part of application Ser. No. 09 296 098 filed Apr. 21 1999 now U.S. Pat. No. 6 453 420 and a continuation in part of application Ser. No. 09 295 688 filed Apr. 21 1999 now abandoned and a continuation in part of application Ser. No. 09 295 964 filed Apr. 21 1999 now U.S. Pat. No. 6 665 489 and a continuation in part of application Ser. No. 09 295 689 filed Apr. 21 1999 now U.S. Pat. No. 6 405 203 and a continuation in part of application Ser. No. 09 295 826 filed Apr. 21 1999 now abandoned and a continuation in part of application Ser. No. 09 476 190 filed Jan. 3 2000 now U.S. Pat. No. 6 944 621 and a continuation in part of application Ser. No. 09 488 345 filed Jan. 20 2000 and a continuation in part of application Ser. No. 09 488 337 filed Jan. 20 2000 and a continuation in part of application Ser. No. 09 488 143 filed Jan. 20 2000 now abandoned and a continuation in part of application Ser. No. 09 488 613 filed Jan. 20 2000 now U.S. Pat. No. 6 679 130 and a continuation in part of application Ser. No. 09 488 155 filed Jan. 20 2000 now U.S. Pat. 6 941 383 and a continuation in part of application Ser. No. 09 489 600 filed Jan. 20 2000 now U.S. Pat. No. 7 188 193 and a continuation in part of application Ser. No. 09 488 614 filed Jan. 20 2000 now abandoned and a continuation in part of application Ser. No. 09 489 601 filed Jan. 20 2000 and a continuation in part of application Ser. No. 09 489 597 filed Jan. 20 2000 and a continuation in part of application Ser. No. 09 489 596 filed Jan. 20 2000 and a continuation in part of application Ser. No. 09 499 247 filed Feb. 7 2000 now U.S. Pat. No. 6 529 949 and a continuation in part of application Ser. No. 09 898 479 filed Jul. 2 2001 now U.S. Pat. No. 7 346 920 which is a non provisional of provisional patent application Ser. No. 60 216 822 filed Jul. 7 2000 and a continuation in part of application Ser. No. 09 912 079 filed Jul. 24 2001 now abandoned which is a non provisional of provisional patent application Ser. No. 60 220 400 filed Jul. 24 2000.

All of the above referenced patent documents are hereby expressly incorporated herein by reference as if set forth in their entirety.

The present invention relates to the presentation of multimedia content and more particularly to the presentation of locally stored media content combined with remote interactively obtained network media content.

In marketing many things have been long recognized as aiding success such as increasing customer satisfaction through such devices as providing personalized service fast service access to related or updated information etc. Traditional marketing has made use such things as notice of promotional offers for related products such as providing coupons etc. Additionally some studies have shown that simple repeated brand exposure such as by advertisement increases recognition and sales.

One of the largest marketing industries today is the entertainment industry and related industries. To date digital versatile disks DVDs are poised to encompass consumer sales of home entertainment business and home computer industry and business information market with a single digital format eventually replacing audio CDs videotapes laserdiscs CD ROMs and video game cartridges. To this end DVD has widespread support from all major electronics companies all major computer hardware companies and all major movie and music studios.

Currently the fastest growing marketing and informational access avenue is the Internet. The share of households with Internet access in the U.S. soared by 58 in two years rising from 26.2 in December 1998 to 41.5 in August 2000 Source Falling Through the Net Toward Digital Inclusion by the National Telecommunications and Information Administration October 2000 .

Some initial efforts have been made to integrate the success of optical disks such as the DVD with the speed and accessibility of the Internet. Programs such as music players currently are able to access the internet to obtain artist information order music etc. for inserted disks. However in the DVD video arena little has been done to utilize the vast power for up to date new and promotional information accessibility to further the aims of improving marketability and customer satisfaction.

Accordingly it is evident that improvements are possible in the way that entertainment computing and academic disks have been supported.

The present invention advantageously addresses the needs mentioned previously as well as other needs by providing an application programming interface that facilitates the access and use of related or updated web content to provide augmented or improved content with playback of DVD content.

In one embodiment the invention can be characterized as an integrated system for combining web content and disk content comprising a display a computing device operably coupled to a removable media a network and the display the computing device at least once accessing data on the network the computing device comprising a storage device a browser having a presentation engine displaying content on the display an application programming interface residing in the storage device a decoder at least occasionally processing content received from the removable media and producing media content substantially suitable for display on the display and a navigator coupled to the decoder and the application programming interface the navigator facilitating user or network originated control of the playback of the removable media the computing device receiving network content from the network and combining the network content with the media content the presentation engine displaying the combined network content and media content on the display.

In another embodiment the invention can be characterized as a method comprising a receiving a removable media b checking if said removable media supports media source integration c checking if said removable media source is a DVD responsive to said removable media supporting source integration d checking whether said device is in a movie mode or a system mode responsive to said removable media being a DVD e launching standard playback and thereafter returning to said step a responsive to said device being in said movie mode f checking if said device has a default player mode of source integration when said device is in said system mode g launching standard playback and thereafter returning to said step a responsive to said device not having a default player mode of source integration h checking if said removable media contains a device specific executable program when said device having a default player mode of source integration i executing said device specific executable program when said device has said device specific executable program and thereafter returning to said step a j checking whether said device has a connection to a remote media source k launching a default file from said removable media when said device does not have a remote media source connection and thereafter returning to said step a l checking whether said remote media source has content relevant to said removable media m displaying said relevant content when said relevant content exists and thereafter returning to said step a n otherwise launching a default file from said removable media and thereafter returning to said step a o returning to said step f .

The following non patent documents are hereby incorporated by reference as if set forth in their entirety InterActual API Design Guidelines for Consumer Electronics Manufacturers InterActual Application programming interface API Specification also called InterActual API Specification .

An application programming interface API of the present embodiment is based on a scripting model leveraging e.g. industry standard HTML and JavaScript standards for integrating locally stored media content and remote interactively obtained network media content e.g. video content on a web page. The application programming interface API enables embedding e.g. video content in web pages and can display the video in full screen or sub window format. Commands can be executed to control the playback search and overall navigation through the embedded content.

Additionally the application programming interface can be queried and or set by the use of properties. Effects may be applied to playback. Video sequences have an associated time element during playback and events are triggered to provide notification of various playback conditions such as time changes title changes and user operation UOP changes. Events can be used for use in scripting and synchronizing video with HTML or read only memory ROM based content.

A goal of the application programming interface API is to enable content developers to create products that seamlessly combine e.g. the Internet with content from other digital versatile disk read only memory DVD ROM digital versatile disk audio DVD Audio and compact disc audio CD Audio . Hereinafter by the use of DVD Video it is to be understood that all three of these disk disc media are included. The combination of the Internet with DVD Video creates a richer more interactive and personalized entertainment experience for users.

Further the application programming interface API provides a common programming interface allowing playback of this combined content on multiple playback platforms simultaneously. While the application programming interface API allows customized content and functions tailored for specific platforms the primary benefit of the application programming interface API is that content developers can create content once for multi platform playback without the need of becoming an expert programmer on specific platforms such as Windows Macintosh and other platforms. The document InterActual Usage Guide for Developers hereby incorporated by reference describes this in more detail for DVD content developers.

Internet connectivity is not a requirement for the use of the application programming interface API . Stand alone systems with web browser functionality are all that is required. In addition compact disc digital audio CD DA can also be enhanced by use of the application programming interface API . This is also described in the document InterActual Usage Guide for Developers hereby incorporated by reference .

Personal video recorders PVRs such as the TiVo RePlay and digital versatile disk recordable DVD R devices enable the ability to purchase video or audio products by downloading them from a satellite or other high bandwidth system when implemented with the present invention. When so downloaded the video or audio can be stored to a local disk system or burned onto a DVD R.

The application programming interface API provides a basic set of guidelines for the production of internet connected DVDs and for the playback of these enhanced DVDs on a range of computer set top platforms and players. Based on the industry standard publishing format hypertext markup language HTML and JavaScript the application programming interface API provides a way to easily combine DVD Video DVD Audio and CD Audio with and within HTML pages whereby HTML pages can control the media s playback. The application programming interface API provides a foundation for bringing content developers consumer electronics manufacturers browser manufacturers and semiconductor manufacturers together to provide common development and playback platforms for enhanced DVD content.

Regarding shown is a general example of a display device receiving content from local and offsite sources according to one embodiment.

The display device is coupled to the local content source as shown by a bi directional arrow. The display device is coupled to the offsite content source as shown by a bidirectional arrow.

In operation the display device displays video and or hypertext markup language HTML documents to a user. In an alternative embodiment the display device can be audio only. Display device can be any device capable of displaying an external video feed or playing an external audio feed such as but not limited to a computer a set top box gaming platforms or a player. The display device receives content for display from either the local content source or the offsite content source . The local content source in one embodiment can be any device capable of playing any media disk including but not limited to digital versatile disks DVDs digital versatile disk read only memories DVD ROMs compact discs CDs compact disc digital audios CD DAs optical digital versatile disks optical DVDs laser disks DATAPLAY streaming media PVM Power to Communicate etc. The offsite content source in one embodiment can be any device capable of supplying web content or HTML encoded content such as but not limited to a network connected server or any source on the Internet.

Shown are a local content source an offsite content source a computer a microprocessor and a memory .

The local content source is coupled to the computer . The offsite content source is coupled to the computer . The computer includes the microprocessor and the memory .

In operation computer is any computer able to play display both video or audio provided by the local content source and or web or HTML content as provided by the offsite content source . Additionally computer can display both video and web HTML content synchronously according to one embodiment of the present invention. Microprocessor and memory are used by computer in executing software of the present invention.

Shown are a local content source an offsite content source a set top box a microprocessor a memory and a television .

In operation set top box enables selection between video or audio provided by the local content source and web or HTML content as provided by the offsite content source . The set top box provides selected content to television for display. Additionally set top box can combine both video and web HTML content synchronously according to one embodiment of the present invention and provide the same to television for display. Microprocessor and memory are used by computer in executing software of the present invention.

Referring to shown is a diagram showing the interaction between an embedded web browser and a media subsystem according to one embodiment.

The hardware platform executes both the embedded web browser and the media subsystem . The embedded web browser is coupled to the media subsystem . The media subsystem is a superset of media services including DVD navigator for DVD disc. The media services is discussed in greater detail in relation to later herein. When the media is not disc oriented the media navigation is carried out by another component.

In operation the hardware platform has microprocessor or other processing circuitry as shown in executing both the embedded web browser and the media subsystem . The hardware platform can be any device suitable for the present invention such as but not limited to television set top boxes DVD players computers etc.

The application programming interface API provides a common programming interface for hypertext markup language HTML and ECMAScript a standardized script based on JavaScript and the like for ensuring playback of enhanced content on multiple playback platforms. Internet connectivity is not required for the use of the application programming interface API when content originates from disk ROM.

The application programming interface API facilitates the playback of audio and or video embedded within a web page. The application programming interface API can play back full screen video or video within a web page window sub window . Audio and or video is embedded within a HTML encoded page by use of an appropriate tag such as but not limited to the object tag for the Microsoft Windows operating system and the embed tag for the Apple Macintosh Liberate operating system .

Optionally on players that support the ATVEF standard the object could be referenced in the following manner 

After the DVD Video object is embedded in the web page it can be accessed using any style sheet link or scripting language. Values for the ID string must begin with a letter A Z or a z and may be followed by any number of letters digits hyphens and periods up to a maximum of 48.

Unlike computers set top boxes do not generally have a full featured operating system and browser. Therefore the capabilities within the browser are often more restricted. For embedding DVD Video within these platforms using the application programming interface API the InterActual indentifier ID must be integrated within the embedded browser as any other tag structure. The ID allows the API to be associated with the HTML object. With this approach any embedded browser that encounters the InterActual tag would automatically associate this identifier with the application programming interface API .

The application programming interface API provides interaction with hardware platform by means of commands or methods properties and events. Commands also called methods are executed to control the playback of search of and navigation through video and or audio content. The environment can be queried to ascertain the status of various properties. Events are triggered by the occurrence of various operating or playback conditions and serve to provide notification of these playback conditions. Events are essential for scripting and the simultaneous presentation of the media content audio and or video with other web assets such as text graphics etc. . Thus properties are passive provided in response to queries and events are active provided without queries .

Commands such as InterActual.PlayTitle allows the HTML content to control playback of the media. Commands are parsed by the browser presentation engine described later in greater detail in reference to and then passed to the DVD navigator described later in greater detail in reference to to effect playback.

Properties allow the HTML content to query for state information of the DVD navigator. An example includes InterActual.TitleNumber. Properties are parsed by the presentation engine and passed thereafter to the DVD navigator. In response the DVD navigator interprets the query and returns the requested information.

Events allow the HTML content to receive state information from the DVD navigator. An example of an event notification would be InterActual.TitleEvent. Events are propagated from the DVD navigator to the browser presentation engine whenever the requested state changers. The HTML content can subscribe to events using any of the event handlers as described in the application programming interface API specification.

The display device contains the screen able to display graphics and text. The content area contains the sub window also referred to as a video window or alternate frame .

An important aspect of this embodiment is that audio and or video can be integrated with other content such as text and or graphics described in web compatible format although the source need not be the Internet but can be any source such as a disk or server able to deliver this content .

As an example the sub window displays movie content such as the movie T2 and the content area displays text and or graphics provided by HTML coding which is topically related to the part of the movie playing in the sub window . When the user viewer interacts with the content in the content area such as by clicking on a displayed button effects will be reflected in the media sub window . As an example clicking on buttons or hypertext links indicating sections or particular points in the movie results in the video playback jumping to the selected point. Additionally the media displayed in sub window can result in changes in the content area . As an example progression of the movie to a new scene results in a new text display giving information about the scene.

A primary feature of the application programming interface API is the ability to view HTML pages while playing video and or audio content. The concurrent playback of browser and video places additional requirements on the processing power and memory of the underlying hardware. Each DVD semiconductor solution should be designed to perform both of these functions simultaneously. A required feature of the application programming interface API is the ability to display downscaled video within a frame of a web page. Additionally video upscale is another feature of an embodiment as HTML content is already being designed with the assumption that this capability will be available in future devices.

As example of one embodiment is a movie authored with the entire screenplay provided on the DVD disk in HTML format. When a viewer clicks on any screen visually represented in HTML the system links the viewer to that scene by use of the command InterActual.SearchTime to go to the specific location within a title within the DVD Video. Besides being capable of a finer granularity than the normal chapter navigation provided on DVD Video the HTML based script can contain other media such as a picture by use of the command InterActual.Displaylmage or special audio by use of the command InterActual.SelectAudio and or live links for other information. Further the text of the screenplay in HTML could automatically A scroll with the DVD Video to give the appearance of being synchronized with the DVD Video. Although many of these types of features can be authored in DVD Video except of course live web links and synchronized scrolling HTML authoring is much more efficient immediate and widely known.

Shown are a DVD device an embedded web browser a presentation engine a web browser application programming interface for media services DVD hardware a DVD navigator a media services a DVD decoder and an internet .

The DVD device includes both the embedded web browser and the DVD hardware . The embedded web browser includes the presentation engine . The embedded web browser is coupled to the web browser application programming interface for media services which in turn is coupled to the DVD hardware . The DVD hardware includes the DVD navigator and the DVD decoder . The DVD navigator includes the media services . The media services is coupled to the DVD decoder . The DVD device is coupled to the internet . The media services corresponds to the media subsystem but has a more specific implementation. The media subsystem is a superset of the media services and includes DVD navigator for DVD disc.

With the DVD device the user is able to interact with an enhanced DVD on a television in the same fashion as can be experienced on a computer. The display area of a television can show video and HTML content concurrently. This is accomplished by the embedded web browser in the DVD player. As discussed herein in reference to the HTML content can control the playback of the video through embedded application programming interface API commands.

The embedded web browser is responsible for displaying the HTML content authored on InterActual compatible disks stored locally on device or served from a remote server location. The embedded web browser also supports concurrent playback of video and audio while presenting the HTML page.

The presentation engine of the browser must provide for the embedding of video within web pages. Embedding video within web pages defines the location where the video is played. This location information is then parsed by the presentation engine and passed to the underlying video rendering engine.

The presentation engine of the embedded web browser parses the HTML instructions for controlling the media playback generates any graphic portions of the display positions a video window when it exists and also interfaces directly with the underlying DVD Navigator. InterActual specific instructions are interpreted by the presentation engine and passed to a DVD abstraction layer which can be part of the embedded browser or developed by the DVD navigator manufacturer. This layer serves as an abstraction that makes it possible to map the browser into a DVD player specific DVD navigator developed either by the semiconductor manufacturer or the player manufacturer. Of course the DVD Navigator interfaces with the underlying video and audio decoders.

The web browser application programming interface for media services or DVD navigator abstraction layer is a very thin interface layer between the presentation engine and the media services .

The DVD Navigator abstraction layer may be developed by the player manufacturer or the semiconductor manufacturer. To support a flexible and portable solution the DVD navigator abstraction layer is recommended to reside in between the browser and the DVD navigator . Abstracting the communication between the browser and navigator offers a more robust and portable design so that either the browser or the navigator can be changed in future player designs.

The media services serves as a middleware layer between web browser application programming interface for media services and the DVD navigator . The media services facilitates content running in the embedded web browser to control the DVD navigator . The media services allows the DVD navigator to work with any web browser compliant with the present embodiment.

The DVD decoder interfaces between the DVD media interface hardware contained in the DVD hardware and the DVD navigator .

Referring to shown are the details for the web browser application programming interface for media services of .

Shown are an embedded web browser a command handler with command API a properties handler with properties API an event generator with event API a cookie manager with cookie API an identifier engine an initialization module a navigator state module a bookmark manager a system resources a system timer a system monitor a system initialization a DVD CD navigator a user remote control a front panel display module a CD decoder a DVD decoder an I O controller a disk a HTML JavaScript content and an InterActual API .

The embedded web browser is coupled to the command handler which has an associated command API as shown by a bidirectional arrow. The embedded web browser is coupled separately to the properties handler which has an associated properties API the event generator which has an associated event API and the cookie manager which has an associated cookie API all three connections shown by an arrow pointing towards the embedded web browser .

The command handler is coupled to the bookmark manager shown by a bi directional arrow. The command handler is coupled to the DVD CD navigator shown by a bidirectional arrow. The command handler is coupled to the navigator state module shown by a bi directional arrow. The command handler is coupled to the system resources by an arrow pointing to the system resources .

The properties handler is coupled separately to the bookmark manager and the identifier engine both shown by an arrow pointing to the properties handler . The properties handler is coupled the event generator by a bi directional arrow.

The event generator is coupled to the navigator state module shown by a bi directional arrow. The event generator is coupled to the system timer shown by an arrow pointing to the event generator . The event generator is coupled to the cookie manager by an arrow pointing to the cookie manager .

The identifier engine is coupled to the I O controller by an arrow pointing towards the identifier engine and to the navigator state module by a bi directional arrow.

The initialization module is coupled to the system initialization by an arrow pointing towards the initialization module . The initialization module is coupled to the navigator state module by an arrow pointing to the navigator state module .

The navigator state module is also coupled separately to the bookmark manager and the DVD CD navigator by bi directional arrows.

The DVD CD navigator is coupled to the user remote control by an arrow pointing to the DVD CD navigator . The DVD CD navigator is coupled to the front panel display module by an arrow pointing to the front panel display module . The DVD CD navigator is coupled to the DVD decoder by a bi directional arrow.

The I O controller is coupled separately to both the DVD decoder and the CD decoder by arrows pointing away from the I O controller . The I O controller is coupled to the disk by an arrow pointing to the disk .

The disk is coupled to the HTML JavaScript content by an arrow pointing to the HTML JavaScript content .

The HTML JavaScript content is coupled to the Application programming interface API by an arrow pointing to the Application programming interface API .

In operation the embedded web browser receives HTML JavaScript content from disk which is displayed by presentation engine . The embedded web browser originates commands as a result of user interaction which can be via the remote in set top systems the keyboard or mouse in computing systems the game interface in gaming systems etc. which are sent to the command handler by way of the command API. The embedded web browser also receives commands from the command handler by way of the command API. An example of such a command is InterActual.FullScreen w . The embedded web browser also receives cookies from the cookie manager via the cookie API generally in response to the accessing of an Internet website. The embedded web browser also receives events notifications each of which is a notification that a respective defined event generally related to media playback has occurred. These events are generated by the event generator and sent via the event API. The embedded web browser also queries properties from the properties handler via the properties API. Properties are received in response to inquiries generated by the embedded web browser .

The command handler controls the DVD CD navigator including starting and stopping playback changing audio streams and displaying sub pictures from JavaScript among many things. The command handler provides live web content for non InterActive disks when an active Internet connection is present through such commands as InterActual.NetConnect and InterActual.NetDisconnect . The command handler commands the bookmark manager through such commands as InterActual.GotoBookmark and InterActual.SaveBookmark . The command handler also interacts with the navigator state module generally regarding user interaction. The Navigator state module keeps the current state of the system and receives it directly from the decoder or maps directly into it . When the bookmark manager is going to save a bookmark and needs to know the current title the bookmark manager receives it from the navigator state module and places it in a bookmark and returns it to the command handler to allow it to provide a return value to the InterActual.SaveBookmark command.

The properties handler provides the embedded web browser with the ability to interrogate the navigator state module for the DVD CD navigator state which includes the properties also referred to as attributes of the elapsed time of the current title the disk type and the disk region among others. The properties handler maintains knowledge of system attributes. The Event Generator monitors these attributes and triggers and event when one is changed.

The event generator provides notification to the DVD CD navigator of events such as a change of title or chapter with web content based on DVD time codes and the system time from the system timer . The event generator notifies the properties handler of event triggerings which are of interest to the properties handler . The event generator also provides events to the cookie manager such as relate to the accessing of web pages disk insertion and disk ejection events.

The cookie manager interacts with the identifier engine to provide the ability to save information regarding the disk platform current user and the application programming interface API version in local storage.

The identifier engine provides the ability to generate a unique identifier for the media which enables the DVD ROM content HTML and JavaScript from the disk to carry out platform validation to ensure a certified device is present. The identifier engine provides the ability to serialize each disk by reading and processing the information coded in the burst code area BCA of the disk. The BCA is read by the identifier engine and stored in the navigator state module . Hence commands such as InterActual.GetBCAField can get the BCA information from the navigator state module after insertion of a disc. This BCA information provides the ability to uniquely identify each disk by serial number. Conditional access to content usage tracking and other marketing techniques are implemented thereby. The identifier engine gets the BCA information for the serial identifier SerialID hashes the video .IFO file to identify the title called the MediaID and then reads the ROM information to establish a data identifier DataID for the HTML JavaScript data on the disc. The identifier engine provides this information to the navigator state module which stores this information and provides it to whichever of the command handler properties handler or event generator needs it. The identifier engine interacts with the navigator state module. The identifier engine receives the BCA information read differently than files from the I O controller . The identifier engine interacts with the cookie manager to place disc related information read from the BCA as discussed previously herein into the InterActual System cookie.

The initialization module provides the ability to establish the DVD CD navigator environment. The initialization module allows the internal states and the State Modules i.e. the navigator state module to be initialized. This initialization also includes reading the current disc in the drive and initializing a system cookie. It is noted that the embedded web browser interfaces which allow registering a callback for the event handler are established at power up as well.

The navigator state module provides the ability to coordinate user interaction and DVD behavior with front panel controls and or a remote control. In one embodiment arbitration of control happens in the navigator itself between the remote and front panel controls. DVD CD navigator playback is initiated by the navigator state module in response to input from the initialization module . The navigator state module receives locations of book marked points in the video playback from the bookmark manager and controls the DVD CD navigator accordingly.

The bookmark manager provides the ability for the JavaScript content to mark spots in video playback and to return later to the same spot along with the saved parameters which include angle sub picture audio language and so forth. The bookmark manager provides the ability to use video bookmarks in conjunction with web bookmarks. As an example a video bookmark is set a web session is launched going to a preset web book marked source to retrieve video related information then later a return to the video at the book marked spot occurs.

The system timer provides time stamps to the event generator for use in determining events for synchronization or controlled playback.

The system monitor interacts with the properties handler . In one embodiment the system generates a 900 millisecond timer tick as an event which the HTML JavaScript uses in updating the appropriate time displays as is needed. For systems that do not have a DVD Navigator that creates events the timer is used to poll the property values every 900 milliseconds and compares the poll results with a previous result. If the result changes then an event is generated to the HTML JavaScript.

The DVD decoder generally receives the media stream from the I O controller and decodes the media stream into video and audio signals for output. The DVD decoder receives control from DVD CD navigator .

The CD DA decoder receives a media stream from I O controller and decodes it into audio which it provides as output.

The I O controller interfaces with disk and controls its physical movement playback and provides the raw output to the appropriate decoder. The I O controller also provides disk state information to identifier engine .

The disk can be any media disk such as but not limited to DVD ROM DVD Audio DVD Video CD ROM CD Audio.

Shown are a disk a ROOT directory a COMMON directory a MAC directory a WIN directory a NUON directory and a SONY directory .

The disk includes each of the directories listed the ROOT directory the COMMON directory the MAC directory the WIN directory the NUON directory and the SONY directory .

In one embodiment the application programming interface API uses the file structure depicted in to access platform specific binaries. Platforms for which directories are defined include the MAC Macintosh operating system NUON VM labs NUON technology SONY Sony playstation WIN Microsoft Windows operating systems . Other directories are allowed and can be used when desired such as LINUX for the LINUX operating system NINTENDO Nintendo Dolphin SEGA Sega Dreamcast and XBOX Microsoft X Box .

The directory structure allows for proprietary executable binary files for each platform. The platform specific directory structure and its associated set of binaries enable any platform to run executables specifically designed for that platform. This capability in essence allows the platform specific binaries to override the general purpose content or override the standard browser mechanism. While actual ROM content may reside in a platform directory in one embodiment all ROM content resides in the COMMON directory when possible. The COMMON directory can support any number of subdirectories including platform specific directories.

The COMMON directory and platform specific directories are standardized however each platform developer is free to create their own subdirectory structure under their reserved platform specific directory. As example Sony may create PS2 and PS3 subdirectories under the SONY directory .

The COMMON directory stores the actual ROM content as opposed to platform specific binaries . It is recommended that all ROM content including platform specific ROM content reside in this directory as this facilitates an intuitive content development approach and provides an easy way for JavaScript to be used to detect platforms and render the appropriate HTML pages tailored to specific platforms when required.

Even if platform specific binaries are included on the disk the general purpose content can still be called. In one embodiment a DVD utilizes the directory structure by placing the Windows version of software in the WIN directory the Macintosh version of PCFriendly in the MAC directory and so forth. Upon insertion of the disk whichever platform the disk has been inserted into will execute the appropriate binaries found in that platform s directory and autorun and these binaries thereafter load the INDEX.HTM file located in the COMMON directory which is the starting point for any general purpose InterActual compatible disk. The meta data tag in the head section of the INDEX.HTM file in one embodiment contains the Application programming interface API version information. The INDEX.HTM file serves as a background container web page during standard playback that allows JavaScript event handlers to be loaded and activated to handle button events during playback. JavaScript can be used to detect platforms and render the appropriate HTML pages customized for those platforms.

The specifications for DVD video and DVD audio require that each disk contain specific directories and files. As example DVD video files are contained in a directory named VIDEO TS and DVD audio files are contained in a directory named AUDIO TS. There is no such requirement for DVD ROM so developers can arrange files in any desired manner.

Files stored for use with InterActual compatible disks can be in any DVD disc directory. In the case where no platform specific executable file exists there must be a method which allows the browser and or playback engine to identify the initial HTML file.

During disk creation DVD video zone files must be placed physically at the beginning of the disk contiguously in the order specified by the DVD video specification. Likewise DVD audio zone files must follow the DVD video files in contiguous order.

In one embodiment the VIDEO TS and AUDIO TS directories are the first entries in the directory descriptor. In one embodiment the ROM zone files are placed in subdirectories rather than the ROOT directory.

The placement of files on a dual layer disk DVD 9 DVD 14 or DVD 18 is generally independent of the layer details. DVD video and DVD audio files must begin on layer . ROM zone files are placed at the end beginning on whichever layer the DVD video or DVD audio files end on and can cross the layer boundary if needed.

DVD authoring systems and tools support different naming capabilities such as UDF ISO 9660 ISO 9660 with Joliet extensions Macintosh file names Macintosh resources hybrid disks etc. Some authoring systems force a certain character capitalization such as all capitals .

The first phase is InterActual disk detection where the disk is checked to determine if it has InterActual content. This is done by seeking the INDEX.HTM file in the COMMON directory on the disk. If the INDEX.HTM file exists then the DVD is compatible with the present embodiment otherwise it is not.

The second phase is disk type detection where the disk is checked to determine if it is a DVD Video DVD Audio or CD DA disk.

The third phase is player mode detection where the device is checked to determine the default playback mode for the system. This is done by reading the player mode by the properties query InterActual.PlayerMode. When the device is configured for play mode content in accordance with the present embodiment in one embodiment is bypassed.

If the default playback mode for the device is InterActual mode then content in accordance with the present embodiment is launched beginning with COMMON INDEX.HTM. The content itself can be updated dynamically if there is an active Internet connection. When there is no active Internet connection the device will render the content from the disk ROM.

For disks not in accordance with the present embodiment in players with a default playback mode of InterActual the default content homepage CONNECT.HTM is rendered and an Internet connection is attempted to potentially provide web content.

The fourth phase is platform specific file detection where directories on the disk are checked to determine if any platform specific files are located. This is done by searching for the appropriate file structures for the device.

The fifth phase is internet connection determination where the device is checked to see whether an Internet connection is active or possible. The system can access and updated content files for the current title of disks in accordance with the present embodiment. For non enhanced titles the system will look online to see if there is any content available for the current title. If there is such content the system can offer the same interactive experience as a title in accordance with the present embodiment affords.

When the device is in player mode play a disk in accordance with the present embodiment can display a logo to signify that there is content in accordance with the prtesent embodiment available from the disk ROM.

Referring to shown is part of one exemplary algorithm for handling disk insertion according to one embodiment resulting in the launching of different contents depending on disk determinations.

Algorithm begins when a user inserts a media disk into a device at insert disk block and determines if the inserted disk is a DVD or music CD in accordance with the present embodiment block .

When the determination block is that the inserted disk is not a disk in accordance with the present embodiment the algorithm continues through connector A to the corresponding connector A in .

When the determination block is that the inserted disk is a disk in accordance with the present embodiment the determination is next made whether the disk is a DVD block .

If the result of the determination of block is that the disk is a DVD a check is made whether the author mode is movie mode or system mode block . If the author mode is movie mode standard DVD playback is initiated block . If the author mode is system mode the determination is made whether the default player mode is InterActual block . If it is not the algorithm launches standard DVD playback block . If it is the determination is made whether platform specific binaries exist for the current platform block and if so platform specific binaries are launched block . If no platform specific binaries are found the determination is made whether there is an active Internet connection block and if not the file INDEX.HTM is launched from the DVD block . If there is an active Internet connection a check is made for web content for the current title block and if there is content for the current title it is displayed block .

If the result of the decision at block is that the disk is not a DVD the determination is next made whether the default player mode is InterActual block and if not CD standard playback is launched block . If the default player mode is InterActual a check is made for any platform specific binaries block and if any are present the platform specific binaries are launched block . If there are no platform specific binaries a check is made whether there is an active Internet connection block and if not INDEX.HTML is launched from the CD ROM block . If there is an active Internet connection a check is made for web content for the current title and if there is any it is displayed block . If there is no web content for the current title INDEX.HTML is launched from the CD ROM block .

A disc in accordance with the present embodiment is detected by checking for the existence of the COMMON INDEX.HTM file. The application programming interface API version information can be found in the meta data area of the HTML file.

Referring to shown is part 2 2 of the exemplary algorithm for handling disk insertion according to one embodiment resulting in the launching of different contents depending on disk determinations.

Algorithm continues from connector A connector in and begins at connector A connector in . A determination is made whether the disk is a DVD block and if the disk is a DVD a check is made whether the default player mode is InterActual block . If the default mode is not InterActual standard DVD playback is launched block . If the default playback mode is InterActual then DEFAULT.HTM is launched from memory block .

If the disk is determined to not be a DVD block a check is made whether the default player mode is InterActual block and if it is not standard playback is launched block . If the default player mode is InterActual block DEFAULT.HTM is launched from memory block . After launching DEFAULT.HTM a check is made whether an active Internet connection exists block and if not standard playback is launched block . If an active Internet connection exists a check is made for online content for the current title block . If no online content is found for the current title standard playback is initiated block . If online content for the current title is found the online content found is displayed block .

The server is coupled to the Internet shown by a bidirectional arrow. The Internet is coupled separately to both the interactive device and the interactive device shown by bi directional arrows.

DVDs can be used for multiple user synchronous use. Generally this is done by having a prearranged time for an event such information could be programmed on the disk or provided to users from online content accessed via the disk at which time interested users connect to a prearranged website by use of the appropriate disk. The network site can control all connected devices by sending commands such as play pause fast forward etc. By this manner content resident on the disks as well as live web originated content can be synchronously interwoven for any number of connected users simultaneously. With the server being coupled to the interactive devices the server can send commands to these devices for remotely controlling content stored on local interactive devices connected to a network system such as the Internet. First the interactive devices begin with the same interactive content such as a DVD Video disk. The interactive devices and a server are adapted to be connected to a network. In operation information is transmitted from the server to the interactive devices that begin playback of the interactive content utilizing the network. Each interactive device receives the command at the same time and thus the commands and therefore the content are synchronized at start of playback. If the interactive devices support different commands such as a playing at a given time or only playing at a given chapter the server must utilize the supported features for the interactive device and send out only the supported commands to the interactive devices. This allows for the simultaneous playback of the event on each of the client apparatuses. Late synchronization can be achieved by a similar method by sending a command from the server to the interactive devices of the current time position the DVD Video is playing. For those interactive devices that only support chapter commands the server must wait until the next chapter change to send the command to the interactive device to synchronize with the other interactive devices currently viewing the DVD Video. Furthermore This allows content such as DVD Video content to be locked so that play can only be accomplished through verification of interactive devices identity and also allows augmentation and supplementation of the content provided by the video from a remote server. Upon verification of a interactive device s credentials the locally stored content can be supplemented with additional content delivered over the network system. This is achieved by using precise command sequences from the server to the interactive devices that unlock the local DVD Video for example.

DVDs can be used for multiple user synchronous use. Generally this is done by having a prearranged time for an event such information could be programmed on the disk or provided to users from online content accessed via the disk at which time interested users connect to a prearranged website by use of the appropriate disk. The network site can control all connected devices by sending commands such as play pause fast forward etc. By this manner content resident on the disks as well as live web originated content can be synchronously interwoven for any number of connected users simultaneously.

Shown are a view button pressed block a web view a content view an InterActual mode and a full screen mode .

A user has two views between which he or she can switch one being from the world wide web WWW and the other being from the disk content. Users accessing a display device by remote control has in one embodiment access to both views or worlds at any time through the view button. Additionally in one embodiment a graphics subsystem can support this by having two graphic planes one for each view. By having a separate disk content view the content owner can control the presentation of information scripts pictures videos etc. . This aids in merchandising of the content.

In the example of by use of a remote control view button at view button pressed block the user can select either the web view or the content view . The content view is the INDEX.HTM file residing in the COMMON directory on a disk which is a cross platform or multi platform file designed to be viewable on substantially all of the supported platforms. Alternatively the content view is the CONNECT.HTM file from the storage of the device used in lieu of the INDEX.HTM for example when no disk is inserted or when a disk not in accordance with the present embodiment is inserted .

The web view is the InterActual compatible device s home page. This page is under the control of the device manufacturer. As an example this page may contain the manufacturer s logo and or system device specific information. Alternatively this page may be determined by user controlled settings of the device.

The content view is the content home page and resides at COMMON INDEX.HTM on a disk or as CONNECT.HTM in the device s memory e.g. flash ROM . Depending on the player mode of the device the content view can default to either InterActual mode or full screen mode .

When a disk contains InterActual content the content authors can create it such that the user experience begins with the InterActual content. This is an option available to the disk authors at the time of authoring.

Shown is a remote control having a back button a view button a home button an IA InterActual button a stop button a next button a prev button a play button an up button a left button a right button and a down button .

The back button has different uses. In an Internet view the back button goes back to the previously visited web page. In a content from disk view the back button goes back to the last web page or video web page combination which was viewed.

The view button switches between a full screen Internet or web view to a full screen content from disk view.

The home button has different uses. In an Internet view the home button goes to the device s home page which as example could be the manufacturers page or a user specified page if changed by the user. In a content from disk view the home button goes to the content home page which as example could be INDEX.HTM from the disk ROM or CONNECT.HTM from the flash system memory.

The IA button or InterActual button is a dedicated button which is discussed in greater detail under the subheading context sensitive application later herein in reference to .

The playback buttons stop next prev previous and play control the video whenever there is video being displayed either in full screen mode or in a window . If no video is being displayed pressing of the play button in one embodiment loads a special page VIDPLAY.HTM if it is present in the COMMON directory of an inserted disk ROM. If the VIDPLAY.HTM file is not found pressing of the play button in one embodiment plays the DVD in full screen video mode.

The navigation buttons up left right and down in one embodiment do not work for DVD navigation unless video is playing in full screen mode. If video is playing in a window within a web page these buttons enable navigation of the web page especially useful for navigating to and selecting HTML hyperlinks. In this embodiment the windowed video will be a selectable hyperlink as well. Selecting the video window by an enter button not shown causes it to change to full screen video. In another embodiment a mouse or other pointing device such as a trackball hand glove pen or the like can be integrated with the system.

In one embodiment use of a unique event and a special button on the remote control a specific section in the media can trigger a context sensitive action. Events that are used for this purpose are context sensitive to the media content. As example an event can trigger during a certain scene upon which in response to a user s selection of an object within the scene can display information relating to the selected object.

In one embodiment when media content subscribes to a particular event for context sensitive interaction which can be done on a chapter or time basis the DVD navigator can optionally overlay transparently some place on the display alerting the user that context sensitive interaction is available. Similar to when a network logo is transparently displayed at the bottom of a television screen in one embodiment an InterActual logo is displayed to signify there is more info available for the displayed scene and so forth. This ability is implemented through the media services and the graphical subsystem of the DVD navigator .

The server is coupled to the Internet . The Internet is coupled to the computer with the cookie shown being communicated along the connection between the computer and the Internet .

In operation a user causes computer to access a web page resident on the server via the connections through the Internet. In so doing the website containing the accessed web page causes the cookie to be sent to the computer and stored on a local storage drive for later reference by the storing website.

A cookie is information that a web site server side program puts on a client s computer or permanent storage so that information is retained from browsing session to browsing session or later use in the same session . Typically a cookie records user specific information such as past user choices during interaction with the web site. Cookies are useful because the nature of the hypertext transfer protocol HTTP used by the World Wide Web WWW is that each web page request is completely independent of all other requests. Thus a cookie is a mechanism which allows a web site to retain access to past interaction history with particular clients.

The embedded browser supports two types of cookies system cookies and general purpose cookies. System cookies are predefined in both name and size as part of the Application programming interface API . System cookies are automatically created and modified by the player hardware and embedded browser. General purpose cookies are cookies that can be placed by web pages. Both system cookies and general purpose cookies may be volatile or non volatile maintained even if storing system is powered off depending on their specific function.

Platform cookie a non volatile cookie of 32 bytes length that contains unique hardware information including a hardware identifier for the device.

UserID cookie a non volatile cookie of 32 bytes length that contains unique user login information useful for multi user households .

An application programming language version cookie a non volatile cookie of 32 byte in length which maintains version information for the supported levels of the application programming interface API .

Player Mode cookie a non volatile cookie of 32 bytes length which maintains the default player mode for the Application programming interface API playback movie mode or InterActual mode.

Disk cookie a volatile cookie of 214 bytes length which contains currently inserted disk information including a unique ID generated by local hardware based on hashing algorithm provided by InterActual and 2 the id field from PCFreindly titles based on the file DISC.ID provided the disk is a PCFreindly PCF disk. This cookie is generated with null content when no disk is currently in the drive.

The application programming interface API also provides for a minimum of 100 general purpose cookies that can be used by general web sites. Each of these cookies can be up to 200 bytes in size therefore the minimum storage requirement for cookies is determined as follows 

In operation bookmark records the necessary information to return to the same point in the video playback of video by recording the title number time position chapter angle sub picture and language.

Bookmarks maintain the state of player by storing general parameter registers GPRMs for a specific title. Video bookmarks mark where the video player state was last. For the application programming interface API one bookmark per title is required. In one embodiment 32 bookmarks are recommended.

A bookmark has a minimum size of 10 bytes. There is at least one bookmark per disk. These bookmarks are managed in a queue such that creating a new bookmark for a specific disk using the disk cookie will overwrite the last bookmark in the queue for that disk provided the queue is full. If a new disk is encountered the oldest bookmark of the set is overwritten. In one embodiment a capacity of 32 bookmarks is required which requires a minimum of 320 bytes of persistent storage.

A more detailed treatment of bookmarks and the bookmark queue is presented in Application programming interface API Specification hereby incorporated by reference .

In an embodiment one megabyte 1 MB of cached simultaneous content is recommended. In an embodiment the cache size should be specified in the hypertext transfer protocol HTTP header sent between the player and attached servers. Larger local storage for caching web pages and the like can be used with the present invention.

In one embodiment the Application programming interface API content support for fully compatible InterActual compliant devices is defined in the two areas of content format support and content type support as follows 

Content format support according to one embodiment of the present invention includes hypertext transfer protocol HTTP version 1.0 hypertext markup language HTML version 4.0 frames tables event handler extensions CSS version 1 DOM version 0 ECMAScript version 1.1 note ECMAScript and DOM 0 is equivalent to JavaScript version 1.1. Requires platform and language detection SSL version 2.0 Application programming interface API version 1.0 embedding commands properties and events cookies used to store hardware platform information and essential disk identification information .

Mandatory content type support includes MPEG1 and MPEG2 video files WAV AU AIFF and MP3 audio files GIF JPEG and PNG graphics files

The advanced format support is not required for a standard implementation. Advanced formats include but are not limited to Macromedia Flash this is encouraged as Flash is very popular for studio DVDs extensible markup language XML Chat and streaming media such as MPEG4 Real Player and Quicktime. With the advent of modern and other advanced Internet connectivity solutions more additions to the advance format capabilities will be made.

A DVD Video is shipped with a simple HTML page that does little except start a movie. However it also checks to see if that movie has any web site updates. If it does then it launches a new movie menu that is downloaded from the web. Obviously the downloaded menu can be designed much later than the DVD. The menu may have e commerce opportunities such as promoting gifts for purchase tickets for the sequel to the movie on the DVD etc. The window of time of these opportunities is decided by the content owner and is completely independent of the DVD. The menu can have links to actors actresses featured in the DVD. Additionally the menu can provide options to navigate the DVD with finer granularity than the original chapters on the DVD provide.

DVDs authored with different logos at the head such as logos for Best Buy Circuit City or the like can be used for advertising purposes. For example the disk start up can be specified to display the logo of the original retailer and the consumer can be directed to access the retailer s website for promotional advertisements. This can be accomplished by checking the burst cutting area BCA on the disk which would indicate the identity of the retailer.

Following is presented an exemplary list of the commands properties and events for several embodiments of the InterActual Programming Interface. This list is presented as follows 

Commands will control the playback and navigation mechanisms of a DVD Video Audio or CD DA disc. Commands can be used by the calling application HTMUJavaScript to initiate these functions. This section provides a detailed description of each InterActual command with its associated parameters.

Properties can be used to find information about commonly used variables such as time title and chapter. They are read only by definition. Where it makes sense to set a specific property there will be an associated command to do so.

All properties must be supported and contain a value within the range specified. If a property doesn t exist or is not supportable at the time then the property should return the value not implemented or ni for character or 1 numeric values.

Events are integral to synchronizing DVD Video with other media. With these events web pages can be synchronized with the audio or video. For example each ChapterEvent start of new chapter can trigger an HTML storyboard that corresponds to the movie. Time based events can be used to coordinate advertising messages in HTML while the video is playing when James Bond is driving his BMW an appropriate web page BMW or auto sales site can automatically be displayed at the same time.

The value of events is that these external media do NOT have to be embedded or even be known at the time the DVD Video is authored. This flexibility keeps DVD Video authoring on schedule and greatly minimizes the authoring costs while adding valuable and unique features to each disc.

Events can be used by the calling application HTML JavaScript C or other to receive notification of DVD playback status. There is an EventHandler function required which will switch on the event type index see below and call the appropriate function. If a platform does not support an event then an error code must be returned when its use is attempted. Here is an example of an event handler in JavaScript 

The following table lists the event indices that will be generated by the browser. There is a skip in the enumeration for advanced events and platform specific events. We have reserved unique events for specific platforms like the PC or Macintosh.

There is a command enabling subscribing to events or unsubscribing to events see Interactual.SubscribeToEvent listed in the command section .

The table lists event the index and which parameter is returned. The details for each event type and associated parameters follow however TitleGroup and Slide are described in the DVD Audio section of this document as they are specific to DVD Audio only.

The following list of InterActual API events must be supported and the number and meaning of the parameters they will receive is detailed. For example the title event is index number 1 and a private function such as TitleEvent will receive one parameter the others will be null and it will be the new title number see below for an explanation .

The following matrix depicts the applicability of each component of the interface commands properties and events depending upon the state of the system. An X indicates that the entity is executable in this state if the user operations UOP bits allow it these bits are set by the disc content itself.

Stop state means no specific title is selected and on computers the DVD navigator is not instantiated.

File open means the state reached when calling the advanced API Open command with a filename as the argument. In other words the DVD navigator is instantiated and a file not a DVD title has been selected. Hence the DVD navigation features are not available.

If the JavaScript calls InterActual.Open DVDVideo you will automatically transition to the Play state because First PGC will be played.

The interface described in this appendix are not required however they can be implemented and an InterActual disc can interrogate the system using the SupportFeatures command to determine if the current device supports them.

