---

title: Workflow decision management with workflow modification in dependence upon user reactions
abstract: Methods, systems, and computer program products are provided for workflow decision management. Embodiments include maintaining a device state history; identifying a device usage pattern in dependence upon the device state history; identifying a workflow scenario in dependence upon the device usage pattern; identifying a workflow in dependence upon the workflow scenario; executing the workflow; identifying a user reaction to the execution of the workflow; identifying an unsuccessful device-controlling action in dependence upon the user reaction; and modifying the workflow in dependence upon the identified unsuccessful device-controlling action. Typical embodiment also include recording, as a representation of a negative user reaction, a determined change between the device attribute value set by executing the workflow and the current value of the device attribute in a user reaction log.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010700&OS=08010700&RS=08010700
owner: International Business Machines Corporation
number: 08010700
owner_city: Armonk
owner_country: US
publication_date: 20051101
---
The field of the invention is data processing or more specifically methods systems and products for workflow decision management.

Conventional networks contain various networked devices. User s often use the various devices or adjust particular settings of the devices in accordance with consistent patterns and scenarios of device usage. Despite routinely using devices according to these consistent patterns and scenarios of device usage conventional networked devices still often require user intervention to change attribute values of a device. It would be advantageous if there were a method of workflow decision management that used workflows to change in values of device attributes in a network in dependence upon identified patterns of usage and identified scenarios that did not require user intervention.

Methods systems and computer program products are provided for workflow decision management. Embodiments include maintaining a device state history identifying a device usage pattern in dependence upon the device state history identifying a workflow scenario in dependence upon the device usage pattern identifying a workflow in dependence upon the workflow scenario executing the workflow identifying a user reaction to the execution of the workflow identifying an unsuccessful device controlling action in dependence upon the user reaction and modifying the workflow in dependence upon the identified unsuccessful device controlling action. Typical embodiment also include recording as a representation of a negative user reaction a determined change between the device attribute value set by executing the workflow and the current value of the device attribute in a user reaction log. Typical embodiments also include recording as a representation of a positive user reaction an indication of no determined change between the device attribute value set by executing the workflow and the current value of the device attribute in a user reaction log.

Identifying a user reaction to the execution of the workflow may be carried out by recording in a device state history a device attribute value set by executing the workflow reading a current value of the device attribute a predetermined period of time after executing the workflow and determining whether there is a change between the device attribute value set by executing the workflow and the current value of the device attribute a predetermined period of time after executing the workflow. Identifying an unsuccessful device controlling action in dependence upon the user reaction may be carried out by identifying in dependence upon entries in the user reaction log a device ID for a device having a threshold number of recorded representations of negative user reactions and identifying a device controlling action of a workflow administering the device identified by the device ID.

Modifying the workflow in dependence upon the identified unsuccessful device controlling action may be carried out by removing the identified unsuccessful device controlling action from the workflow. Modifying may also be carried out by changing the tolerance of a workflow scenario associated with the workflow.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

 802.11 refers to a family of specifications developed by the IEEE for wireless LAN technology. 802.11 specifies an over the air interface between a wireless client and a base station or between two wireless clients.

 API is an abbreviation for application programming interface. An API is a set of routines protocols and tools for building software applications.

 Bluetooth refers to an industrial specification for a short range radio technology for RF couplings among client devices and between client devices and resources on a LAN or other network. An administrative body called the Bluetooth Special Interest Group tests and qualifies devices as Bluetooth compliant. The Bluetooth specification consists of a Foundation Core which provides design specifications and a Foundation Profile which provides interoperability guidelines.

 CEBus is an abbreviation for Consumer Electronics Bus. CEBus is an open international standard for controlling devices over different media such as power line radio frequency RF infrared IR coaxial cable twisted pair fiber optics and audio video. The CEBus standard is promulgated by the Consumer Electronic Manufacturers Association CEMA a sector of the Electronics Industries Association EIA and described in 12 standards the ANSI EIA 600 series. The CEBus standard describes a physical design and topology of network media a protocol for message generation and a common application language CAL .

CEBus provides a Common Application Language CAL defined in EIA 600.81 that uses an object oriented model to provide interoperability between diverse devices in a networked environment. The CAL specification defines a set of classes that provide an interface to the internal operations of these disparate networked devices. If a function or feature cannot be mapped well to one of the classes defined in the CAL specification the CAL specification has set aside a specific range of class identifiers for defining special classes.

CAL objects have two important attributes Instance Variables and Methods. Instance Variables contain information about a particular CAL object such as Boolean indications numeric information character string information and other data. Boolean Instance Variables can only be set to TRUE or FALSE. As the name implies numeric Instance Variables are intended for storage of numbers. The character string type Instance Variables provide storage of text. And other data type Instance Variables provide storage of other information as a single dimensioned array of one or more elements each element containing the same number of one or more bytes.

Access to the information contained in CAL Instance Variables is accomplished through a set of member methods specific to that object. Examples of common methods include setOn setOff setValue getValue setArray and getArray. Not all methods are appropriate for each Instance Variable type. For example a setOn method is intended for manipulating Boolean Instance Variables and is therefore undefined for an Instance Variable of the character string type.

 Coupled for data communications means any form of data communications wireless 802.11b Bluetooth infrared radio internet protocols HTTP protocols email protocols networked direct connections dedicated phone lines dial ups serial connections with RS 232 EIA232 or Universal Serial Buses hard wired parallel port connections network connections according to the Power Line Protocol and other forms of connection for data communications as will occur to those of skill in the art. Couplings for data communications include networked couplings for data communications. Examples of networks useful with various embodiments of the invention include cable networks intranets extranets internets local area networks wide area networks and other network arrangements as will occur to those of skill in the art. The use of any networked coupling among television channels cable channels video providers telecommunications sources and the like is well within the scope of the present invention.

 HAVi stands for Home Audio Video interoperability the name of a vendor neutral audio video standard particularly for home entertainment environments. HAVi allows different home entertainment and communication devices such as VCRs televisions stereos security systems and video monitors to be networked together and controlled from one primary device such as a services gateway PC or television. Using IEEE 1394 the Firewire specification as the interconnection medium HAVi allows products from different vendors to comply with one another based on defined connection and communication protocols and APIs. Services provided by HAVi s distributed application system include an addressing scheme and message transfer lookup for discovering resources posting and receiving local or remote events and streaming and controlling isochronous data streams.

 HomePlug stands for The HomePlug Powerline Alliance. HomePlug is a not for profit corporation formed to provide a forum for the creation of open specifications for high speed home powerline networking products and services. The HomePlug specification is designed for delivery of Internet communications and multimedia to homes through the home power outlet using powerline networking standards.

The HomePlug protocol allows HomePlug enabled devices to communicate across powerlines using Radio Frequency signals RF . The HomePlug protocol uses Orthogonal Frequency Division Multiplexing OFDM to split the RF signal into multiple smaller sub signals that are then transmitted from one HomePlug enabled device to another HomePlug enabled device at different frequencies across the powerline.

 HTTP stands for HyperText Transport Protocol the standard data communications protocol of the World Wide Web.

 ID abbreviates identification as used by convention in this specification with nouns represented in data elements so that user ID refers to a user identification and userID is the name of a data element in which is stored a user identification.

 LAN is an abbreviation for local area network. A LAN is a computer network that spans a relatively small area. Many LANs are confined to a single building or group of buildings. However one LAN can be connected to other LANs over any distance via telephone lines and radio waves. A system of LANs connected in this way is called a wide area network WAN . The Internet is an example of a WAN.

 LonWorks is a networking platform available from Echelon . Lon Works is currently used in various network applications such as appliance control and lighting control. The LonWorks networking platform uses a protocol called LonTalk that is embedded within a Neuron Chip installed within Lon Works enabled devices.

The Neuron Chip is a system on a chip with multiple processors read write and read only memory RAM and ROM and communication and I O subsystems. The read only memory contains an operating system the LonTalk protocol and an I O function library. The chip has non volatile memory for configuration data and for application programs which can be downloaded over a LonWorks network to the device. The Neuron Chip provides the first 6 layers of the standard OSI network model. That is the Neuron Chip provides the physical layer the data link layer the network layer the transport layer the session layer and the presentation layer.

The Neuron Chip does not provide the application layer programming. Applications for LonWorks networks are written in a programming language called Neuron C. Applications written in Neuron C are typically event driven and therefore result in reduced traffic on the network.

 OSGI refers to the Open Services Gateway Initiative an industry organization developing specifications for services gateways including specifications for delivery of service bundles software middleware providing compliant data communications and services through services gateways. The Open Services Gateway specification is a java based application layer framework that gives service providers network operator device makers and appliance manufacturer s vendor neutral application and device layer APIs and functions.

 USB is an abbreviation for universal serial bus. USB is an external bus standard that supports data transfer rates of 12 Mbps. A single USB port can be used to connect up to 127 peripheral devices such as mice modems and keyboards. USB also supports Plug and Play installation and hot plugging.

 WAP refers to the Wireless Application Protocol a protocol for use with handheld wireless devices. Examples of wireless devices useful with WAP include mobile phones pagers two way radios and hand held computers. WAP supports many wireless networks and WAP is supported by many operating systems. Operating systems specifically engineered for handheld devices include PalmOS EPOC Windows CE FLEXOS OS 9 and JavaOS. WAP devices that use displays and access the Internet run microbrowsers. The microbrowsers use small file sizes that can accommodate the low memory constraints of handheld devices and the low bandwidth constraints of wireless networks.

The X 10 means the X 10 protocol. Typical X 10 enabled devices communicate across AC powerline wiring such as existing AC wiring in a home using an X 10 transmitter and an X 10 receiver. The X 10 transmitter and the X 10 receiver use Radio Frequency RF signals to exchange digital information. The X 10 transmitter and the X 10 receiver communicate with short RF bursts which represent digital information.

In the X 10 protocol data is sent in data strings called frames. The frame begins with a 4 bit start code designated as . Following the start code the frame identifies a particular domain such as house with a 4 bit house code and identifies a device within that domain with a 4 bit devices code. The frame also includes a command string of 8 bits identifying a particular preset command such as on off dim bright status on status off and status request. 

Exemplary methods systems and products for workflow decision management are now explained with reference to the accompanying drawings beginning with . depicts an exemplary data processing system capable of workflow decision management according to embodiments of the present invention. The exemplary system of includes a number of workflow decision management compliant devices capable of implementing workflow decision management according to embodiments of the present invention that are connected for data communications through a local area network LAN . In the example of the exemplary workflow decision management compliant devices include a personal digital assistant PDA a computer workstation a personal video recorder a server personal computer a thermostat a laptop a desk lamp a compact disc player and a telephone are coupled for data communications through a LAN. The network connection aspect of the architecture of is only for explanation not for limitation. In fact systems for workflow decision management according to embodiments of the present invention may implemented with LANs WANs intranets internets the Internet webs the World Wide Web itself or other connections as will occur to those of skill in the art. Such networks are media that may be used to provide data communications connections between various devices and computers connected together within an overall data processing system.

In the example of the PDA is coupled for data communications to the LAN through a wireless link . The Workstation the server the personal computer the laptop and the telephone are coupled for data communications to the LAN through twisted pair wireline connections . The personal video recorder and the compact disc player are coupled for data communications to the LAN through a coaxial cable wireline connection . The thermostat and the desk lamp are coupled for data communications to the LAN through a powerline connection .

The exemplary devices of are capable of reporting current values of supported device attributes and the exemplary devices of are also capable of receiving messages from other devices instructing the device to change values of supported attributes. The exemplary system of is capable generally of maintaining a device state history identifying a device usage pattern in dependence upon the device state history and identifying a derived scenario in dependence upon the device usage pattern. The exemplary devices of are also capable of identifying a workflow in dependence upon the derived scenario and executing the workflow in dependence upon a predetermined tolerance. The exemplary devices of are also capable of executing the workflow by sending a message to a device to administer at least one value of an attribute of the device and logging the message.

The exemplary system of is also capable generally of maintaining a device state history identifying a device usage pattern in dependence upon the device state history identifying a workflow scenario in dependence upon the device usage pattern identifying a workflow in dependence upon the workflow scenario executing the workflow identifying a user reaction to the execution of the workflow identifying an unsuccessful device controlling action in dependence upon the user reaction and modifying the workflow in dependence upon the identified unsuccessful device controlling action.

A device state history is a data structure containing the history of the values of one or more attributes of one or more devices. In the example of each device may maintain its own device state history and store the device history in computer memory installed on the device or single device state history of all the devices in the network maybe maintained in computer memory accessible to application programming implementing workflow decision management that is installed on one or more devices.

A device usage pattern is typically implemented as a data structure representing a predetermined pattern of device usage for one or more devices. That is a data structure representing a pattern of device usage. A device usage pattern may represent a pattern of usage of a single device or a pattern of usage of more than one device. The system of typically identifies a device usage pattern in dependence upon the device state history by searching a plurality of stored device usage records for a device usage record that matches recent entries in the device state history.

The system of is also capable of identifying a derived scenario in dependence upon the identified device usage pattern. A derived scenario is typically implemented as a data structure representing a particular state of devices in a networked environment. Derived scenarios are created in dependence upon actual past device usage within the networked environment and such derived scenarios often represent scenarios of device usage of more than one device. The system of typically identifies a derived scenario by retrieving a derived scenario ID from a derived scenario table in dependence upon the identified device usage pattern ID.

The system of is also capable of identifying a workflow in dependence upon the derived scenario and executing the workflow. A workflow is software implementing a device controlling action that when executed changes the values of one or more attributes of one or more devices. Executing workflows typically includes calling member methods in a CAL object for a device downloading an OSGi bundle to a device calling member methods in a device class sending a message to a device or any other method of executing a workflow as will occur to those of skill in the art.

The arrangement of devices making up the exemplary system illustrated in is for explanation not for limitation. Data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example CEBus X 10 LonTalk HomePlug HAVi TCP IP HTTP WAP and others as will occur to those of skill in the art. Various embodiments of the present invention may also be implemented in various computer environments such as for example CEBus OSGi and others that will occur to those of skill in the art. Although much of the present specification describes exemplary embodiments of the present invention with particular reference to CEBus the such descriptions are for explanation not for limitation. In fact many environments and frameworks support workflow decision management according to the present invention such as for example CEBus HAVi HomePlug LonWorks X 10 OSGi as well as others that will occur to those of skill in the art and all such environments and frameworks are within the scope of the present invention.

Workflow decision management in accordance with the present invention is generally implemented with automated computing machinery installed on one or more workflow decision management compliant devices. For further explanation sets forth a block diagram of an exemplary device useful in implementing workflow decision management according to embodiments of the present invention. The device of includes at least one computer processor or CPU as well as random access memory RAM . Stored in RAM is an operating system . Operating systems useful in computers according to embodiments of the present invention include Unix Linux Microsoft XP and many others as will occur to those of skill in the art. Operating system in the example of is shown in RAM but many components of an operating system typically are stored in non volatile memory also.

Also stored in RAM is a workflow decision management application . The workflow decision management application is application computer programming generally capable of maintaining a device state history identifying a device usage pattern in dependence upon the device state history and identifying a derived scenario in dependence upon the device usage pattern. The derived scenario typically has a tolerance governing the execution of workflows. The exemplary devices of are also capable of identifying a workflow in dependence upon the derived scenario and executing the workflow. Methods of workflow decision management in accordance with the present invention can be implemented using many programming languages including CAL OSGi Java C Smalltalk C Pascal Basic COBOL Fortran and so on as will occur to those of skill in the art.

The workflow decision management application is also generally capable of maintaining a device state history identifying a device usage pattern in dependence upon the device state history identifying a workflow scenario in dependence upon the device usage pattern identifying a workflow in dependence upon the workflow scenario and executing the workflow including sending a message to a device to administer at least one value of an attribute of the device.

The exemplary workflow decision management application of also includes a logging module . The logging module includes computer program instructions capable of logging the message by recording in a message log message information describing the message sent to the device.

The exemplary workflow decision management application also includes a message pattern identification module . The message pattern identification module includes computer program instructions capable of identifying a message pattern in dependence upon a plurality of messages sent to a device by data mining a message log including message information describing the message sent to the device.

The exemplary workflow decision management application also includes a workflow modification module . The workflow modification module include computer program instructions for identifying a user reaction to the execution of the workflow identifying an unsuccessful device controlling action in dependence upon the user reaction and modifying the workflow in dependence upon the identified unsuccessful device controlling action.

The device of includes non volatile computer memory coupled through a system bus to processor and to other components of the device . Non volatile computer memory may be implemented as a hard disk drive optical disk drive electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art.

The exemplary device of includes a communications adapter for implementing connections for data communications including connections through networks to other workflow management compliant devices including servers other workflow management client devices and others as will occur to those of skill in the art. Communications adapters implement the hardware level of connections for data communications through which local devices and remote devices or servers send data communications directly to one another and through networks. Examples of communications adapters useful for workflow decision management according to embodiments of the present invention include modems for wired dial up connections Ethernet IEEE 802.3 adapters for wired LAN connections and 802.11b adapters for wireless LAN connections.

The example device of includes one or more input output interface adapters . Input output interface adapters in workflow management compliant devices implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice.

The example of includes a device record that represents a workflow decision management compliant device in accordance with the present invention. The exemplary device record includes a device ID field uniquely identifying the device. The exemplary device record also includes an address field containing the network address of the device. The exemplary device record includes an attribute field . The attribute field contains the value of a particular attribute of a device indicating a device state such as on off a volume setting and so on. Although only one attribute field is shown in the example of this for simplicity of explanation. Many workflow decision management compliant devices support more than one attribute as will occur to those of skill in the art.

The example of includes an exemplary device state record that represents the allowable device states of a particular device. The device state record includes a device ID field uniquely identifying the device for which the device state record represents acceptable device states. The device state record also includes a device state ID field uniquely identifying the device state. The device state record also includes a description field containing a description of the acceptable states or attribute values of the device.

The example of includes a devices state history . The device state history is a data structure containing the history of the state of one or more devices. That is the current as well as past values of attributes of a device. Records in the exemplary device state history include a device ID uniquely identifying the device for which the device state is recorded. Records of the exemplary device state history also include a device state ID field uniquely identifying acceptable device states for the device. Records of the exemplary device state history include a value field containing the value of a particular attribute of the device. As stated above typical devices support more than one attribute and therefore typical records of device state histories include a plurality of value fields containing the values of the supported attributes. Records of the exemplary device state history include a time stamp field containing date and time information identifying the date and time that a particular device attribute of a particular device had a particular value.

The example of includes a device usage record that represents a predetermined pattern of device attributes for a device. That is a device usage is a data structure used to identify whether the states of the devices in a particular networked environment conform to a predetermined pattern. To determine whether the state of current devices in a particular networked environment conform to a predetermined pattern recent entries in the device state history compared with a plurality of device usage. If the comparison results in a match it is inferred that the state of the devices in the particular networked environment conform to a predetermined pattern.

The exemplary devices usage includes a usage ID uniquely identifying a particular predetermined pattern of device usage. The exemplary device usage of includes a device ID uniquely identifying a particular device. The device usage also includes a device state ID uniquely identifying the acceptable device states for the particular device. The exemplary device usage includes a value field containing the value of a particular supported attribute of the device.

The example of includes a usage record that identifies and describes a particular pattern of device usage in the networked environment. The usage record includes usage ID that uniquely identifies the pattern of device usage and a description field that contains a description of the pattern of device usage represented by the usage record .

The example of includes a scenario record that represents a particular scenario of device usage consistent with an identified predetermined device usage pattern. Scenarios are predetermined and predefined generally from many users in many networked environments. That is such scenarios are not created from the actual device usage in the networked domain in which they are implemented. When the current states of a device conform to a predetermined pattern of device usage the current states of a device may also conform to one of a plurality of scenarios. The exemplary scenario record of includes a scenario ID field uniquely identifying the scenario. The exemplary scenario record of includes a workflow ID identifying a workflow for execution when the current device states in a particular networked environment identify a scenario. Although the scenario record of includes a single workflow ID field this for simplicity of explanation not for limitation. In many embodiments of the present invention a particular scenario supports the execution of more than one workflow. The scenario of also contains a description field that contains a description of the scenario.

The example of includes a workflow record that represents a particular device controlling action or a set of device controlling actions. A workflow is software implementing a device controlling action that when executed changes the values of one or more attributes of one or more devices in accordance with the present invention. The exemplary workflow record includes a workflow ID uniquely identifying the workflow. The exemplary workflow record of also includes a sequence field whose value is used to execute this workflow in a particular sequence of execution of a plurality of workflows. That is when more than one workflow is executed for a scenario the value of the sequence field is used to sequence the execution of the plurality of workflows. Workflows can be implemented using CAL OSGi Java C Smalltalk C Pascal Basic COBOL Fortran and so on as will occur to those of skill in the art.

The example of includes a workflow session that represents an instance of an executed workflow. The exemplary workflow session includes a workflow session ID uniquely identifying the workflow session and a workflow ID identifying the executed workflow. The exemplary workflow session also includes a user session state ID uniquely identifying the particular user session for which the workflow is executed. The exemplary workflow session also includes a message ID identifying a message sent to a device to effect the workflow. That is the message sent to a device instructing the device to change the value of a particular attribute. Sending such messages to the device in some embodiments effect changes in device status and therefore carry out the workflow. The exemplary workflow session includes a user ID identifying the user on whose behalf the workflow is executed and a role ID field identifying the security role of the user.

The example of includes a derived scenario that represents a particular scenario of device usage in the networked domain. Derived scenarios are created in dependence upon the actual device usage within the networked environment. Derived scenarios have two important distinctions from scenarios . First the derived scenarios are created in dependence upon the device usage of the devices within the networked environment and therefore reflect scenarios of device usage of the particular networked environment from which they are derived rather than canned or off the shelf scenarios. Second derived scenarios have an associated tolerance which is a rule set that governs the execution of workflows executed in dependence upon identifying the derived scenario.

The exemplary derived scenario of includes a derived scenario ID field uniquely identifying the derived scenario. The exemplary derived scenario of includes a tolerance ID identifying an associated tolerance for the derived scenario. The derived scenario of also includes a workflow ID to be executed with the state of devices in the networked environment identify the derived scenario. The workflow is executed in dependence upon the associated tolerances of the derived scenario. The derived scenario record contains a description field containing a description of the derived scenario.

The example of includes a tolerance record that represents a rule set governing the execution of a workflow executed in dependence upon an identified derived scenario. Often a tolerance is a subset of the range of acceptable attribute values that a device supports. For example a thermostat may support attribute values that if set will eventually damage either the thermostat itself or other devices. A tolerance is therefore often designed to govern the execution of workflows such that device usage is not harmful to devices within the networked environment. The exemplary tolerance of includes a tolerance level ID field uniquely identifying the tolerance.

The example of includes a device threshold record that represents the threshold minimum and threshold maximum attribute values that device will support. The exemplary device threshold record of includes a device ID identifying the device for which the thresholds are valid. The exemplary device threshold record also includes MAX field containing the maximum attribute value that the device will support and a MIN field that includes the minimum attribute value that the device will support.

The example of includes a user record representing a user for which workflows are performed to affect device status. Users according to aspects of workflow decision management of the present invention are not limited to human users but also include processes as will occur to those of skill in the art. The exemplary user record of includes a user ID uniquely identifying the user and a role ID uniquely representing the role of the user. A role is security role for the user such as a systems administrator a guest and so on.

The example of also includes a user session state that represents a session for a user. A session for a user indications current workflow decision management being executed on the user s behalf. The user session state of includes a session state ID that uniquely identifies the user session state and a message ID that identifies a message sent to give effect to a particular workflow identified in a workflow session and executed on behalf of the user. The user session state also includes a user ID identifying the user on whose behalf the workflow is executed and a role ID identifying the role of the user.

The example of includes a role device privileges record that representing the privileges assigned to a particular role for a device. For example some security roles have only limited access to some devices. The role device privileges record includes a role privileges ID field uniquely identifying the role device privileges. The exemplary role device privileges record of includes a privileges ID identifying an allowable privilege and a role ID identifying a particular security role having the privilege.

The example of includes a privilege record representing a particular privilege. The exemplary privilege record includes a privilege ID field identifying the privilege and a description field containing a description of the privilege. The exemplary privilege record includes a read flag and a write flag containing a Boolean indication of read and write privileges.

The example of includes a message record representing a message. The message record includes a message ID field uniquely representing the message. The example message of also includes an origin address field containing the network address of the device originating the message and a destination address field containing the network address of the device receiving the message. The message record of also includes a message log ID representing the message log having an entry representing the message.

The example of includes a device privilege record that represents an available privilege appropriate for a device. The exemplary device privilege record of includes a device privilege ID uniquely identifying the device privilege and a device ID identifying the device. The exemplary device privilege record includes a privilege ID identifying an privilege appropriate for the device.

The example of includes a data structure representing a message bridge . A message bridge is hardware designed for routing messages to one or more devices in a networked environment. Examples of devices which may be represented as message bridges include routers gateways and other devices as will occur to those of skill in the art.

The example of includes an exemplary message log . A message log is a data structure containing entries representing individual messages sent to one or more devices in the networked environment. Entries in the exemplary message log include a message log ID uniquely identifying the message log and a message ID uniquely identifying the message represented by an entry in the log. Entries in the message log also include the contents of the message and the time message was sent . Message logs usefully provide a record of the messages sent to device affecting the execution of workflows according to the present invention.

The example of includes a message pattern record . A message pattern record represents an identified message pattern. The entries in the message pattern record include a message pattern ID uniquely identifying the message pattern. Entries in the message pattern record also include a message type identifying a type of message sent to a device and the device ID identifying the device to which the message is sent. Entries in the message pattern record also include the attributes of the message defining the device controlling instruction contained in the message and a message sequence ID identifying the position in the message pattern in which the particular message resides.

In the example of the device record is related one to many to the device state record through the device ID field on used as a foreign key. The device state record is related one to many to the device state history record through the device state ID field on used as a foreign key. The device state history record is related many to one to the device record through the device ID field on used as a foreign key.

In the example of the device record is related one to many to the scenario record through the device ID field on used as a foreign key. The scenario record is related many to one to the workflow record through a workflow ID field on used as a foreign key. The workflow record is related one to many to the workflow session through the workflow ID field on used as a foreign key.

In the example of the device record is related one to many to the derived scenario record through the device ID field on used as a foreign key. The derived scenario record is related many to one to the tolerance record through the derived scenario ID field on used as a foreign key.

In the example of the device record is related one to many with the device privileges record through the device ID field on used as a foreign key. The device privileges record is related many to one through to the privileges record through the privilege ID field on used as a foreign key. The privileges record is related one to many to the role device privileges record through the privilege ID field on used as a foreign key. The role device privileges record is related many to one to the role record through a role field on used as a foreign key.

In the example of the user record is related many to one through to the role record through the role ID field on used as a foreign key. The user record is related to the user session state one to many through the user ID field on used as a foreign key. In the example of the user session state is related many to one to the message record through the message ID field on used as a foreign key. In the example of the user session state is related one to many to the workflow session through the user session state ID on used as a foreign key.

In the example of a message bridge is related one to many to the message record through the message ID field on used as a foreign key. The message record is related many to one to the message log through the message ID field on used as a foreign key. In the example of the message pattern record is related many to one with the message log through a message log ID field on used as a foreign key. The message pattern record is also related one to one to the workflow scenario record through a message pattern ID field on used as a foreign key.

In the method of maintaining a device state history includes recording a plurality of attribute values for a device . In the example of each time an attribute value of a device is changed the change is recorded by creating a new entry in a device state history. In some such embodiments the latest entry in the device state history represents the current state of the device. In some embodiments workflow decision management devices are configured to report to application programming implementing a device state manager with each change in an attribute value and the device state manager creates a new entry in a device state history recording the change in attribute value.

The method of also includes identifying an identified device usage pattern in dependence upon the device state history . As discussed above a device usage record represents a predetermined pattern of device usage and includes a collection of device attribute values defining the device usage pattern. In the method of identifying an identified device usage pattern in dependence upon the device state history further comprises comparing the device state history with a plurality of device usage patterns records . In the example of a window of the entries of the device state history representing recent device states are compared with device usage records in a device usage pattern database to identify a matching an identified device usage record . If such a matching device usage record exists then it is inferred that the current state of devices within a networked environment conform to a device usage pattern represented by the record.

As will occur to those of skill in the art in typical embodiments the values of the entries in the device state history do not have to be exactly the same as the values of the device usage records to identify a matching device usage record. In fact the values of the entries of the device state history will often not be the exactly the same as the values of the device usage records when a matching record is identified. The degree to which the values of the entries in the device state history must be similar to the values of the device usage records to be considered a match will vary according to factors such as tolerances and methods used to used to compare the device state history with the device usage records predefined tolerances for identifying a match as well as other numerous factors that will occur to those of skill in the art.

The method of also includes identifying a derived scenario having an associated tolerance in dependence upon the identified device usage pattern . As discussed above a derived scenario represents a particular scenario created in dependence upon actual device usage within the networked environment. Derived scenarios have two important distinctions from other canned scenarios. First the derived scenarios are created in dependence upon the actual past device usage of the devices within the networked environment and therefore reflect scenarios of device usage of the particular networked environment. Second in the example of the derived scenarios have an associated tolerance . A tolerance is a rule set governing the execution of workflows executed in dependence upon the identified derived scenario.

In the method of identifying a derived scenario in dependence upon the identified device usage pattern further comprises retrieving a derived scenario ID from a derived scenario table. In the example of a derived scenario table includes a plurality of derived scenario IDs indexed by device usage IDs identifying predefined device usage patterns. Identifying a derived scenario in dependence upon the identified device usage pattern therefore includes retrieving a derived scenario ID from a derived scenario table in dependence upon the device usage ID of the identified device usage record .

In the method of identifying a derived scenario in dependence upon the identified device usage pattern further comprises identifying a derived scenario in dependence upon a rule . A rule governs the identification of a particular derived scenario among a plurality of derived scenarios when more than one derived scenario associated with a single device usage pattern exists. Consider the example of a user cooking in a networked kitchen. The states of the devices in a living room match a device usage pattern that the user is cooking. However more than one scenario corresponds with the device usage pattern as the user may be cooking breakfast cooking lunch or cooking supper. An exemplary rule identifying a scenario is If time of day is between 4 30 p.m. and 7 30 p.m. and device usage pattern identifies a cooking scenario then user is cooking supper.

The method of also includes identifying a workflow in dependence upon the derived scenario . As discussed above a workflow is software implementing a device controlling action that when executed changes the values of one or more attributes of one or more devices in accordance with the present invention. In the method of identifying a workflow in dependence upon the derived scenario comprises retrieving a workflow ID from a derived scenario record .

The method of also includes executing the workflow in dependence upon the tolerance . As discussed above a tolerance represents a rule governing the execution of a workflow. Often a tolerance is a subset of the range of acceptable attribute values that a device supports. Such tolerances are often designed to prevent the execution of workflows from damaging devices within the networked environment.

Consider the following example. A networked home has a number of devices that are used to cool the west wing of the home. These devices include a fan an air conditioner and automatic shades. However the automatic shades are currently not working and they currently will not close properly. Workflow decision management according to the present invention has identified a scenario within a home network demonstrating that the west wing of the home is too warm and therefore identifies and executes a workflow to cool the home that includes reducing the thermostat for the air conditioner increasing fan speed and closing the automatic shades.

Because the automatic shades are not working properly the workflow does not reduce the temperature in the west wing sufficiently and soon thereafter the scenario that the room is too hot is again identified. The same workflow is again identified and executed. By providing a tolerance for the execution of the workflow that defines a minimum tolerance value allowed for the thermostat the air conditioner is spared from being overworked to the point of damage. That is tolerances provide some boundaries for the execution of workflow preventing devices from being damaged by unforeseen problems with the execution of a workflow such as in this case the automatic shades not working properly. These tolerance values are often designed as a subset of the actual values that devices support. Such design advantageously recognizes that devices often support attribute values that will ultimately lead to damaging the device.

In the method of executing the workflow in dependence upon the tolerance further comprises sending a message to a device instructing the device to change the value of an attribute. In some such examples a device receiving such a method can effect the change in value of the device by calling a member methods in a device class representing the device such as for example SomeDeviceClass.setAtrribute parameterized with an attribute value.

Logging messages sent to devices affecting one or more workflows may usefully provide a vehicle for identifying message patterns and message scenarios for workflow decision management. For further explanation therefore sets forth a flow chart illustrating an exemplary method for workflow decision management that includes logging a message sent in the execution of a workflow. The method of includes maintaining a device state history . As discussed above a device state history is a data structure containing the history of the values of one or more attributes of one or more devices. A device state history for a single device can be maintained in computer memory on the device itself or a single device state history for many devices in the networked environment can be maintained in computer memory accessible to application programming implementing the method of .

In the method of maintaining a device state history includes recording a plurality of attribute values for a device. As discussed above each time an attribute value of a device is changed the change is recorded by creating a new entry in a device state history. In some such embodiments the latest entry in the device state history represents the current state of the device. In some embodiments workflow decision management devices are configured to report to application programming implementing a device state manager with each change in an attribute value and the device state manager creates a new entry in a device state history recording the change in attribute value.

The method of also includes identifying a device usage pattern in dependence upon the device state history . As discussed above a device usage record represents a predetermined pattern of device usage and includes a collection of device attribute values defining the device usage pattern. In the method of identifying an identified device usage pattern in dependence upon the device state history further comprises comparing the device state history with a plurality of device usage patterns records . In the example of a window of the entries of the device state history representing recent device states are compared with device usage records in a device usage pattern database to identify a matching device usage record . If such a matching device usage record exists then it is inferred that the current state of devices within a networked environment conform to a device usage pattern represented by the record.

As will occur to those of skill in the art in typical embodiments the values of the entries in the device state history do not have to be exactly the same as the values of the device usage records to identify a matching device usage record. In fact the values of the entries of the device state history will often not be the exactly the same as the values of the device usage records when a matching record is identified. The degree to which the values of the entries in the device state history must be similar to the values of the device usage records to be considered a match will vary according to factors such as tolerances and methods used to compare the device state history with the device usage records predefined tolerances for identifying a match as well as other numerous factors that will occur to those of skill in the art.

The method of also includes identifying a workflow scenario in dependence upon the device usage pattern . The workflow scenario of may be either a scenario predetermined and predefined generally from many users in many networked environments such as the scenario discussed above with reference to given the reference number or a derived scenario created in dependence upon the actual device usage within the networked environment discussed above with reference to and given the reference number .

Identifying a workflow scenario in dependence upon the device usage pattern may be carried out by retrieving a workflow scenario ID from a workflow scenario table . In the example of a workflow scenario table includes a plurality of workflow scenario IDs indexed by device usage IDs identifying predefined device usage patterns. Identifying a workflow scenario in dependence upon the identified device usage pattern therefore includes retrieving a workflow scenario ID from a workflow scenario table in dependence upon the device usage ID of the identified device usage record .

In the method of identifying a workflow scenario in dependence upon the device usage pattern is carried out in further dependence upon a rule . A rule governs the identification of a particular workflow scenario among a plurality of workflow scenarios when more than one workflow scenario associated with a single device usage pattern exists. Consider the example of a user cooking in a networked kitchen. The states of the devices in a living room match a device usage pattern that the user is cooking. However more than one workflow scenario corresponds with the device usage pattern as the user may be cooking breakfast cooking lunch or cooking supper. An exemplary rule identifying a workflow scenario is If time of day is between 4 30 p.m. and 7 30 p.m. and device usage pattern identifies a cooking scenario then user is cooking supper.

The method of also includes identifying a workflow in dependence upon the workflow scenario . As discussed above a workflow is software implementing a device controlling action that when executed changes the values of one or more attributes of one or more devices in accordance with the present invention. In the method of identifying a workflow in dependence upon the workflow scenario includes retrieving a workflow ID from a workflow scenario record .

The method of also includes executing the workflow including sending a message to a device to administer at least one value of an attribute of the device. As discussed above a workflow is software implementing a device controlling action that when executed changes the values of one or more attributes of one or more devices in accordance with the present invention. Such software effects the device controlling action by sending a message to a device instructing the device to change the value of an attribute. A device receiving such a method can effect the change in value of the device by calling a member method in a device class representing the device such as for example SomeDeviceClass.setAtrribute parameterized with an attribute value sent in the message.

In the method of executing the workflow also includes executing the workflow in dependence upon an associated tolerance . A tolerance is a rule set governing the execution of workflows executed in dependence upon the identified derived scenario. Often a tolerance is a subset of the range of acceptable attribute values that a device supports. For example a thermostat may support attribute values that will if set will eventually damage either the thermostat itself or other devices. A tolerance is therefore often designed to govern the execution of workflows such that device usage is not harmful to devices within the networked environment.

The method of also includes logging the message . Logging the message according to the method of is carried out by recording in a message log message information. A message log is a data structure containing entries representing individual messages sent to one or more devices in the networked environment. In the example of the message log contains the message information including a message log ID a message ID the contents of the message and the time message was sent. Message logs usefully provide a record of the messages sent to device affecting the execution of workflows according to the present invention.

The message information included in the message log of is for explanation and not for limitation. In fact message information recorded in message logs will vary according to factors such as types of devices receiving the messages message type desired information concerning the message and other factors as will occur to those of skill in the art.

Message logs usefully provide a record of the messages sent to device affecting the execution of workflows according to the present invention. Such message logs may be used to identify patterns in the messages which themselves may be useful in identifying workflows for execution. For further explanation therefore sets forth a flow chart illustrating additional aspects of workflow decision management according to the present invention. The method of includes identifying a message pattern in dependence upon a plurality of messages sent to a device. In the example of identifying a message pattern in dependence upon a plurality of messages sent to a device is carried out by identifying a message pattern from information contained within a message log recording information about a plurality of message sent to one or more devices. Identifying a message pattern may be carried out by a user examining the entries of a message log and discovering patterns in the entries of the message log.

Requiring a user to manually identify message patterns may be too labor intensive to be practicable. In the method of therefore identifying a message pattern in dependence upon a plurality of messages sent to a device is carried out by data mining a message log including message information describing messages to devices in the networked environment. There are many definitions for data mining. For the purpose of this specification data mining means analyzing the recorded message information in the message log and discovering relationships patterns knowledge or information from the recorded message information and using the discovered relationships patterns or knowledge to identify message patterns for workflow decision management. Many data mining techniques typically include the steps of preparing the data for data mining choosing an appropriate data mining algorithm and deploying the data mining algorithm.

In the method of the recorded message information in the message log has been prepared for data mining by providing a predetermined data structure for the message log. Typically the predetermined data structure is provided when such a message log is created. The particular predetermined data structure for each particular kind of message log will vary depending on factors such as the type of messages being issued to devices to effect workflow decision management the kind of message information available for logging and so on as will occur to those of skill in the art.

Data mining also typically includes choosing an appropriate data mining algorithm. An appropriate data mining algorithm for discovering message patterns will vary on many factors such as the type of message information recorded in the message log available to mine the available computer software and hardware used to carry out the data mining the size of the collection of the message information in the message log or any other factor that will occur to those of skill in the art. Many data mining algorithms exist and all algorithms that appropriately find message patterns from a collection of message information recorded in a message log are within the scope of the present invention.

Although many data mining algorithms exist many of the data mining algorithms share the same goals. Typical data mining algorithms attempt to solve the problem of being overwhelmed by the volume of data that computers can collect. Data mining algorithms also typically attempt to shield users from the unwieldy body of data by analyzing it summarizing it or drawing conclusions from the data that the user can understand.

One way of discussing various data mining algorithms is by discussing the functions that they perform rather than the specifics of their underlying mathematical operation. Another way of discussing various data mining algorithms is by describing a rule returned by the data mining algorithm. A rule is a description of the relationship pattern knowledge or information found by the data mining algorithm. Exemplary data mining algorithms are explained in this specification by describing the functions they perform and the rules they return. The following examples of data mining algorithms are included in this specification for clarity of discussion not for limitation. Any method of data mining that will occur to those of skill in the art regardless of type classification or underlying mathematical operation is within the scope of the present invention.

In some examples of the method of identifying a message pattern includes data mining a message log with an association function. Association functions are typically used to find patterns having connected or related events. For example in the context of identifying message pattern data mining with association functions may return a rule such as 72 of the recorded messages to a thermostat were instructions to lower the thermostat and corresponded in time with messages to a ceiling fan to increase the speed of the ceiling fan. Data mining with an association function can be used to determine an association between the one or more fields of various entries in a message log. For example an association function may return a rule describing that some percentage of messages to a thermostat are to reduce the setting of the thermostat.

In other examples of the method of identifying a message pattern includes data mining a message log with sequential pattern operators. Data mining with sequential patterns is typically used in analyzing message information in a message log of a single type. A sequential pattern operator may be used to return a rule that describes a sequential relationship among entries in a message log to the same device. An example of a rule describing relationship among such entries in a message log is a rule that identifies that three messages to a thermostat in a row included instructions to raise the setting of the thermostat thereby indicating that the temperature outside the area governed by the thermostat was dropping causing the area governed by the thermostat to drop.

In still other examples of the method of identifying a message pattern includes data mining with a classification operator. A classification operator is applied to a set of entries in a message log that are organized or tagged as belonging to a certain class such as for example recorded message information of messages sent at a certain time of day. A classification operator examines the set of tagged entries in a message log and produces a mathematical function that identifies the class. Such a classification operator can be used for example to analyze a class of entries in a message log received at a certain time of day and determine the time of day with the most message traffic.

In still other examples of the method of identifying a message pattern includes data mining with a clustering operator. By contrast to data mining with a classification operator whose input is a set of tagged entries in a message log the input to a clustering operator are a set of untagged entries in a message log. No classes are known at the time the clustering operator is applied. Data mining with a cluster operator may be used to segment or classify the entries in a message log such as by segmenting the entries by time of day or device ID. Many of the underlying mathematical operations used to build classification operators can also be used to build clustering operators.

While various data mining algorithms have been discussed separately in various examples of the method of different data mining algorithms can may be used together to identify message patterns. Furthermore while the method of has been described in detail with regard to data mining any method identifying a subset of the message log that comprise a message pattern is within the scope of the present invention not just data mining. In various exemplary embodiments identifying a subset of the message log that comprise a message pattern includes using data discrimination using artificial intelligence using machine learning using pattern recognition or any method of identifying a subset of the message log that comprise a message pattern that will occur to those of skill in the art.

One example of off the shelf data mining software includes IBM s Intelligent Miner. Intelligent Miner can be operated in several computing environments including AIX AS 400 and OS 390. The Intelligent Miner is an enterprise data mining tool designed for client server configurations and optimized to mine very large data sets such as gigabyte data sets. The Intelligent Miner includes a plurality of data mining techniques or tools used to analyze large databases and provides visualization tools used to view and interpret the different mining results.

Having identified a message pattern records representing such patterns may be created and usefully provide a vehicle for identifying workflows for execution when such messages in the networked environment conform to the identified message patterns. In the example of a message pattern record represents an identified message pattern. The entries in the message pattern record include a message pattern ID uniquely identifying the message pattern. Entries in the message pattern record also include a message type identifying a type of message sent to a device and the device ID identifying the device to which the message is sent. Entries in the message pattern record also include the attributes of the message defining the device controlling instruction contained in the message and a message sequence ID identifying the position in the message pattern in which the particular message resides.

The method of includes storing the message pattern records representing the identified message patterns in a message pattern database . A message pattern database maintains a plurality of message pattern records for use in identifying message patterns in the message traffic in the networked environment.

The method of also includes identifying a message pattern in dependence upon a plurality of messages sent to a device or a plurality of devices in the networked environment. A message pattern record represents a pre identified pattern of messages. In the method of identifying a message pattern in dependence upon a plurality of messages may be carried out by comparing a plurality of messages in the networked environment or recent entries in a message log with a plurality of message pattern records in a message pattern database. In the example of a window of the entries of the message log representing recent messages may be compared with message records to identify a matching message record. If such a matching message record exists then it is inferred that the message traffic in the networked environment conforms to a message pattern represented by the message pattern record.

As will occur to those of skill in the art in typical embodiments the aspects of the messages in the message log or in traffic in the networked environment do not have to be exactly the same as the values of the message pattern records to identify a matching message pattern record. In fact the values of the entries of the message log or messages in traffic will often not be the exactly the same as the values of the message pattern records when a matching record is identified. The degree to which the values of the entries in the message log or the messages in traffic must be similar to the values of the message pattern records to be considered a match will vary according to factors such as methods used to compare the messages and entries of the message log with the message pattern records predefined tolerances for identifying a match as well as other numerous factors that will occur to those of skill in the art.

The method of includes identifying a workflow scenario in dependence upon the device usage pattern and in dependence upon the message pattern . The workflow scenario of may be either a scenario predetermined and predefined generally from many users in many networked environments such as the scenario discussed above with reference to given the reference number or a derived scenario created in dependence upon the actual device usage within the networked environment discussed above with reference to and given the reference number .

Identifying a workflow scenario in dependence upon the device usage pattern and in dependence upon the message pattern may be carried out by retrieving a workflow scenario ID from a workflow scenario table . In the example of a workflow scenario table includes a plurality of workflow scenario IDs indexed by device usage IDs identifying predefined device usage patterns and message pattern IDs identifying message patterns. Identifying a workflow scenario in dependence upon the device usage pattern and in dependence upon the message pattern therefore includes retrieving a workflow scenario ID from a workflow scenario table in dependence upon the device usage ID of the identified device usage record and the message pattern ID of the identified message pattern.

In the method of identifying a workflow scenario in dependence upon the device usage pattern and in dependence upon the message pattern may be is carried out in further dependence upon a rule . A rule governs the identification of a particular workflow scenario among a plurality of workflow scenarios when more than one workflow scenario associated with a single device usage pattern exists and message pattern exists.

Having identified a workflow scenario workflow decision management according to embodiments of the present invention may proceed by identifying a workflow and executing the workflow as discussed above with reference to . The addition of message patterns usefully provides additional granularity in selecting workflow scenarios and provides a vehicle for better tailoring the results of workflow decision management in a networked environment.

As discussed above workflow decision management executes workflows resulting in the administration of one or more devices in a networked environment. It is not uncommon for different users to react to the administration of devices differently. Some reacting favorably to the execution of a workflow and others reacting unfavorably to the execution of the same workflow. Consequently workflow decision management executed on behalf of one user may not result in administering devices in a manner favorable to another user. Even further the same users often change over time such that workflow decision management executed on behalf of a user at one time period may not result in administering devices in a manner favorable the same user at some later time. A user reacting unfavorably to the execution of a workflow may after the execution of the workflow manually administer a device in a manner more favorable to the user. For example executing a workflow resulting in setting a thermostat to 79 Fahrenheit may not be favorable to a user who typically sets the thermostat to 72 Fahrenheit. The user s manually changing the setting of the thermostat after the execution of the workflow is itself an indication that the user did not react favorably to the workflow.

Workflow decision management according to the present invention therefore advantageously provides workflow modification in dependence upon user reaction. For further explanation sets forth a data flow diagram illustrating an exemplary method for workflow decision management that includes workflow modification in dependence upon user reaction. The method of is similar to the method in that the method of includes maintaining a device state history identifying a device usage pattern in dependence upon the device state history identifying a workflow scenario in dependence upon the device usage pattern identifying a workflow in dependence upon the workflow scenario and executing the workflow . The method of differs from the method of however because the method of includes identifying a user reaction to the execution of the workflow identifying an unsuccessful action in dependence upon the user reaction and modifying the workflow in dependence upon the identified unsuccessful action .

Turning now to address aspects of the method of that differ from the method of in more detail includes identifying a user reaction to the execution of the workflow . Identifying a user reaction to the execution of the workflow may be carried out by recording in a device state history a device attribute value set by executing the workflow reading a current value of the device attribute a predetermined period of time after executing the workflow and determining whether there is a change between the device attribute value set by executing the workflow and the current value of the device attribute a predetermined period of time after executing the workflow as discussed below with reference to . That is identifying a user reaction to the execution of the workflow typically includes determining whether an attribute value of one or more the devices that were administered by executing the workflow has changed as a result of a user manually changing the attribute value of the device within some predetermined period of time. If the attribute value has changed the fact that the device attribute has changed is inferred to be an indication of a negative reaction from a user. If the attribute value has not changed the fact that the device attribute has not changed is inferred to be an indication of a positive reaction from a user.

The predetermined period of time after the execution of the workflow useful in determining whether there was a change effected by a user s direct manipulation of the value of the attribute of the device will vary. The time period is typically designed to be long enough to allow a user to experience the new device settings resulting from the execution of the workflow and then alter the effect of the workflow by manually changing the value of an attribute of one or more of the devices administered by executing the workflow. The time period is also designed to be short enough so that a change in the value of the device attributes can be inferred as being the result of a user s experiencing the workflow and knowingly altering its effect by directly administering the device.

The method of also includes identifying an unsuccessful device controlling action in dependence upon the user reaction . Identifying an unsuccessful device controlling action in dependence upon the user reaction may be carried out by identifying in dependence upon entries in the user reaction log a device ID for a device having a threshold number of recorded representations of a negative user reaction and identifying a device controlling action of a workflow administering the device identified by the device ID as discussed below with reference to .

As discussed above a workflow is software implementing device controlling actions that when executed change the values of one or more attributes of one or more devices in accordance with the present invention. A device controlling action is an executable action in a workflow that administers a device typically by sending the device a message instructing the device to set the value of an attribute.

The method of also includes modifying the workflow in dependence upon the identified unsuccessful device controlling action producing a modified workflow . Modifying the workflow in dependence upon the identified unsuccessful device controlling action may be carried out by removing the identified unsuccessful device controlling action from the workflow as discussed below with reference to . Modifying the workflow in dependence upon the identified unsuccessful device controlling action may also be carried out by changing a tolerance of a workflow scenario associated with the workflow as discussed below with reference to . Modifying workflows in dependence upon user reactions usefully provides a vehicle for improving the effect of the execution of workflows have on users in the networked environment.

Workflow decision management according to the present invention modifies workflows in dependence upon in dependence upon user reactions. For further explanation therefore sets forth a data flow diagram illustrating an exemplary method for identifying a user reaction to the execution of the workflow. The method of includes recording in a device state history a device attribute value set by executing the workflow . Recording in a device state history a device attribute value set by executing the workflow may be carried out by creating a new entry in a device state history including the device ID device state ID the value of the attribute set by executing the workflow and a time stamp . The latest entry for a device in the device state history typically represents the current state of the device.

The method of also includes reading a current value of the device attribute a predetermined period of time after executing the workflow . Reading a current value of the device attribute may be carried out by polling the device a predetermined period of time after executing the workflow by invoking member methods such as getAttribute in a device class representing the device.

The predetermined period of time after the execution of the workflow useful in determining whether there was a change effected by a user s direct manipulation of the value of the attribute of the device will vary. The time period is typically designed to be long enough to allow a user to experience the new device settings resulting from the execution of the workflow and then alter the effect of the workflow by manually changing the value of an attribute of one or more of the devices administered by executing the workflow. The time period is also designed to be short enough so that a change in the value of the device attributes can be inferred as being the result of a user s experiencing the workflow and knowingly altering its effect by directly administering the device.

The method of also includes determining whether there is a change between the device attribute value set by executing the workflow and the current value of the device attribute a predetermined period of time after executing the workflow . Determining whether there is a change between the device attribute value set by executing the workflow and the current value of the device attribute may be carried out by comparing the device attribute value set by executing the workflow and the current value of the device attribute a predetermined period of time after executing the workflow. If the current value is unchanged the user s reaction to the workflow is considered positive . If the current value is not unchanged the user s reaction to the workflow is considered negative .

In most cases it is not advantageous to modify a workflow each time a single device controlling action was unsuccessful for a user. Instead user reaction logs are provided for identifying device controlling actions that are too frequently unsuccessful to be considered of benefit to a user. For further explanation therefore sets forth a data flow diagram illustrating an exemplary method for recording indications of user reactions in a user reaction log. The method of includes recording as a representation of a negative user reaction a determined change between the device attribute value set by executing the workflow and the current value of the device attribute in a user reaction log . Recording a determined change may be carried out by recording the difference in the values of the attribute of the device recording both the value set by the execution of the workflow and the changed value or any other way of recording a determined change that will occur to those of skill in the art.

The method of also includes recording as a representation of a positive user reaction an indication of no determined change between the device attribute value set by executing the workflow and the current value of the device attribute in a user reaction log . The indication of a positive reaction from a user may be implemented by setting a Boolean No change flag in a user reaction log.

The exemplary user reaction log of the method of is a data structure including entries each representing a positive user reaction or a negative user reaction. Entries in the user reaction log of the method of include a reaction log ID uniquely identifying the user reaction log. Entries in the user reaction log of the method of also include a workflow ID list including identifications of one or more workflows executing one or more device controlling actions that resulted in setting the value of an attribute of the device. Entries in the user reaction log of the method of include a device ID identifying the device administered by executing the workflows. Entries in the user reaction log of the method of include an attribute change field that contains the value of the attribute if the value has changed a predetermined period of time after the workflow. Entries in the user reaction log of the method of also include Boolean No change flag that when set true is an indication of a positive reaction to the execution of a workflow. Entries in the user reaction log of the method of also include a date and time field recording the date and time of the execution of the workflow.

User reaction logs are useful in identifying unsuccessful device controlling actions according to the present invention. For further explanation therefore sets forth a data flow diagram illustrating an exemplary method for identifying an unsuccessful device controlling action in dependence upon the user reaction. The method of includes identifying in dependence upon entries in the user reaction log a device ID for a device having a threshold number of recorded representations of negative user reactions. Identifying in dependence upon entries in the user reaction log a device ID for a device having a threshold number of recorded representations of negative user reactions may be carried out by counting for each device ID for each workflow the number of recorded representations of negative user reactions and comparing the count to a threshold . The threshold is typically a value identified for a device predetermined as a threshold value for determining that a device controlling action is not successfully administering a device for a user.

The method of includes identifying a device controlling action of a workflow administering the device identified by the device ID . Identifying a device controlling action of a workflow administering the device identified by the device ID may be carried out by retrieving an action ID for the device controlling action from a database including individual actions indexed by workflow IDs and device IDs. A lookup on such a database in dependence upon device ID and workflow ID returns the device controlling action ID of the unsuccessful device.

Having identified the unsuccessful device controlling actions workflow decision management according to the present invention also includes modifying the workflow executing the device controlling action. For further explanation therefore sets forth a data flow diagram illustrating an exemplary method for modifying the workflow in dependence upon the identified unsuccessful device controlling action. The method of includes removing the identified unsuccessful device controlling action from the workflow . Removing the identified unsuccessful device controlling action from the workflow results in maintaining the workflow in all respects except for the unsuccessful action. In the example of a modified workflow includes a new workflow ID and sequence number that no longer includes the unsuccessful action . The modified workflow of also includes only the successful actions of the workflow from which it was created.

As discussed above many workflows are executed according to an associated tolerance governing the execution of the workflow. A tolerance that does not suit a user may cause a workflow to execute unsuccessful device controlling actions. For further explanation sets forth a data flow diagram illustrating another exemplary method for modifying the workflow in dependence upon the identified unsuccessful device controlling action. The method of includes modifying the workflow includes changing the tolerance of a workflow scenario associated with the workflow by including a new tolerance as the tolerance associated with the workflow scenario . Changing the tolerance of a workflow scenario associated with the workflow may be carried out by retrieving an associated workflow scenario for the workflow and retrieving the associated tolerance for the workflow scenario and changing the tolerance of the workflow scenario such that the workflow modified by allowing the workflow to be executed with a greater tolerance.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for workflow decision management. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

