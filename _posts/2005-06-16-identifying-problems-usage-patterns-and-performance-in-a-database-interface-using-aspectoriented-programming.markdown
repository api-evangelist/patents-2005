---

title: Identifying problems, usage patterns, and performance in a database interface using aspect-oriented programming
abstract: A method, computer program product, and data processing system for efficiently diagnosing errors and inefficiencies in database application code are disclosed. According to a preferred embodiment, techniques of aspect-oriented programming (AOP) are used to instrument database application code to monitor the usage of database resources. Specifically, pointcuts are defined to intercept accesses of database resources. Advice code associated with these pointcuts is used to collect information about the usage of database resources and to detect certain errors, such as resource leaks, when they occur. In a preferred embodiment, the AspectJ aspect-oriented programming language/system is used to define the pointcuts and advice code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945591&OS=07945591&RS=07945591
owner: International Business Machines Corporation
number: 07945591
owner_city: Armonk
owner_country: US
publication_date: 20050616
---
The present invention relates generally to instrumentation profiling and debugging of computer programs. Specifically the present invention is directed to a method computer program product and data processing system for instrumenting a database application to detect errors and performance issues.

Databases are computerized information storage and retrieval systems. A Relational Database Management System RDBMS is a database management system DBMS that stores information as tables containing tuples of data. These tables define relations which are mappings between associated items of data. The theory underlying relational databases was initially developed by in the early 1970s by Edgar F. Codd a researcher at International Business Machines Corporation who in 1981 was awarded the Turing Award the highest award in the Computer Science field for his pioneering work.

RDBMS software using a Structured Query Language SQL interface is well known in the art. The SQL interface has evolved into a standard language for RDBMS software and has been adopted as such by both the American National Standards Organization ANSI and the International Standards Organization ISO . In RDBMS software all data is externally structured into tables. The SQL interface allows users to formulate queries and data modification operations on the tables interactively as a batch process or through SQL code that is embedded in a host language such as C C JAVA COBOL or the like.

Although other proprietary interfaces also exist most modern commercially available database systems support a standard interface known as ODBC Open DataBase Connectivity for allowing application code to access or modify a database in a well defined manner. The JAVA programming language and runtime environment provides its own standard database interface known as JDBC JAVA DataBase Connectivity . In a typical JAVA based database application the application accesses the database through the standard interface provided by JDBC while the actual connection to the database is performed by a database driver or adapter component which serves as an intermediary between the standard JAVA runtime and the database. Typically these drivers or adapters are specific to a particular database system or vendor such as the DB2 database management system a product of International Business Machines Corporation . JDBC is heavily used in developing applications for use in a J2EE JAVA 2 Enterprise Edition application server environment.

Like all programs database applications are often prone to errors and inefficiencies such as resource leaks for instance . Traditionally detecting these errors and inefficiencies has relied on tracing the execution of the application server runtime or the database runtime. In many cases neither of these techniques is sufficient to diagnose the problem and the additional performance overhead required to enable such techniques can seriously degrade the performance or behavior of the application.

What is needed therefore is a simpler and more efficient manner of diagnosing errors and inefficiencies in database application code. The present invention provides a solution to this and other problems and offers other advantages over previous solutions.

The present invention provides a method computer program product and data processing system for efficiently diagnosing errors and inefficiencies in database application code. According to a preferred embodiment techniques of aspect oriented programming AOP are used to instrument database application code to monitor the usage of database resources. Specifically pointcuts are defined to intercept accesses of database resources. Advice code associated with these pointcuts is used to collect information about the usage of database resources and to detect certain errors such as resource leaks when they occur. In a preferred embodiment the AspectJ aspect oriented programming language system is used to define the pointcuts and advice code.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather any number of variations may fall within the scope of the invention which is defined in the claims following the description.

Before delving into the specifics of a preferred embodiment of the present invention it is helpful to understand what is meant by aspect oriented programming. A brief introduction to the basic concepts of aspect oriented programming is provided here by way of illustration. Aspect oriented programming is both a programming language paradigm as well as a scheme for the compilation and execution of programs.

As shown in under the traditional compilation paradigm for a computer program source code for the program is presented as input to a compiler which translates source code into object code . Object code is made up of code in the native language of the computing platform such as the hardware platform s native machine language or in the case of a virtual machine such as a Java virtual machine the executable bytecode the virtual machine is designed to execute . Object code may be combined with other object code such as other program modules or library routines by a linker . Linker is used to combine the various individual modules of object code into an executable form .

Aspect oriented programming on the other hand adds an additional level of abstraction to the software development process. As shown in a program is built from both component source code and aspect source code . Component source code is ordinary program code much like source code in . Aspect source code on the other hand is source code that operates on component source code to modify and or manipulate component source code before inclusion into the final program. A development tool known as a weaver performs the operations specified by aspect source code on component source code to obtain a resulting source code which may be fed into a compiler to obtain object code . Object code may then be utilized in the same manner as object code in .

The basic mechanism for modifying component source code using aspect source code is described in . Aspects source code such as aspect source code in is comprised of aspects such as aspect in . Aspect comprises a pointcut and advice code . Point cut comprises a pattern that is used to identify particular features in the component source code e.g. component source code in . Advice code contains program code that is used to modify features of the component source code identified by the pattern contained in pointcut . Some examples of advice to include before advice and after advice Before advice is code that is intended to execute before the code feature identified by the pattern in the pointcut. Similarly after advice is program code that is intended to be executed after the code feature identified by the pattern in the pointcut.

As shown in the example provided in pointcut specifies a pattern that identifies all methods beginning with the word get. One skilled in the art will recognize that JAVA programs often utilize a naming convention wherein methods that set attributes of objects are prefixed with the word set and methods that access the values of attributes of objects are prefixed with the word get. Objects that follow this naming convention are referred to as JavaBeans. Pointcut will therefore identify any method having a name that begins with get. One such method is method shown in . The fact that pointcut identifies method is represented in by arrow . Advice code contains before advice consisting of code to print the word Hello on the display console. Thus the full semantics of aspect is to identify each method having a name that begins with get and add code to the beginning of each such identified method to print the word Hello on the display console. Hence when an aspect weaver is applied to aspect and method the result is to insert before advice code in location at the beginning of method .

Thus as can be seen from aspect oriented programming provides a convenient mechanism for making global changes to program by matching patterns in the program code. Aspect oriented programming might be thought of in a very crude sense as a sophisticated form of search and replace as in a text editor or work processor . However aspect oriented programming is much more powerful than a textual search and replace because aspect oriented programming is capable of making global modifications to a program based on semantic features of the program rather than by raw text searching. One skilled in the art will recognize that the ability AOP provides to make global changes to a complete set of program features allows modifications that might otherwise have to be manually replicated across the entire program to be made in a single operation without risk that some of the set of features might be overlooked as might be the case if the program were edited manually .

When dealing with component source code written in a language such as JAVA which compiles predictably to a well defined bytecode representation even more sophisticated applications of aspect oriented programming are possible. As shown in one need not possess the actual component source code of the software to be modified using aspect oriented programming. Aspects may be applied to well defined byte code or object code such as JAVA .class files . In the example depicted in the original component source code component source code is already compiled via compiler into JAVA bytecode in the form of a .class file . Aspect source code is then applied to bytecode by weaver to obtain resulting object code .

The weaving process may also be performed dynamically at runtime as depicted in . In this example a JAVA virtual machine is used to execute the application. JAVA virtual machine employs class loaders and to dynamically load and link object code in the form of JAR files and class files e.g. JAR classes and . In the event that it is desired to apply aspect oriented programming techniques in the runtime environment depicted in a class loader such as class loader may be programmed to invoke an aspect compiler or weaver to combine component code in the form of JAR class files with aspect JAR class files prior to dynamic linking and execution.

A preferred embodiment of the present invention monitors an application s use of the JDBC JAVA DataBase Connectivity interface by applying aspect oriented programming techniques using the AspectJ language and development environment in the manner depicted in . AspectJ was developed by researchers at Xerox Palo Alto Research Center PARC and is freely available. AspectJ provides an aspect specification language and weaver for use with the JAVA programming language as component language .

One of the capabilities provided by a preferred embodiment of the present invention is to detect JDBC related resource leaks. A J2EE server often recycles or reuses various objects such as JDBC connections or prepared SQL statements. These objects are kept in a container or pool for use by different users i.e. by different clients . When a user has finished a unit of work the application is supposed to return these objects to the pool where they may be reused by other users applications. is a flowchart representation of a usual process of accessing a JDBC resource from a J2EE container in this manner. The application requests a JDBC resource object from the container pool block . The application uses the resource block and finally returns the resource to the container after using the resource block .

In certain pathological cases an application may not return the resource to the container. is a flowchart representation of a process of accessing a JDBC resource from a J2EE container in which the resource is not returned to the container. The application requests a JDBC resource object from the container pool block . The application uses the resource block but fails to return the resource to the container after using the resource thus resulting in a resource leak .

An additional pointcut intercept the termination of this unit of work and associated advice code determines if there are any remaining references to resources left within the tracking data structure block . If there are any block Yes then a resource leak has occurred and that fact is flagged e.g. by throwing an exception to allow a user administrator or developer to take note of that fact block . Otherwise block No regular execution continues.

According to the process described in a pointcut is used to intercept a call to a particular API or set of APIs such as APIs associated with JDBC for example block . Advice code associated with that pointcut is used to determine whether the API is deprecated either by consulting a memory table containing a list of deprecated or inadvisable APIs block or other metadata found within the source code itself such as a deprecated tag for use with the standard JavaDoc documentation engine or a comparable tag for use with XDoclet or another documentation tool which AspectJ can examine and flag accordingly block . If the API is identified as deprecated the deprecated API call is flagged as bad e.g. by throwing an exception to allow a user administrator or developer to determine appropriate action to take in response block .

Otherwise block No a determination is made as to whether the application has completed its use of the result set block . If so block Yes then advice code is used to record the fact that not all of the rows of the result set were used block . If not block No then the process continues to intercept a subsequent call to access the next row in the result set block .

PCI bus provides an interface for a variety of devices that are shared by host processor s and Service Processor including for example flash memory . PCI to ISA bridge provides bus control to handle transfers between PCI bus and ISA bus universal serial bus USB functionality power management functionality and can include other functional elements not shown such as a real time clock RTC DMA control interrupt support and system management bus support. Nonvolatile RAM is attached to ISA Bus . Service Processor includes JTAG and I2C buses for communication with processor s during initialization steps. JTAG I2C buses are also coupled to L2 cache Host to PCI bridge and main memory providing a communications path between the processor the Service Processor the L2 cache the Host to PCI bridge and the main memory. Service Processor also has access to system power resources for powering down information handling device .

Peripheral devices and input output I O devices can be attached to various interfaces e.g. parallel interface serial interface keyboard interface and mouse interface coupled to ISA bus . Alternatively many I O devices can be accommodated by a super I O controller not shown attached to ISA bus .

In order to attach computer system to another computer system to copy files over a network LAN card is coupled to PCI bus . Similarly to connect computer system to an ISP to connect to the Internet using a telephone line connection modem is connected to serial port and PCI to ISA Bridge .

While the computer system described in is capable of supporting the methods described herein this computer system is simply one example of a computer system. Those skilled in the art will appreciate that many other computer system designs are capable of performing the processes described herein.

One of the preferred implementations of the invention is a client application namely a set of instructions program code or other functional descriptive material in a code module that may for example be resident in the random access memory of the computer. Until required by the computer the set of instructions may be stored in another computer memory for example in a hard disk drive or in a removable memory such as an optical disk for eventual use in a CD ROM or floppy disk for eventual use in a floppy disk drive or downloaded via the Internet or other computer network. Thus the present invention may be implemented as a computer program product for use in a computer. In addition although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software one of ordinary skill in the art would also recognize that such methods may be carried out in hardware in firmware or in more specialized apparatus constructed to perform the required method steps. Functional descriptive material is information that imparts functionality to a machine. Functional descriptive material includes but is not limited to computer programs instructions rules facts definitions of computable functions objects and data structures.

While particular embodiments of the present invention have been shown and described it will be obvious to those skilled in the art that based upon the teachings herein changes and modifications may be made without departing from this invention and its broader aspects. Therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended such intent will be explicitly recited in the claim and in the absence of such recitation no such limitation is present. For non limiting example as an aid to understanding the following appended claims contain usage of the introductory phrases at least one and one or more to introduce claim elements. However the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles a or an limits any particular claim containing such introduced claim element to inventions containing only one such element even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an the same holds true for the use in the claims of definite articles.

