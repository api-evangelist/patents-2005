---

title: Integrating software-tests with software development environments or tools that can assist software-testing
abstract: A dynamic-bridge connects a collection of tests (e.g., proprietary tests) to a testing-framework and effectively allows the collection of tests to interface with the testing-framework, thereby allowing the development environment and tools that support the testing-framework to also support the collection of tests. The dynamic-bridge provides a dynamic test wrapper which can be dynamically constructed for a test and present it as a test which conforms to or is compatible with the testing-framework and executed within the testing-framework. Test results are reported in a form that is expected or acceptable by the framework. In effect, the dynamic test wrapper simulates executing the test in the testing framework. As a result, tools which have been integrated with the testing-framework can be used to support tests which may originally not conform or be compatible with the testing-framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075920&OS=09075920&RS=09075920
owner: Oracle America, Inc.
number: 09075920
owner_city: Redwood City
owner_country: US
publication_date: 20050722
---
The invention relates to testing computer program code or software testing and more particularly to techniques for allowing software tests to be supported e.g. integrated with software development environments and or tools that can assist the software testing process.

Broadly speaking computer program code or software can be tested to determine how well it works. Computer software testing or software testing is becoming an increasingly more important aspect of software development. There is also a desire to more rigorously formulize testing and integrate it more closely with the software development process rather than developing code and testing it in a separate development phase typically after code has been developed . Accordingly extensive efforts have been made by a number of entities to develop testing frameworks which can formulize testing and more closely integrate testing with other aspects of software development so that computer program code can be tested effectively as it is being written by computer programmers. One such testing framework is a Java based testing framework primarily known to those skilled in the art as the JUnit Testing Framework or JUnit .

JUnit Testing Framework or JUint among other things defines the structure of test cases or scenarios and provides testing tools or tools that can be used to run the test cases. An individual test or a collection of tests a test suite that conforms to the JUnit Testing Framework can be developed as program code is being developed. Junit provides a Graphical User Interface GUI that displays the progress and result of the test. depicts an exemplary screen that demonstrates a successful execution of a test in JUnit Testing Framework.

In addition JUnit Testing Framework JUint is supported by a number of programming environments which are primarily known by those skilled in the art as Integrated Development Environments IDEs . An Integrated Development Environment IDE in more conventional environments can for example be packaged as an application program that includes a code editor a compiler a debugger and a graphical user interface GUI builder. The IDE may be a standalone application or may be included as part of one or more existing and compatible applications. The BASIC programming language for example can be used within Microsoft Office applications which makes it possible to write a WordBasic program within the Microsoft Word application. Generally more modern Integrated Development Environments IDEs provide a user friendly framework for many modern programming languages such as Visual Basic Java and PowerBuilder. As such a testing framework e.g. JUnit Testing Framework can be integrated into an expansive integrated programming environment which includes numerous applications and tools thereby allowing the testing framework and effectively the testing process to further benefit from the additional applications and tools which have been developed or can be developed in the future.

A Java based Integrated Development Environment IDE which supports JUnit for example allows use of wizards as a tool for creating test suites generating automatic test cases and so on. By way of example one such Integrated Development Environment is primarily known as the IntelliJ IDEA which provides a comprehensive development environment for Java programming. IntelliJ IDEA provides a set of tools which are useful to developers in areas such as coding assistance and automation. Other Java based Integrated Development Environments for example include Eclipse Jbuilder Net Beans as well as numerous others which have been or can be integrated with the JUnit testing framework. The JUnit organization provides additional information about numerous Java based Integrated Development Environments or tools that can support the JUnit Testing Framework. It should be noted that the JUnit Testing Framework JUnit is supported by tools which may or may not be formally considered as a part of an Integrated Development Environment IDE . By way of example a builder tool which is primarily known as the Apache Ant also supports the JUnit Testing Framework. The Apache Ant among other things can be used to generate build files which assist in compilation of Java source code.

In view of the foregoing it should be apparent that Integrated Development Environments IDE and tools that can support more formulized and automated testing of computer program code are highly useful and an increasingly important aspect of modern software development.

Broadly speaking the invention relates to techniques for allowing software tests to be supported by a development environment and or tools that can assist the software testing process. The development environment and or tools typically supports a testing framework that can among other things define the structure for test cases and or tools that can be used to run the test cases. In accordance with one aspect of the invention a dynamic bridge which connects a collection of tests to a testing framework is disclosed. This connection effectively allows the collection of tests to interface with the testing framework. It will be appreciated that by connecting the collection of tests to the testing framework the dynamic bridge allows the Integrated Development Environment IDE and tools that support the testing framework to also support the collection of tests.

In one embodiment the dynamic bridge provides a dynamic test wrapper which can be dynamically constructed for a selected one or more tests in a collection of tests. It will be appreciated that dynamic wrapper wraps around a test to present it as a test which conforms to or is compatible with the testing framework and can be executed within the testing framework. In other words the dynamic wrapper can present the test in a form which is acceptable by the testing framework simulate execution of the test in the testing framework and report the results in a form which is acceptable or expected by the testing framework to effectively present the test to the testing framework and report the test results as expected.

It will be appreciated by those skilled in the art that the invention can be implemented in numerous ways including as a method an apparatus a computer readable medium and a computer system. Several embodiments of the invention are discussed below.

Other aspects and advantages of the invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating by way of example the principles of the invention.

As noted in the background section Integrated Development Environments IDE and tools that can support more formulized and automated testing of computer program code are highly useful and increasingly important aspect of modern software development. As such it is highly desirable to allow software tests to be supported by an Integrated Development Environment IDE and or tools that can assist in testing process e.g. developing test cases executing test cases monitoring test progress and reporting or recording test results . Unfortunately some software tests e.g. proprietary tests which have already been developed cannot be readily supported by an Integrated Development Environment or tools. In other words it may not be possible or it may require a significant amount of effort to allow a proprietary test to be supported by an Integrated Development Environment IDE or tool that can assist the testing process.

More particularly even assuming that a software test or test has been developed to conform to an Application Programming Interface API of an Integrated Development Environment IDE or tool extensive efforts have to be made to among other things develop a Graphical User Interface GUI for the software test which is consistent with that provided by the IDE and or a tool that can assist the testing process. Moreover it would still require additional effort to develop multiple connections or bridges that connect a software test to each of numerous Integrated Development Environments IDEs or tools that have been developed and are likely to be developed in the near future. As shown in multiple connections or bridges and would be required to connect a single test to various Integrated Development Environments IDEs and and tools and .

However developing or providing multiple connections between a software test e.g. test and numerous other Integrated Development Environments and tools is not a cost effective solution as it would require a great deal of effort to connect just one test. Moreover in some cases it may not be desirable or even possible to provide one or more connections or bridges for a test that does not conform to the API and or GUI of a particular Integrated Development Environment IDE or tool. Therefore there is a need for alternative techniques for allowing software tests to be supported by an Integrated Development Environment or tool that can assist the software testing process.

Broadly speaking the invention relates to techniques for allowing software tests to be supported by a development environment and or tools that can assist the software testing process. The development environment and or tools typically supports a testing framework that can among other things define the structure for test cases and or tools that can be used to run the test cases. In accordance with one aspect of the invention a dynamic bridge which connects a collection of tests to a testing framework is disclosed. This connection effectively allows the collection of tests to interface with the testing framework. It will be appreciated that by connecting the collection of tests to the testing framework the dynamic bridge allows the Integrated Development Environment IDE and tools that support the testing framework to also support the collection of tests.

In one embodiment the dynamic bridge provides a dynamic test wrapper which can be dynamically constructed for a selected one or more tests in a collection of tests. It will be appreciated that dynamic wrapper wraps around a test to present it as a test which conforms to or is compatible with the testing framework and can be executed within the testing framework. In other words the dynamic wrapper can present the test in a form which is acceptable by the testing framework simulate execution of the test in the testing framework and report the results in a form which is acceptable or expected by the testing framework to effectively present the test to the testing framework and report the test results as expected.

Embodiments of these aspects of the invention are further discussed below with reference to . However those skilled in the art will readily appreciate that the detailed description given herein with respect to these figures is for explanatory purposes as the invention extends beyond these limited embodiments.

As shown in the dynamic bridge may be represented as providing an internal API and a dynamic wrapper . The internal API refers to a connection mechanism between the collection of tests and the dynamic bridge . The internal API essentially can provide an access mechanism for accessing the collection of tests and as such would be provided in consideration of the internal organization or structure of the collection of tests . The dynamic wrapper in effect can wrap each one of the tests in the collection of tests and present them as a test which is in compliance or compatible with the testing framework . In addition the dynamic wrapper can determine test results and report them as test result in a form which is acceptable or accepted by the testing framework e.g. an API of the testing framework . In any case dynamic wrapper can construct a wrapper for one or more selected tests in the collection of tests when desired i.e. dynamically . Functionality of the dynamic wrapper is further described below.

To further elaborate depict selected tests and selected from the test collection and respectively wrapped by wrappers and which effectively makes them conforming to and or compatible with the testing framework . It should be noted that the dynamic wrapper layer shown in can effectively provide the wrappers and for the selected tests and of the collection of tests shown in . Further the dynamic wrapper shown in can effectively initiate an isolated test execution environment or sandbox for executing the wrapped tests and . It will be appreciated that the isolated test environment isolates the tests and so that the result of one test does not adversely affect the result of another test. Furthermore the result of testing and is respectively reported via the wrappers and to the testing framework also shown in .

Referring to the collection of tests are organized in a hierarchical representation which effectively represents the collection of tests as a test suite which is divided into a number of tests or test categories T . . . T . Each of the tests or test categories T T may be divided or sub divided into tests sub categories or subtests e.g. TM . . . TM and so on. By way of example test suite may be represented as a root directory which involves various directories or files similar to a file system known to those skilled in the art . As such an individual test module may be stored under a directory TM and a test suite can be stored under another directory T. In any case an internal API of the dynamic bridge recognizes the organization of the collection of tests and can be used to selectively access various tests in the test collection e.g. tests and . As a result a test suite can be constructed from the selected tests.

As shown in the dynamic wrapper layer may be represented as having various architectural layers namely a test presentation layer a test isolation layer a test execution layer and a test reporting layer . The test presentation layer can for example include a compiler that compiles various selected tests in the test selection or formats or reformats tests to transform them to a form which is expected by or acceptable to the Java based testing framework . In general the test presentation layer transforms the test suite to a test suite which conforms to or is compatible with the testing structure defined by the testing framework . The test isolation layer can initiate an isolation sandbox environment which is used by the text execution layer to effectively execute the selected tests in isolation so that execution of one test cannot adversely affect the result of the execution of another test. As will be described below the test isolation layer and execution layer can for example be implemented in a virtual machine in accordance with one embodiment of the invention. The test reporting layer determines the result of the execution of the tests and reports the result using the API of the Java based testing framework . In general test reporting layer with conjunction of other layers effectively simulates execution of test in the Java based testing framework The test reporting layer can for example be implemented as an exception handler mechanism that is invoked when a test throws an exception as a result of a test failure. Throwing an exception in Java programming language is well known to those skilled in the art. Nevertheless the functionality of the test reporting layer will be further described in greater detail in accordance with one embodiment of the invention.

Referring now to a connection generation method for generating a connection between a collection of tests and a Java based testing framework e.g. JUnit is depicted in accordance with one embodiment of the invention. Initially a test suite is constructed from one or more software tests tests which have been selected from a collection of software tests. It should be noted that the test may not conform to and or may not be compatible with the Java based testing framework. However the test suite is subsequently transformed so that it can be presented as a test suite which conforms to or is compatible with the Java based testing framework that is supported by one or more IDEs or tools.

Next a test execution environment is initiated where the one or more software tests can be isolated from each other when executed. As will be discussed below tests may be isolated for example by using thread group and application contexts mechanisms in a Java Programming Environment. Thereafter a software test is executed in the test execution environment and it is determined whether the executed test has resulted in failure i.e. a failure has been detected . Accordingly failure of the executed test can be reported to the testing framework in a form that conforms to or is compatible with the testing framework e.g. via an API defined for reporting testing failures to the testing framework . However no failure is reported if it is determined that the executed test has not resulted in failure. In any case subsequent to determining whether the executed test has resulted in failure it is determined whether there is at least one more test to execute. If it is determined that there are no tests to execute the connection generation method ends. However If it is determined that there is at least one more test to execute the connection generation method proceeds in a similar manner as noted above until it is determined that there are no more tests to execute.

As noted above a dynamic bridge can connect a collection of software tests to a Java based testing framework e.g. JUnit in accordance with one embodiment of the invention. The dynamic bridge allows the collection of tests to be supported by one or more Java based Integrated Development Environments IDEs and or tools e.g. ANT builder tool that can assist the testing process.

As will be appreciated by those skilled in the art a Java based dynamic bridge can for example be implemented by providing RegTestSuite and RegTestCase classes which can be respectively associated with the Junit.Framework.TestSuite and Junit.Framework.TestCase classes of the JUnit Testing framework . Accordingly tests which do not conform to the JUnit Testing framework e.g. proprietary regression tests can be collected as a test suite for example the RegTestSuite as depicted in in accordance with one embodiment of the invention. The collected tests can for example be executed using the RegTestCase class as depicted in .

Referring now to a test suite construction method for constructing a test suite from a collection of test is depicted in accordance with one embodiment of the invention. The test suite construction method illustrates use of an exemplary RegTestSuit class with can be associated with the Junit.Framework.TestSuite known to those skilled in the art . Initially a selection that identifies one or more tests in a collection of tests is received . It should be noted that the collection of tests are organized in a hierarchy with directories which may include one or more directories test directories and or individual tests tests . Next the location of a test in the collection of tests is determined . Subsequently it is determined whether the location is a directory or an individual test. Accordingly a new RegTestSuite which can represent a test suite including one or more individual tests can be generated if it is determined that the location is a directory. However if it is determined that the location is a test a new RegTest is generated which can represent an individual test. Thereafter it is determined whether there are no more locations to check. If it is determined that there are no more locations to check the method ends. However if it is determined that there is at least one more location to check the method proceeds in a same manner as described above to either generate a RegTestSuite or a RegTest. The test suite construction collection method ends when it is determined that there is no other location to check.

The compiled test which has been effectively transformed to a presentable form by the compilation is executed in the specific application context which has been generated . Next it is determined whether the test has failed and an exception can be thrown accordingly . As will be appreciated by those skilled in the art the exception can be handled by an execution handler which uses the API of the Java based testing framework to report the failure e.g. method failed API of JUnit as known in the art . If it is determined that the test has not failed no exception is thrown. In any case after the execution of the test the application context is disposed and the method ends. It should be noted that all of the threads and or effects e.g. windows created or caused to be created by the test are terminated by disposing of application context and terminating the thread group.

As shown in a time out functionality may also be implemented to allow the execution of the test to terminate after waiting for a predetermined amount of time rather than waiting indefinitely for execution of an individual test which adversely affects the testing process. Accordingly after waiting for a predetermined amount of time the thread which runs the test can be stopped if the application context has not been already disposed i.e. the thread running the test is still active . In addition a time out exception failure can be thrown which may be handled by a time out handler that reports the failure using the API defined for JUnit.

The many features and advantages of the present invention are apparent from the written description and thus it is intended by the appended claims to cover all such features and advantages of the invention. Further since numerous modifications and changes will readily occur to those skilled

