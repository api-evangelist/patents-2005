---

title: Crawling databases for information
abstract: A system facilitates the search engine to search for pieces of information in various databases and application documents without the need to know the specific protocols to communicate with the various databases and application documents, such as Microsoft Excel documents. Despite the multitude of possible protocols which a crawler would have to use to connect to the databases, the system includes a unifying application programming interface to unify the way to access pieces of information in the databases and application documents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07801880&OS=07801880&RS=07801880
owner: Microsoft Corporation
number: 07801880
owner_city: Redmond
owner_country: US
publication_date: 20050329
---
The present invention relates generally to searching and more particularly to crawling diverse sources of information such as application documents and databases so as to enhance keyword matches by search engines.

The Internet is a world wide collection of networks and gateways that use the TCP IP suite of protocols to communicate with one another. At the heart of the Internet is the backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial government educational and other computer systems that route data and messages. One or more Internet nodes can go offline without endangering the Internet as a whole or causing communications on the Internet to stop because no single computer or network controls it. The genesis of the Internet was a decentralized network called ARPANET created by the Department of Defense in 1969 to facilitate communications in the event of a nuclear attack. Currently the Internet offers a range of services to users such as e mail and the World Wide Web.

Vast sets of interlinked hypertext documents are residing on HTTP servers all around the world. These documents comprising the World Wide Web called Web pages are written in HTML hypertext markup language identified by URLs uniform resource locators that specify the particular machine and path name by which a file can be accessed and transmitted from server to end user via HTTP hypertext transfer protocol . These Web pages can be searched by a search engine that gathers lists of available Web pages and stores these lists in databases that users can search by keywords. Older examples of search engines include Lycos and Excite. More recent examples of search engines include Google and A9.

Web pages are easy to search on the Internet because many of them are written using a common language HTML accessible by agreed upon designation URLs and communicable via a common protocol HTTP. Searching on an intranet poses problems typically not seen on the Internet . The intranet is a private network based on Internet protocols such as TCP IP but designed for information management within a company or organization. Its uses include such services as document distribution software distribution access to databases and training. The intranet is so called because it looks like a World Wide Web site and is based on similar technologies yet is strictly internal to the organization and is not connected to the Internet proper. Web pages made available within the intranet can be searched by a conventional search engine . As is typical many documents such as documents connected to the intranet are not formed using a common language such as hypertext but in more specific formats such as Microsoft Word Microsoft Excel and so on. Conventional search engines such as the search engine are unable to search for pieces of information within documents that are not formed from a common language such as hypertext.

A similar problem occurs when searching databases such as a database . In a database data is not associated with a document such as a Web page. But there are desired pieces of information stored within the database that need to be exposed to users of the intranet . Unfortunately the database lacks any well organized structure to search. Another problem with searching the database is that there are many protocols that can be used to search the database . For example the search engine can use a query language to access the data. As is typical however databases such as the database are not accessed directly but instead the search engine has to go through various sets of application programming interfaces. Unlike the Internet where the search engine has to know only one protocol which is HTTP to communicate with Web pages to extract data searching the intranet may require the search engine to know multiple protocols that may or may not be appropriate to extract pieces of information from databases such as the database or application documents .

While these problems and others are discussed above in the context of intranet searches other database searches and document searches have similar if not identical problems in heterogeneous environments that are often associated with an intranet. Without resolution to the problem of responding efficiently to users intranet queries users may eventually no longer trust a search engine to provide a desired computing experience that can reproduce stored pieces of information and demand for search engines will diminish in the marketplace. Thus there is a need for a system method and tangible computer readable medium for responding to intranet queries while avoiding or reducing the foregoing and other problems associated with existing systems.

In accordance with this invention a system method and tangible computer readable medium for crawling databases and application documents is provided. The system form of the invention comprises a system for exploring diverse databases for information. The system includes unifying data structures stored in a tangible computer readable medium for enumerating a set of databases to be explored and filters for constraining the information to be returned. The system further includes a unifying application programming interface stored in another tangible computer readable medium for transforming protocols for communicating with the set of databases into one protocol. The system further includes a crawler using the one protocol to invoke a method described in the unifying data structures to explore desired pieces of information in the set of databases without knowing the protocol specific to each database in the set of databases.

In accordance with further aspects of this invention a computer readable medium form of the invention includes a computer readable medium having a data structure stored thereon for enhancing a process for crawling for pieces of information in diverse databases. In embodiments consistent with the invention the computer readable medium for example comprises a physical material used for storing computer based information to be interpreted and acted upon by a computer. The computer readable medium in embodiments consistent with the invention are suitable for example to be fed directly into the computer for processing the data structure stored thereon. The data structure includes a system field that is indicative of a database to be explored by a crawler an entity field that is indicative of a meaning to be imparted to pieces of information stored in the database a method that is indicative of an invokable piece of logic for finding instances of the entity field in the database a parameter field that is indicative of a variable to be populated by a value and a filter field that is indicative of an annotation to constrain the pieces of information to be returned via the invocation of the method.

In accordance with further aspects of this invention a method form of the invention includes a computer implemented method for exploring databases and application documents for desired pieces of information. The method includes crawling for desired pieces of information by accessing unifying data structures to explore each entity under each database by invoking a finder method with one or more filters. Each filter constrains the pieces of information to be returned. The method further includes receiving a selection when a user selects a hyperlink. The hyperlink is associated with an identifier to obtain pieces of information in one or more databases pertaining to an entity associated with the identifier.

A system in which business systems connected to an intranet can be searched is illustrated in . The system is a networked computing environment that has pieces of software applications collaborating to allow a crawler to find pieces of information stored in business systems which are formed from databases and application documents not shown . The crawler is an automated application that searches an intranet for desired pieces of information. The crawler indexes key fields in databases and content related information in such a way as to allow an examination for matches by a search engine not shown .

The system illustrated in provides a facility that enables the search engine to search for pieces of information in databases without the need to know the specific protocols to communicate with databases and application documents such as Microsoft Excel documents. Despite the multitude of possible protocols which the crawler would have to use to connect to databases various embodiments of the present invention include a unifying application programming interface to unify the way to access pieces of information in databases and application documents. The unifying application programming interface provides a translation to allow the crawler to communicate with databases without knowing the specific protocols to communicate with databases and application documents. Many databases such as databases understand structured query language which is a conventional database sublanguage used in querying updating and managing databases. However databases typically have business logic that may obscure the use of structured query language to obtain desired pieces of information from databases . Therefore each database has a customizable protocol which is specific to a particular database to query the particular database for pieces of information. Many software applications stored application documents in embedded databases that are not accessible or visible to the crawler . These embedded databases in software applications are accessible if proper protocols are complied with. Various embodiments of the present invention allow a user to enter a keyword into a search engine and through the crawler desired pieces of information in databases can be found and indexed in a way that these pieces of information can be returned as a search result to users.

The unifying application programming interface together with the unifying data structures allow the crawler to communicate with databases without knowing specific protocols to communicate with databases and application documents. Even if the protocols of databases were known specific application programming interfaces A A of databases also have to be known in order to obtain desired pieces of information within databases . The unifying application programming interface together with the unifying data structures liberate the crawler from knowing the specific protocols as well as the specific application programming interfaces A A to obtain desired pieces of information.

As will be appreciated by one skilled in the art pieces of information stored in databases can be quite large ranging in the terabytes. Even though databases can process various pieces of information at tremendous speed various pieces of information get very large very quickly. It is preferred that the crawler be constrained in regard to how much it will explore to index pieces of information in databases . Legacy data or historical data that are not of interest should preferably be avoided by the exploration of the crawler . Various embodiments of the present invention include filters or annotations in the unifying data structures and these filters or annotations provide various constraints on the exploration of the crawler . When the crawler invokes the unifying application programming interface the unifying application programming interface consults with the unifying data structures to understand the constraints by which to explore pieces of information in the database and application documents. One suitable technique to provide the filters or annotations is the use of data description language which is a language designed specifically for describing data structures.

Suppose the database has an API A which can be invoked to get pieces of information regarding customers of a particular business. If the API is invoked the database returns a list of customers that can be searched through. Various embodiments of the present invention filter or annotate input parameters to the invocation of that API with constraints such as the last modified date to limit the exploration of the database . The crawler can use the constraints stored in the unifying data structures to find pieces of information that are newer than the last modified date. The API A returns pieces of information that correspond to the constraint last modified date provided by the unifying data structures . The constraints among other things stored by the unifying data structures provide meaning to the API A in this example. In other words the returned pieces of information are known to be customer information that are newer than the last modified date. The use of filters or annotations allows the crawler to explore more efficiently.

After the database is explored by the crawler pieces of information come back by field names and field values. Each field has a certain meaning. A field may be a uniquely identifying field that identifies a particular row if the database were implemented as a relational database. Various embodiments of the present invention can create hyperlinks from these uniquely identifying fields so as to present category results to users allowing connections to be made to the values associated with the pieces of information. When a user selects a hyperlink all pieces of information connected with that particular hyperlink are displayed to the user via an appropriate application such as a browser. Preferably this technique is used to avoid overloading databases by requiring databases to return everything that the crawler has explored. The filters or annotations in the unifying data structures as well as the use of the key fields as identifiers prevent the return of all pieces of information at once so as to avoid destroying a computing system formed by the databases . Various embodiments of the present invention use the filters or annotations in the unifying data structures and the key fields as identifiers to break up search requests in multiple pieces. When a user selects a hyperlink connected with a particular identifier which in turn is connected with fields that uniquely identify a row in the database a portion of the pieces of information indicated as of interest by the user is returned.

Databases are composed of records each containing fields together with a set of operations for searching sorting recombining and other functions. A field in a record is a structure that uniquely identifies pieces of information designated to be part of a key. These keys aid in the performance of retrieval of pieces of information in databases . Various embodiments of the present invention provide a description or a name associated with these key fields. When a user selects one of these key fields an appropriate record containing pieces of desired information is returned to the user.

The unifying data structures describe a directory of systems representing databases that the crawler can explore. In other words the unifying data structures enumerate line of business systems such as databases within an organization so as to allow the crawler to explore. The filters or annotations in the unifying data structures provide meanings to the pieces of information in databases that are found by the exploration of the crawler . Through the unifying application programming interface the crawler may communicate with any of the databases . The crawler needs only to communicate with the unifying application programming interface . The unifying application programming interface knows a particular adapter among adapters to use to communicate with databases . A chosen adapter among adapters in turn knows a particular API among APIs A A to access pieces of information in databases .

Adapters are typically provided by software manufacturers of databases . However third party software manufacturers can also provide adapters . Although typically the adapters do not provide semantic transformation or the imparting of meanings the unifying application programming interface together with the unifying data structures provide semantic transformation because as can be appreciated by one skilled in the art the crawler typically does not expect to understand the semantics of pieces of information stored in the databases . During exploration the crawler sees fields or tables or pieces of information without understanding what the pieces of information mean. The semantic transformation provided by the unifying application programming interface and the unifying data structures such as last modified date enable the crawler to search more intelligently.

A system cloud defines attributes and services representing a line of business that contains pieces of information connected with that business. For example databases are each a system representable by the system class . An instance of the system includes a SAP system A which defines attributes and services connected with the SAP system. An edge emanating from the SAP system A and terminating in an arrow shaped figure at the system cloud indicates that there is a correspondence between an instantiation of the SAP system A and the system cloud .

An entity cloud defines attributes and services connected with a structure that is imposed over pieces of information in a system such as databases or the SAP system A. For example suppose the SAP system A is implemented using a relational database. Using an appropriate instantiation of the entity cloud the crawler does not see a relational table of data but rows of customers in the SAP system A. An edge emanating from the entity cloud and terminating in an arrow shaped figure at the system cloud indicates a one to many relationship in other words one system and many entities within the one system with the system cloud .

A customer instance A defines attributes and services connected with a representation of a customer that purchases a commodity or service. The customer instance A can be used to impose meanings and structure over pieces of information in the SAP system A to indicate that certain pieces of information contained in them are information pertaining to customers. Each entity as represented by the entity cloud is a description of structures over pieces of information that exist in systems represented by the system cloud such as the SAP system A. An edge emanating from the customer entity A and terminating in an arrow shaped figure at the entity cloud indicates that there is a correspondence between an instantiation of the customer entity A and the entity cloud .

Each entity cloud has characteristics that are represented by a method cloud . The method cloud defines attributes and services representing behaviors that an entity may have. An edge emanating from the method cloud and terminating in an arrow shaped figure at the entity cloud indicates a one to many relationship in other words one entity and many methods within the one entity with the entity cloud .

A finder method A provides the ability to find entities within a system. For example the finder method A may be used to find customers as entities in a system such as the SAP system A. Preferably the crawler uses a particular finder method of an entity in the system to find all instances of the entity. An edge emanating from the finder method A and terminating in an arrow shaped figure at the method cloud indicates that there is a correspondence between an instantiation of the finder method A and the method cloud .

Each method has one or more parameters. These parameters are represented by a parameter cloud which defines attributes and services representing a parameter for a method. An edge emanating from the parameter cloud and terminating in an arrow shaped figure at the method cloud indicates a one to many relationship in other words one method and many parameters within the one method with the method cloud .

One type of parameter is a filter represented by a filter cloud A. The filter cloud A defines attributes and services that annotate or limit pieces of information explored and returned by the crawler via the invocation of a method such as the finder method A. An edge emanating from the filter cloud A and terminating in an arrow shaped figure at the parameter cloud indicates a one to many relationship in other words one parameter and many filters within the one parameters with the parameter cloud .

One preferred filter is represented by the modified since filter B which defines attributes and services connecting with limiting pieces of information that have a date of modification beyond a particular point. An edge emanating from the modified since filter A and terminating in an arrow shaped figure at the filter cloud A indicates that there is a correspondence between an instantiation of the modified since filter B and the filter cloud A. The filter cloud A can be instantiated to annotate or filter for desired pieces of information from a system such as the SAP system A.

Preferably the name of the method such as the finder method A and its signature such as instances of the parameter cloud and instances of the filter A i.e. the modified since filter B are textually described and stored in the unifying data structures . The method cloud is a collection of parameters represented by the parameter cloud . A collection of methods represented by the method clouds are characteristics or behaviors of an entity represented by the entity cloud . Together instances of the system cloud instances of the entity cloud and instances of the method cloud point to a piece of logic stored in a system such as API A A of databases which can be invoked to obtain desired pieces of information.

Suppose a user enters a search expression 98229 into a search entry area of a browser. The search string could mean a number of things such as an order number a customer number a zip code and so on. Neither the search engine nor the crawler would know what is meant by the search expression. The entity class provides semantics in the unifying data structures so as to allow the return data to make sense. For example the crawler may return the categories of entities in the SAP system A where the search expression 98229 can be found. These categories include order number customer zip code and so on. The search expression could appear in any fields stored in the SAP system A or other systems such as databases . To get the pieces of information out of a system the user needs to indicate by selecting a hyperlink representing a particular entity. From this election the crawler would know the specific method or finder method to invoke so as to extract the desired pieces of information from the SAP system A.

Various embodiments of the present invention supplant the need to write a new protocol handler that interacts directly with a protocol specific to a particular system such as databases . Instead using the unifying application programming interface and the unifying data structures the crawler needs to interact directly with the unifying application programming interface without knowing the specific details of protocols required by databases . The specific protocols connected with databases are in a sense transformed to a single unifying protocol by various embodiments of the present invention. More specifically the transformation is the invocation of a finder method for a particular entity by the crawler . To find information the crawler needs only to find a desired finder method of a particular entity of interest to a user. No other complicated protocol needs to be known by the crawler to extract desired pieces of information from databases .

The unifying data structures textually contain various systems defined by the system cloud various entities defined by the entity cloud various methods such as the finder method A defined by the method cloud various parameters defined by the parameter cloud and various filters such as the modified since filter B defined by the filter cloud A. It is preferred that an information technology IT worker within an organization with knowledge of systems such as databases populate the unifying data structures . There is no need for writing code using various embodiments of the present invention in the implementation of the unifying data structures . It is preferred that a user interface be provided to the information technology worker in the organization to populate the unifying data structures .

There can be more than one finder method A. Preferably one finder method allows the finding of a specific row containing pieces of information within a system such as databases . Another suitable finder is one that finds multiple rows containing desired pieces of information. Some methods represented by the method cloud may have complex parameters represented by the parameter class . To simplify the invocation of the method various embodiments of the present invention allow default parameters for various methods to be described and stored in the unifying data structures . These default parameters will be automatically inserted in the invocation of the method without the need for the crawler to specify the minutiae of the parameters.

From Terminal A the process proceeds to block where an information technology worker textually specifies one or more systems. The process proceeds to block where the IT worker textually specifies one or more entities in a system. The IT worker then textually specifies one or more methods i.e. a finder method connected with an entity. See block . The process then flows to block where the IT worker textually specifies one or more parameters connected with a method. Next at block the IT worker textually specifies one or more filters connected with a method. The IT worker also textually specifies one or more default parameters. See block . The method then continues to the exit Terminal B.

From the exit Terminal B the process proceeds to a set of process steps defined between a continuation terminal Terminal C and an exit terminal Terminal D . The set of process steps describes a crawling process that is executed over databases and application documents.

From Terminal C the process proceeds to block where the crawler using the unifying API goes through the unifying data structures and selects a system to crawl. Next at block the crawler using the unifying API finds an entity of the system within the unifying data structures to crawl. One example of a system is the database . Another example of an entity is the customer entity A. The crawler using the unifying API finds a find method of the entity. See block . The process then proceeds to block where the crawler using the unifying API finds one or more parameters associated with the find method. The crawler using the unifying API finds one or more default parameters. See block . The process then continues to block where the crawler using the unifying API finds one or more filters so as to constrain the expiration of the crawler. Next the process continues to another continuation terminal Terminal C .

From Terminal C the crawler causes the unifying API to invoke the method with one or more default parameters constrained by one or more filters. Next at block the unifying API translates the method and parameters to another method with parameters that are understandable by the adapter for the particular system such as the database . The adapter translates the method invocation into a protocol understandable by an API other system such as the API A. See block . The process then continues to block where the adapter translates the method invocation into a protocol understandable by a particular API of the system that can find desired pieces of information. The process then continues to another continuation terminal Terminal C .

From Terminal C the process proceeds to decision block where a test is performed to determine whether the crawler has completed its crawl using the chosen method. If the answer is NO to the test at decision block the process loops back to execute a test at decision block again. Otherwise if the answer is YES the process continues to block where the method indexes key fields and descriptions of the key fields that would uniquely identify rows containing the desired pieces of information. Another test is performed at decision block to determine whether there are more entities within the system to crawl. If the answer to the test at decision block is YES the process proceeds to another continuation terminal Terminal C . From Terminal C the process loops back to block where the above identified processing steps are repeated. Otherwise the answer to the test at decision block is NO and the process proceeds to another continuation terminal Terminal C .

From Terminal C the process proceeds to decision block where a test is performed to determine whether there are more systems to crawl. If the answer to the test is YES the method continues to another continuation terminal Terminal C . From Terminal C the process loops back to block where the above identified processing steps are repeated. Otherwise the answer to the test at decision block is NO and the process proceeds to the exit Terminal D.

From exit Terminal D the process proceeds to a set of processing steps defined between a continuation terminal Terminal E and an exit terminal Terminal F . The set of processing steps selectively displays various identities of pieces of information found by the crawler. From Terminal E a user enters a search expression through a browser. See block . Next at block the process gathers entities of systems that contain the contents of the search expression. The process then continues to another continuation terminal Terminal E .

From Terminal E the process proceeds to block where the process presents descriptions of the entities to the user that contain the contents of the search expression. Next at block the user selects a particular entity. The unifying API using an index pulls actual pieces of information relating to the contents of the search expression and the particular entity of a particular system. The process then proceeds to block where the process presents pieces of information to the user on the browser. The process then continues to decision block where another test is performed to determine whether there are more searches to be executed. If the answer to the test at decision block is YES the process continues to Terminal E and loops back to where the above described processing steps are repeated. Otherwise the answer to the test at decision block is NO and the process continues to the exit Terminal F and terminates execution.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

