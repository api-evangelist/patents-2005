---

title: General purpose annotation service for portal-based applications
abstract: A method of providing annotations within a portal environment can include executing a portlet object having a tag, wherein the tag specifies an annotation service associated with an artifact presented by a graphical user interface of the portal environment. A visual identifier can be presented proximate to the artifact. The visual identifier can reference the annotation service. The method further can include creating an annotation using the annotation service responsive to the selection of the visual identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235560&OS=09235560&RS=09235560
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09235560
owner_city: Armonk
owner_country: US
publication_date: 20050609
---
The present invention relates to information management and more particularly to annotating software objects with supplemental information.

Within the context of information technology annotations generally refer to the attachment or association of supplemental information to a portion of user supplied data. In illustration one variety of annotation system pertains to word processing applications. Modern word processing applications typically allow users to select a given portion of text from within a word processing document. The selected text then can be associated with an annotation usually in the form of a comment. Comments include additional user supplied text which is visually distinguishable from the regular text of the electronic document. For example comments often are distinctively highlighted and placed in the document margin proximate to the text to which the comment has been associated. Such annotation schemes frequently mimic the manner in which people manually mark up or edit paper based documents.

While annotations of this sort can be helpful in terms of providing additional commentary for a portion of text limitations do exist. One limitation is that conventional annotation frameworks used within word processing applications do not provide a means for regulating which users are provided access to a given comment. Annotations also are limited to a single type i.e. a comment which serves an explanatory function. Further annotations used within word processing applications can only be associated with the content of an electronic document. That is the annotations cannot be associated with other software objects such as elements of the graphical user interface GUI of the word processing application.

Another variety of annotation scheme provides supplementary Universal Resource Locators URLs for selected Web pages. Such annotation schemes attempt to associate particular URLs or Web addresses with one or more other related URLs. When a user accesses or downloads a given Web page the user can be alerted that one or more other URLs are available which may provide further information in addition to that which is included in the user requested Web page. The user then can choose whether to access that supplemental content.

Annotation systems of the variety described above typically require the user to download a program referred to as a plug in. The plug in executes in concert with the user s browser and monitors the URLs requested by the user. These URLs are compared with a listing of URLs available from an online service that is accessed by the plug in. If a user requested URL is associated with one or more other URLs listed in the online service the user can be notified.

This sort of Web based annotation system also has disadvantages. One disadvantage is the need for the user to download and execute a third party application. Additionally as was the case with word processing type annotation systems conventional annotation systems for Web pages typically perform a single limited function. In this case that function is to associate a URL with another URL. Other limitations of Web based annotation systems include the inability to regulate annotations based upon user identity enforce security policies or perform more varied programmatic functions using annotations.

It would be beneficial to provide an annotation service which overcomes the deficiencies described above thereby providing increased flexibility in terms of the type of annotation that can be created and the type of software object with which an annotation can be associated.

The present invention provides a solution for providing and using annotations within a portal based computing environment. One embodiment of the present invention can include a computer implemented method of providing annotations within a portal environment. The method can include storing within a tag library a plurality of tags and code associated with each tag wherein the code associated with each tag specifies a handler and a visual identifier for the tag. The method can include executing a portlet object comprising a tag associated with at least one artifact displayed within a view of the portlet object. The method also can include responsive to executing the portlet object replacing within the portlet object the tag with the code associated with the tag from the tag and responsive to executing the code displaying the visual identifier specified by the code proximate to the artifact with which the tag was associated within the view generated by the portlet object. The visual identifier can signify availability of an annotation service corresponding to the replaced. The method further can include invoking the annotation service represented by the visual identifier by executing the handler associated with the tag as specified by the inserted code responsive to a selection of the visual identifier to create an annotation associated with the artifact.

Yet another embodiment of the present invention can include a computer readable storage device being programmed to cause a computer to perform the various steps described herein.

The present invention provides a flexible annotation service within the context of a portal based application. The present invention provides a general annotation service through which annotations can be associated with various artifacts whether data graphical user interface GUI elements or various combinations thereof that are presented within a portal environment. In accordance with the inventive arrangements disclosed herein annotations of varying types can be developed and included within portlet objects. The annotation type can be determined largely based upon the particular programmatic action or function that an annotation is to perform whether serving as a vehicle for adding commentary to an object attaching files or documents to an object sending an electronic mail or other communication or the like. The annotation service disclosed herein further provides an architecture for regulating access to annotations and or the functions associated therewith according to user identities.

The portal environment provides a simple unified access point i.e. a portal through which a variety of functions can be accessed. Although the term portal can be used in reference to Web based applications this need not be the case. The portal environment can refer to an application that provides content and or functionality aggregation regardless of whether the Web or markup language s are used. The portal environment can provide some degree of personalization user sign on as well as host the presentation layer of an information system.

The portal environment can be configured to provide annotation services for creating deleting modifying and administering annotations. The annotations once created can be stored within the annotation database . Each annotation can be formed of a collection of one or more attributes. These attributes can include but are not limited to a subject a type a reference and a sharing type. It should be appreciated that while annotations can be associated with attributes attributes also can be associated with annotation services. For example an annotation service can be configured to create annotations having one or more predetermined attributes as will be discussed herein in greater detail. Further annotations and or annotation services can be selectively made available based upon user access privileges time and or other attributes.

The subject of an annotation uniquely identifies the particular object with which the annotation is associated or to which the annotation pertains. Annotations can be associated with artifacts presented within GUI of the portal environment . As used herein an artifact can be a data object from the application data that is presented within the GUI or a control element that is part of GUI for example as provided by a portlet. Thus the subject can be an identifier that uniquely identifies the subject of the annotation i.e. the artifact. In one embodiment the subject can be a primary key indicating the location of the associated data object from within a data store i.e. the application data . In another embodiment the subject can be a universal resource identifier URI a URL or path which specifies the subject of the annotation.

The annotation type can be a character string which can be used to classify the annotation. In general the annotation type indicates the purpose or functionality of the annotation. While one or more standard annotation types can be provided in the portal environment additional custom or user specified annotation types can be defined. Any of a variety of different annotation types can be defined. Examples of annotation types can include but are not limited to note for defining supplemental information comment or feedback for purposes of review or critique link for specifying a link to a Web page portal or portlet document for specifying a particular document keyword for adding one or more keywords to an object hint for specifying how to use or access a particular feature etc.

Additional types can be defined with more specific meaning such as IM Transcript indicating that an instant messaging IM transcript is associated with the annotation Audio for indicating that an audio file is associated with the annotation send by email for sending an artifact as an electronic mail attachment etc. In any case each annotation type can be defined as a string which signifies the particular function or purpose of the annotation. Each annotation type can be associated with its own handling logic in particular a selected handler . A specific handler can be selected according to annotation type or annotation service type as the case may be. Notwithstanding it should be appreciated that any one annotation can be associated with its own specific handler if so desired thereby overriding a global type handler assignment within the portal environment .

The annotation reference can be an identifier which uniquely specifies the software object that contains the substance of the annotation. That is the annotation reference can be a path URL URI primary key of a database etc. which specifies a software object such as a text file audio file image or the like. If for example the annotation is a note the annotation reference can specify the file which includes the text of the note.

The sharing type can indicate how a particular annotation is to be shared within the portal environment among users. Annotations can be classified as private public or role based. A private annotation is only available to the user that created the annotation. By comparison a public annotation is available to all users of the portal environment . A role based annotation is available to any person that has been associated with a particular role i.e. managerial legal engineer or the like. It should be appreciated that in the case of a private annotation type the sharing type can indicate the identify of the person that created the annotation such that privacy can be enforced with the portal environment with respect to annotations. Accordingly the sharing type provides various categories of access control starting with the most coarse public level to an intermediate level role based and continuing to the most detailed private level.

While the annotations can include the aforementioned attributes this listing is not intended to be exhaustive. Other attributes also can be included as part of an annotation within the annotation database . For example a time sensitive expiration value can be assigned to an annotation or annotation service. The time sensitive attribute can indicate a date time or both when the annotation or annotation service is to expire. When the expiration time and or date is reached the annotation or annotation service can be deleted or otherwise made unavailable to users. This allows time sensitive annotations to be created and automatically removed when such annotations are no longer relevant within the portal environment .

For example expirations can be used in conjunction with annotation types specific to a particular project or for annotations relating to user qualifications or skill sets for which the user must undergo periodic training. Project specific annotations can be configured to expire upon an anticipated completion date of the project. Annotations relating to user skill sets can be set to expire at some future time when it is expected that the user will require a refresher course or other form of continuing education.

In another embodiment a time based attribute can indicate when a particular annotation or annotation service is to become active or made available. Thus when an annotation service is not relevant such services can be hidden or made unavailable until an appropriate time as indicated by the time sensitive attribute.

In yet another embodiment an annotation attribute can indicate that an annotation is to be created only one time by a given user and is not to be altered or changed subsequent to the creation of the annotation. Such an attribute can be used for example in the case where an annotation service is used in the context of polling users or rating content. In illustration after a user completes an online course a time based attribute can indicate that an annotation service through which the user rates the course can become active. Prior to the designated time or date or the completion of the online course the annotation service would be unavailable to the user. In any case once the user uses the annotation service to rate the online course an attribute which indicates that the annotation service is to be used only one time by a given user can cause the annotation service to be made unavailable to the user and can protect the annotation itself from subsequent editing.

The portlets are applications which can be accessed from within the portal environment . In general each portlet can serve as a reusable component which can execute within the container . In illustration one portlet can provide a function such as document searching another can provide for user login and or security and another can serve as an electronic mail client. Each portlet can be considered a complete application which can follow a standard model view controller design. Each portlet further can have multiple states and view modes as well as event and messaging capabilities.

The container provides a runtime environment in which the portlets can be instantiated executed and destroyed. The container further can provide the infrastructure or access to the infrastructure needed by portlets for execution. Accordingly the portlets can rely on the infrastructure provided by the container to access data elements within application data participate in window and action events communicate with other portlets lookup credentials store persistent data access annotations within the annotation database call handlers and the like.

The themes skins database can include a plurality of different themes and skins. Generally a theme is a software construct which defines appearance information for a portlet or portal as the case may be. For instance a theme can specify the fonts colors spacing and other visual elements to be used when presenting a given portlet . A theme can be configured as cascading style sheets Java Server Pages JSP files images and the like. A skin can define the decorations and controls that may be placed around a portlet . For example a skin can define items such as title bars borders shadows and the like.

The tag library can include one or more tags which serve as placeholders or references to annotation functions. In one embodiment the tags can be JSP tags. In any case the tag library can include one or more tags and associated code which implements at least in part the annotation services described herein. Each tag can be included or inserted within a portlet object. As used herein a portlet object can refer to a portlet a theme a skin or another component and or element of a portal. When a portlet object having a tag is executed or rendered code associated with the tag is inserted into the portlet object in place of the tag. This code provides the annotation functionality to be described in greater detail.

As noted because tags can be included within the portlet objects tags can be associated with any artifacts displayed by a portlet or as part of a portlet . This allows annotations to be associated with for example a GUI element such as a button text box menu or the like items of data from the application data that are presented by a portlet or combinations thereof.

When executed a portlet can be executed and visually rendered within GUI . While a given portlet can occupy the entire space of GUI it also is possible to present a plurality of portlets within GUI concurrently. Accordingly GUI depicts a visual rendering of a portlet after execution. The portlet presents a listing of contact information taken from application data . In this case one or more tags have been included in portlet objects rendered in GUI to provide for various annotation services to be performed in relation to the displayed artifacts.

The code which is associated with a given tag in the tag library can specify a particular visual identifier or icon which can be presented within a rendered portlet to signify that an annotation service is available for the artifact that is proximate to or associated with the visual identifier. The code further can specify a particular handler which can be called upon selection of the visual identifier. The handlers implement the programmatic actions that are performed when a visual identifier for an annotation service is selected.

In accordance with the present invention when portlet objects are developed for use within the portal environment one or more tags can be included therein. While developers can include the tags manually i.e. by directly coding the tags as part of the source code of the portlet object in another embodiment of the present invention the API can be used. API provides developers with a less formal way of including annotation service functionality within portlet objects. The API can be used for example by developers desiring a more visual interface for including annotation functionality within a portlet object. The API also facilitates the creation of custom tags within the system by facilitating the development of appropriate handlers .

As shown with reference to GUI each contact has been associated with a visual identifier and . Visual identifiers are associated with one particular annotation service while visual identifiers are associated with another annotation service. As noted the existence of an identifier within a portal GUI can indicate the availability of a particular annotation function or service in relation to an artifact. The appearance of the visual identifier further can indicate the type of annotation service that is available. The artifact or subject for which the annotation service is available is located next to or proximate to the visual identifier. In this case each contact serves as the subject and has been associated with visual identifiers and indicating that two annotation services are available for each contact.

The appearance of the visual identifiers and can provide further information beyond that described above. In one aspect the appearance of an identifier can be changed to indicate whether an annotation has been created and associated with the subject. The appearance of the identifier further can be changed to provide additional information related to any of the attributes of an annotation that has been created as well as an annotation service that is available such as annotation type reference sharing type and the like.

Visual identifier for example corresponding to John Doe can indicate the availability of an annotation service for adding private comments that will be associated with contact information stored in the application data for John Doe. The contact information for John Doe will be identified as the subject for such an annotation. The sharing type for annotations created through this service will be private . As noted private annotations are only available to and or viewable by the user that created the annotation. Thus when a user logs onto the portal environment and accesses the contact list as shown the user can add a private comment to John Doe by selecting the identifier which corresponds to John Doe.

In this case a user referred to as User A has added a comment indicating that John is difficult to work with . The private comment will only be available to User A the user that created the private comment. Once entered the appearance of the identifier can be changed to indicate to User A that a private comment now exists for John Doe. The appearance of the identifier for John Doe can be contrasted with the identifier for Jane Doe which indicates that User A has created no private comment for Jane Doe. Still as noted the presence of identifier proximate to Jane Doe indicates that a private comment annotation service is available.

Because the comment for John Doe is private another user i.e. User B logging onto the portal environment will be presented with identifiers which indicate only whether User B created a private comment for any given contact. User B would be unaware of the existence of the private comment entered by User A and be unable to see the private comment of User A which states that John is difficult to work with .

When identifier is selected for John Doe the handler that is associated with the selected identifier and annotation service is called. The handler can perform a programmatic action such as launching a text editor or the like through which text or other commentary can be specified. The text can be saved as a file. The resulting annotation can include a subject that specifies John Doe or references the profile information for John Doe within the application data an annotation type of comment a reference to the file including the comments and a sharing type of private. As noted the sharing type further can specify the particular user that created the private comment to prevent other users from viewing or otherwise accessing the private comment.

Identifiers for example can correspond to an annotation function which creates public comments for the contacts. As noted public comments can be made available to all users. The existence of identifiers indicates the availability of the annotation service for each contact which has been associated or is located next to one of the identifiers . The appearance of identifiers further can be changed to indicate whether a public comment has been created for a contact. In this case a public comment has been created for Jane Doe which is reflected by the appearance of identifier which corresponds with her.

Selection of identifier after creation of the annotation recalls the annotation which indicates that Jane is great . More particularly selection of identifier cause an appropriate handler to be called which determines that an annotation exists for Jane Doe and the selected identifier . Accordingly the handler can access the annotation from the annotation database and launch a viewer and or editor allowing the public comments associated with Jane Doe to be viewed. Because the comment is public other users can add further information to the comment.

Accordingly in step a developer if so desired can access the portal environment API and create one or more new annotation services. In doing so the developer can define a new tag to be included within the tag library and the corresponding code that is inserted into a portlet object in place of the tag when the object is executed or rendered. An appropriate handler for the tag also can be created if necessary.

In step an annotation service can be added to a portlet object. More particularly while developing a portlet object a tag whether default or custom from the tag library can be included within the portlet object. To include a tag the API can be used or the tag s can be coded directly into a portlet object in a manual fashion. After one or more annotation services are specified for various portlet objects within the portlet environment users can begin using the portal and accessing any annotation services associated with rendered portlets.

In step a user can log into the portal environment. In step the user is identified within the portal environment along with any access privileges associated with that user. Accordingly in step one or more portlets can be executed. The appropriate portlets accessed by the user through the portal can be executed within the container environment. In step as part of the portlet execution process each tag included within the various portlet objects being executed in the container environment can be replaced with the associated code specified by the tag library.

In step the portal environment GUI can be rendered. The code inserted into the portlet objects in place of the tags specifies any visual identifiers to be presented for accessing available annotation services along with the particular location of such identifiers within the GUI. That is in addition to determining whether annotation services exist for particular artifacts the annotation database can be consulted to determine whether annotations have been created for artifacts of the GUI whether private or public. The visual identifiers can be presented within the GUI and can be located proximate to each artifact for which the corresponding annotation service is made available or for which an annotation has been created. The artifacts as noted will become the subject of any annotation created by selecting the associated identifier. This allows annotation services to be associated with data GUI elements of the portlets or any combination thereof.

If private annotations have been created for a displayed artifact by the identified user the existence of those annotations can be indicated through an appropriate identifier i.e. the appearance of the identifier. It should be appropriate that only those annotations that are accessible for a given user are indicated. Thus any private annotations created by the identified user can be illustrated by an appropriate visual identifier while private annotations for other users are not indicated and are not accessible. Further in the case where one or more annotations include expiration information only those annotations that have not expired whether private or public are indicated through an appropriate visual identifier.

In step a user can select an identifier for an annotation service that is displayed within the portal GUI. Once selected the handler associated with the selected visual identifier can be called in step . The code that is inserted into the portlet object in place of the tag can identify and call the appropriate handler. The handler as noted can include the logic and functions necessary for implementing the annotation service represented by the visual identifier. In step a determination can be made as to whether an annotation has been created for the selected visual identifier. If so the handler can determine that the user wishes to edit the existing annotation and proceed to step . If no annotation has been created the handler can determine that the user wishes to create a new annotation in which case the method can proceed to step .

Continuing with step in the case where an annotation does exist the handler can access the annotation database and locate the annotation associated with the selected visual identifier. In step the handler can present the annotation data within an appropriate editor thereby allowing the user to alter or modify the annotation data. Thus if the annotation was a comment or a note the text of the comment or note can be presented within a suitable text editor so that the user can edit the text and save the modified annotation. The modified annotation then can be saved to the annotation database.

In step in the case where no annotation has been created for the selected visual identifier the handler can perform a programmatic action to collect the annotation data. For example the handler can execute an appropriate application such as a text editor thereby allowing the user to enter annotation data. The text editor can receive annotation data such as links corresponding to URLs file locations etc as well as comments notes keyword s and the like. In another embodiment the handler can launch a form editor which allows the user to enter data for a particular form. The form can be designed to collect any of a variety of data suited to the annotation function or type. In any case once the annotation data is entered by the user the handler stores the annotation which includes an annotation subject type reference and access type. The annotation data i.e. the comment note or the like which is specified by the annotation reference is stored as well. Because the identifier is intended to add a particular type of annotation is associated with a particular artifact subject and has a defined sharing type these attributes can be determined automatically.

In step the handler can perform any of a variety of different programmatic actions. Since the handler is selected according to the type of the annotation and or service the handler can be programmed to perform a desired programmatic action based upon the type of the annotation service that was accessed or the type of annotation that was accessed or created. In illustration in the case where the annotation specifies a rating for content the annotation type can be rating . In this case once the user has entered the appropriate rating information and the annotation is created the handler can update the rating of the content. More particularly the handler can be programmed to incorporate the rating supplied by the newly created annotation into the overall rating for the content. Thus if an online course or document was the subject of the user s rating that rating can be added to the ratings from other users which correspond to the same document or online course. The handler can update the overall rating for the content in a database for example. The updated rating can be made available to other systems such as a document or course library.

Though programmatic actions can be performed automatically in the context of an annotation service as described above in another embodiment such actions can be selected by a user. It may be the case for example that several different actions are available such as sending an IM sending an electronic mail compressing the annotation data searching annotation data launching a workflow executing a Web service or the like. If so the user can be presented with a menu specifying the programmatic actions that are available for the annotation service that was executed. The user then can select one or more actions to be performed.

The present invention is not limited by the particular type of processing which can be performed. As noted such processing can occur prior to the annotation being stored after the annotation is stored or created or when the data for an annotation is retrieved. For example prior to storing an annotation the data can be compressed if so desired. The example pertaining to updating ratings for content can be applied after the annotation is stored or created.

As noted the type of visual identifier shown can indicate the type of annotation service that is invoked when the visual identifier is selected. That is a note annotation service can be represented by one sort of visual identifier while a keyword annotation service can be associated with a different annotation service. In another embodiment however selection of a visual identifier can cause a menu to be presented which allows the user to select a particular type of annotation to be associated with the selected visual identifier and corresponding artifact.

As shown the menu option for adding a public note has been selected. The selection of a menu option can cause a particular handler to be called. In this case the handler can launch a text editor which can receive user supplied text i.e. the note content. The note text is saved as a file that is referenced by the annotation created in the annotation database. Once created the note can be accessed by selecting either visual identifier or an additional visual identifier not shown which can be included in the portlet and associated with artifact . In another embodiment the menu can include an option for editing an existing annotation and or deleting an existing annotation.

In any case once the annotation is created it can be stored within the annotation database for future reference and or use. Subsequently if a user were to conduct a search of within the help files or instructions included with the portal environment annotations relating to GUI objects also could be searched or otherwise made available as part of the application help. Thus users could view and search public help comments or notes pertaining to GUI elements or functions. Searching in this manner further can be limited to searching particular types of annotations such as helpful hints or the like. Further only annotations which have not yet expired would be available for searching.

Subsequently when searching within the portal environment the content referenced by the annotations i.e. the keywords comments and other supplemental information entered using an annotation service can be searched just as conventional application data can be searched. Thus in reference to contact information can be searched to locate any contacts that conform with specified search criteria. The annotation service can determine the annotations stored in the annotation data store that correspond to the contacts.

The content referenced by the annotations i.e. the notes comments and or keywords for example can be searched to determine whether any of the annotations correspond to the search criteria. Searching further can be limited and or filtered according to annotation type. This allows one to search only keywords for example for the existence of a particular keyword. If one were to search the contacts for the phrase programming language 1 in an effort to find a person having such expertise the portal environment would locate the annotation illustrated in and return John Doe as a contact.

The present invention provides a general annotation framework for use within a portal environment. The examples and illustrations disclosed herein have been provided for purposes of illustration only and as such are not intended to limit the scope of the present invention. It should be appreciated that different annotation types and corresponding programmatic actions can be defined. For example an annotation service can be defined which sends data objects or annotation information relating to a GUI element as an attachment to or as the body portion of an electronic mail message or instant message. In any case the present invention allows annotations to be associated with data objects as well as GUI elements provides annotations of varying type and further provides for a measure of access control over annotations.

The present invention can be realized in hardware software or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also can be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program software application and or other variants of these terms in the present context mean any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

