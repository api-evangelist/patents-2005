---

title: Alteration of execution of a program in response to an execution-optimization information
abstract: Embodiments include a device, and a method. In an embodiment, a device includes an information store operable to save an execution-optimization information, a first processor, and a hardware circuit. The hardware circuit includes a hardware circuit for altering an execution of a program by the first processor in response to the execution-optimization information. The execution-optimization information created by a hardware device utilizing data collected from a second processor and corresponding to a previous runtime execution by the second processor of at least a portion of the program that was transparent to any software executing on the second processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402257&OS=08402257&RS=08402257
owner: The Invention Science Fund I, PLLC
number: 08402257
owner_city: Bellevue
owner_country: US
publication_date: 20051130
---
1. For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled PROCESSOR RESOURCE MANAGEMENT naming Bran Ferren W. Daniel Hillis Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 214 449 filed Aug. 29 2005.

2. For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled MULTIPROCESSOR RESOURCE OPTIMIZATION naming Bran Ferren W. Daniel Hillis Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 214 458 filed Aug. 29 2005.

3. For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled PREDICTIVE PROCESSOR RESOURCE MANAGEMENT naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 214 459 filed Aug. 29 2005.

4. For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled HARDWARE GENERATED AND HISTORICALLY BASED EXECUTION OPTIMIZATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 292 323 filed Nov. 30 2005.

5. For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled RUNTIME BASED OPTIMIZATION PROFILE naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 292 207 filed Nov. 30 2005.

6. For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled FETCH REROUTING IN RESPONSE TO AN EXECUTION BASED OPTIMIZATION PROFILE naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 291 503 filed Nov. 30 2005.

The present application is related to claims the earliest available effective filing date s from e.g. claims earliest available priority dates for other than provisional patent applications claims benefits under 35 USC 119 e for provisional patent applications and incorporates by reference in its entirety all subject matter of the following listed application s the Related Applications to the extent such subject matter is not inconsistent herewith the present application also claims the earliest available effective filing date s from and also incorporates by reference in its entirety all subject matter of any and all parent grandparent great grandparent etc. applications of the Related Application s to the extent such subject matter is not inconsistent herewith.

The United States Patent Office USPTO has published a notice to the effect that the USPTO s computer programs require that patent applicants reference both a serial number and indicate whether an application is a continuation or continuation in part. Stephen G. Kunin USPTO Electronic Official Gazette Mar. 18 2003 at http www.uspto.gov web offices com sol og 2003 week11 patbene.htm. The present applicant entity has provided a specific reference to the application s from which priority is being claimed as recited by statute. Applicant entity understands that the statute is unambiguous in its specific reference language and does not require either a serial number or any characterization such as continuation or continuation in part. Notwithstanding the foregoing applicant entity understands that the USPTO s computer programs have certain data entry requirements and hence applicant entity is designating the present application as a continuation in part of its parent applications but expressly points out that such designations are not to be construed in any way as any type of commentary and or admission as to whether or not the present application contains any new matter in addition to the matter of its parent application s .

An embodiment provides a device. The device includes a processor operable to execute an instruction set a communications link exposed to an execution optimization synthesizer and to the processor and the execution optimization synthesizer. The execution optimization synthesizer includes an execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set and generate an execution optimization information utilizing the collected data from the communications link and corresponding to the execution of at least one instruction of the instruction set. In addition to the foregoing other device embodiments are described in the claims drawings and text form a part of the present application.

Another embodiment provides a method. The method includes collecting data corresponding to an execution of at least one instruction of an instruction set from a processor executing the at least one instruction of an instruction set. The method also includes creating an execution optimization information utilizing the collected data corresponding to the execution of at least one instruction of the instruction set and which is usable in another execution of the at least one instruction of an instruction set. In addition to the foregoing other method embodiments are described in the claims drawings and text form a part of the present application.

A further embodiment provides a device. The device includes a first circuit for collecting data corresponding to a runtime execution of at least one instruction of an instruction set from a communications link that is transparent to software and exposed to a processor having a processor instruction set that includes the instruction set. The device also includes a second circuit for creating an execution optimization information utilizing the collected data corresponding to the execution of at least one instruction of the instruction set and which is usable in another execution of the at least one instruction of an instruction set. The circuit for creating the execution optimization information may include the circuit for collecting data corresponding to an execution. In addition to the foregoing other device embodiments are described in the claims drawings and text form a part of the present application.

An embodiment provides a device. The device includes a microengine operatively coupled with a processor having an instruction set. The microengine includes a microengine operable gather data in a manner transparent to software executing on the processor and corresponding to a runtime execution of at least a portion of the instruction set by the processor. The microengine is also operable to create a runtime based optimization profile utilizing the gathered dynamic data and which is useable in a subsequent execution of the at least a portion of the instruction set by the processor. The device may include the processor having an instruction set. The device may include a communications link exposed to the microengine. The device may include a communications link exposed to the microengine and transparent to software executing on the processor. The device may include a communications link operably coupled to the microengine and to the processor. In addition to the foregoing other device embodiments are described in the claims drawings and text form a part of the present application.

Another embodiment provides a method implemented in a hardware device. The method includes gathering data corresponding to an execution of at least one instruction of an instruction set by a processor and in a manner transparent to software executing on the processor. The method also includes creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one instruction of the instruction set by the processor. The method may include saving the execution based optimization profile. The method may include saving the execution based optimization profile in an association with the at least one instruction of the instruction set. In addition to the foregoing other method embodiments are described in the claims drawings and text form a part of the present application.

A further embodiment provides a device. The device includes means for gathering data in a manner transparent to software executing on a processor and corresponding to an execution of at least one machine instruction of an instruction set by the processor. The device also includes means for creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one machine instruction of the instruction set by the processor. In addition to the foregoing other device embodiments are described in the claims drawings and text form a part of the present application.

An embodiment provides a device. The device includes an information store operable to save an execution optimization information a first processor and a hardware circuit. The hardware circuit includes a hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information. The execution optimization information being created by a hardware device utilizing data collected from a second processor and corresponding to a previous runtime execution by the second processor of at least a portion of the program that was transparent to any software executing on the second processor. The first processor and the hardware circuit may be formed on a single chip. In addition to the foregoing other device embodiments are described in the claims drawings and text form a part of the present application.

Another embodiment provides a method. The method includes identifying an instruction to be fetched for execution by a first processor and altering an execution of the instruction to be fetched for execution in response to an execution optimization information. The execution optimization information previously generated by a hardware device utilizing data corresponding to a real execution of the instruction to be fetched by a second processor that was transparent to software executing on the second processor. In addition to the foregoing other method embodiments are described in the claims drawings and text form a part of the present application.

A further embodiment provides a device. The device includes means for identifying an instruction to be fetched from an instruction set of a program for execution by a first processor. The device also includes means for altering an execution of the instruction from the instruction set of a program in response to an execution optimization information. The execution optimization information having been generated by a hardware device utilizing data generated by a second processor and which data corresponds to a previous real execution the instruction to be fetched from the instruction set of a program that was transparent to software executing on the second processor. In addition to the foregoing other device embodiments are described in the claims drawings and text form a part of the present application.

An embodiment provides a device. The device includes a processor operable to execute an instruction set and an execution optimization circuit. The execution circuit includes an execution circuit for receiving an identification of a first instruction to be fetched from the instruction set for execution by the processor and for pointing to a second instruction of the instruction set of the processor to be fetched for execution by the processor if indicated by an execution based optimization profile. The execution based optimization profile being previously derived by a hardware device utilizing data invisible to software and generated during a runtime execution of at least a portion of the instruction set. The execution optimization circuit may include at least one of a microengine a micro programmed circuit and or a hardwired circuit. In addition to the foregoing other method embodiments are described in the claims drawings and text form a part of the present application.

Another embodiment provides a method transparent to software executing on a processor. The method including fetching a second instruction for execution by the processor if indicated by an execution based optimization profile in response to an identification of a first instruction to be fetched for execution by a processor. The execution based optimization profile previously derived by a hardware device utilizing data invisible to software and generated during a runtime execution of at least a portion of the instruction set. The method may include identifying the first instruction to be fetched for execution by the processor.

A further embodiment provides a device. The device includes means for selecting a first instruction to be fetched from an instruction set of a static program for execution by a processor. The device also includes means for routing the fetch of the first instruction to a second instruction of the instruction set of a static program if indicated by an execution based optimization profile. The execution based optimization profile having been derived from data invisible to software and generated during a historical execution of the static program.

The foregoing is a summary and thus by necessity contains simplifications generalizations and omissions of detail. Consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the devices and or processes described herein as defined by the claims will become apparent by reference to the drawings and the following detailed description.

In the following detailed description of exemplary embodiments reference is made to the accompanying drawings which form a part hereof. In the several figures like referenced numerals identify like elements. The detailed description and the drawings illustrate exemplary embodiments. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented here. The following detailed description is therefore not to be taken in a limiting sense and the scope of the claimed subject matter is defined by the appended claims.

The computing system environment typically includes a variety of computer readable media products. Computer readable media may include any media that can be accessed by the computing device and include both volatile and nonvolatile media removable and non removable media. By way of example and not of limitation computer readable media may include computer storage media and communications media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computing device . Communications media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communications media include wired media such as a wired network and a direct wired connection and wireless media such as acoustic RF optical and infrared media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computing device such as during start up is typically stored in ROM . RAM typically contains data and program modules that are immediately accessible to or presently being operated on by processing unit . By way of example and not limitation illustrates an operating system application programs other program modules and program data . Often the operating system offers services to applications programs by way of one or more application programming interfaces APIs not shown . Because the operating system incorporates these services developers of applications programs need not redevelop code to use the services. Examples of APIs provided by operating systems such as Microsoft s WINDOWS are well known in the art.

The computing device may also include other removable non removable volatile nonvolatile computer storage media products. By way of example only illustrates a non removable non volatile memory interface hard disk interface that reads from and writes to non removable non volatile magnetic media a magnetic disk drive that reads from and writes to a removable non volatile magnetic disk and an optical disk drive that reads from and writes to a removable non volatile optical disk such as a CD ROM. Other removable nonremovable volatile non volatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards DVDs digital video tape solid state RAM and solid state ROM. The hard disk drive is typically connected to the system bus through a non removable memory interface such as the interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable non volatile memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computing device . In for example hard disk drive is illustrated as storing an operating system application programs other program modules and program data . Note that these components can either be the same as or different from the operating system application programs other program modules and program data . The operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computing device through input devices such as a microphone keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish and scanner. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computing system environment may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computing device although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks such as a personal area network PAN not shown . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computing system environment is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computing device typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or via another appropriate mechanism. In a networked environment program modules depicted relative to the computing device or portions thereof may be stored in a remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on computer storage medium . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows certain embodiments may be described with reference to acts and symbolic representations of operations that are performed by one or more computing devices such as the computing device of . As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures in which data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while an embodiment is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that the acts and operations described hereinafter may also be implemented in hardware.

Embodiments may be implemented with numerous other general purpose or special purpose computing devices and computing system environments or configurations. Examples of well known computing systems environments and configurations that may be suitable for use with an embodiment include but are not limited to personal computers handheld or laptop devices personal digital assistants multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network minicomputers server computers game server computers web server computers mainframe computers and distributed computing environments that include any of the above systems or devices.

Embodiments may be described in a general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. An embodiment may also be practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The processor includes a processor operable to execute an instruction set. In an embodiment the instruction set may include a collection of instructions that the processor can execute. In a further embodiment the instruction set may include an instruction set architecture of the processor. In another embodiment the instruction set may include a group of machine instructions and or computer instructions that the processor can execute. In another embodiment the instruction set may be interpreted by the processor. In further embodiment the instruction set may include a high level language an assembly language and or a machine code that the processor can execute with or without a compiling and or a translation. In an embodiment an instruction of the instruction set may include a functional instruction a branching instruction a memory instruction and or other instruction that may be executed by a processor. In another embodiment an instruction of the instruction set may include a statement or a portion of a statement in a program. In a further embodiment an instruction group includes at least two statements from a program. A program may include any type of a program from several lines of instructions to an application and to an operating system. In an embodiment an instruction of the instruction set may include a decoded instruction a translated instruction a portion of a translated instruction and or a micro operation. In a further embodiment an instruction of the instruction set may include an instruction block a basic block a functional block and or an instruction module of the instruction set.

The execution optimization synthesizer includes an execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set. In an embodiment the data may include certain data items such as datum byte bit and or a block that are associated together. The execution optimization synthesizer is also operable to generate an execution optimization information utilizing the collected data from the communications link and corresponding to the execution of at least one instruction of the instruction set.

In an embodiment the communications link may include at least one of a signal bearing medium digital signal bearing medium a light propagation medium a light propagation medium an optical fiber a light guide a computer readable storage medium a hardware register a bus a memory local to the processor an interconnection structure and or a digital signal conductor. For example a computer readable storage medium may include a memory and or a memory system directly accessible by the processor and the execution optimization synthesizer. By way of further example a digital signal conductor may include any digital signal conducting structure configured to at least transfer digital signals from the processor to the execution optimization synthesizer. In another embodiment the communications link includes a signal bearing medium exposed only to an execution optimization synthesizer and the processor. In a further embodiment the communications link includes a signal bearing medium exposed to an execution optimization synthesizer and the processor and transparent to software executing on the processor. In another embodiment the communications link includes a signal bearing medium exposed to an execution optimization synthesizer to the processor and to software.

In an embodiment the processor and the communications link reside on a single chip illustrated as a single chip . In another embodiment the processor and the execution optimization synthesizer reside on a single chip also illustrated as the single chip . In a further embodiment the processor communications link and the execution optimization synthesizer are formed on a single chip illustrated as the single chip .

In an embodiment the execution optimization synthesizer includes a hardware implemented execution optimization synthesizer. In another embodiment the execution optimization synthesizer includes a microengine implemented execution optimization synthesizer.

In a further embodiment the execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to collect dynamic data from the communications link that corresponds to a runtime execution of at least one instruction of the instruction set. In an embodiment the data collected by the execution optimization synthesizer includes at least one of an interpreted instruction of the instruction set a translated instruction of the instruction set a decoded instruction of the instruction set a micro operation corresponding to at least a portion of the at least one instruction of the instruction set data correlating to the execution of the at least one instruction of the instruction set a movement of data correlating to an execution of the at least one instruction of the instruction set a result of an execution of the at least one instruction of the instruction set a branch outcome of an execution of the at least one instruction of the instruction set an exception correlating to an execution of the at least one instruction of the instruction set a store to load dependency correlating an execution of the at least one instruction of the instruction set a predicted value correlating to an execution of the at least one instruction of the instruction set and or a relationship between at least two instructions of the instruction set.

In an embodiment the execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to collect at least one of data transparent to a user data visible to a user data transparent to software executing on the processor data visible to software executing on the processor and or data exposed for user manipulation.

In another embodiment the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data includes an execution optimization synthesizer operable to generate an optimization information that is at least one of responsive to the collected data derived from the collected data associated with the collected data and or using the collected data. In a further embodiment the execution optimization synthesizer operable to generate an execution optimization information corresponding to the execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to generate at least one of an execution environment optimization information a processor environment optimization information a data environment optimization information and or a metadata reporting an execution environment. For example an execution environment optimization information may include an indication that an identified micro op is used frequently and may be advantageously saved in a memory close to the processor . Another execution environment optimization may include one or more versions of the at least one instruction of the instruction set that provides some expected benefit over the original at least one instruction of the instruction set. A memory management system serving the processor may cause one of the versions to be executed transparently instead of the original at least one instruction of the instruction set such as through a translation lookaside buffer. By way of further example metadata reporting an execution environment may include tracking information with respect to data objects. For example certain access predictors may work well with certain data objects or some objects do not appear to be co resident in the cache or may be highly co resident or certain pointers in object orientated systems typically point to specific object types or specific value predictors have worked well with some data in the past.

In other embodiments the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data may include optimizing data handling which may be by a data class. In some instances a data class may include certain data items datum byte bit a block a page that are used once and never again. In other instances a data class may include certain data items are used constantly but never written and or infrequently written. In further data classes certain data items may be constantly read and written to or other data items may be often being written but never read. The execution optimization synthesizer operable to generate an execution optimization information may predict how a data class will likely be used in the future and or saves the data items in a manner and or a location that substantially optimizes utilization of the data items by an instruction group and or storage of the data items by the computing device. Any suitable type of predictive algorithm providing meaningful results may be used including a predictive algorithm based on a Bayesian method and or a learning algorithm. The prediction may be written to a ghost page associated with a piece of data. A prediction may be straight forward if it is known that the data piece will never be written or read. Each data item will expose what its peculiar flavor is. This may be implemented down to the size of a single cache line or even below the cache line.

In further embodiments the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data may provide storage mobility for data items that are associated together in a substantial disequilibrium based upon a shared fate a shared nature an entanglement to a page and or line of similarly handled data. The data item may include one or more extra bits tag on end of a data item that may indicate its size nature written but never read read but never written read once in the life of the program used by at least two threads . In a further embodiment an indicator may say which code relates with to the data item. This may be used for doing storage assignment. For example if the data item includes a semaphore that is used across multiple threads that should be known and the data item managed accordingly. Most data is associated with a particular body of code and assigned to a storage unit together. By watching that these assignments can be done together between the I cache and the D cache.

In an embodiment the execution optimization synthesizer further includes an execution optimization synthesizer operable to save the optimization information. The optimization information may be saved close to the processor for example in an on chip resource such as the cache A or in the off chip resource such as a system memory or storage medium. In another embodiment the execution optimization synthesizer further includes an execution optimization synthesizer operable to save the optimization information in an association with the at least one instruction of the instruction set.

In an embodiment the device includes a computing device such as for example the computing device of the computing system environment of . In a further embodiment the computing device includes at least one of desktop computing device a laptop computing device a portable computing device and or a supercomputing device.

The execution optimization information generated by the execution optimization synthesizer may be associated with the at least one instruction of the instruction set of a program an application and or a module that includes the at least one instruction. In the case of data the execution optimization information generated by the execution optimization synthesizer may be associated with data received for processing by the execution data produced by the execution the at least one instruction of the instruction set that processed the data and or other related matter. illustrates certain embodiments of an association of the execution optimization information with the at least one instruction of the instruction set. The ghost pages that include the execution optimization information pertaining to the operating system may be virtually and or physically associated in an information storage with the operating system. The information storage may include a non volatile memory structure. For example the ghost pages may be saved in the same file as the operating system. When the operating system is loaded into system memory the ghost pages may remain in the information storage or may be such as for example also loaded into system memory or loaded into an inboard memory. In another embodiment an execution optimization information pertaining to a data set is associated in a information storage with the data set. In a further embodiment an execution optimization profile is associated in an information storage with an application .

In an embodiment a ghost page of the ghost pages containing the execution optimization information may be associated with a selected page of a program or data whose content corresponds to the generation of the execution optimization information such as for example a selected page containing the instruction of the operating system a selected page containing the data of the data set and or a selected page containing the application program . By way of further example data in a ghost page of the ghost pages may indicate that a branch instruction on an identified line of an associated selected page of an application should not be taken. In another embodiment a file containing the execution optimization information may be associated with a file containing the data set.

The illustrated embodiments of the ghost page the execution optimization information and the execution optimization profile respectively associated with the operating system the data and the application are intended only to be illustrative and are not limiting. In another embodiment for example the ghost pages may be associated with the application or the data set .

The microengine includes a microengine operable to gather data in a manner transparent to software executing on the processor and corresponding to a runtime execution of at least a portion of the instruction set by the processor. The microengine is also operable to create a runtime based optimization profile utilizing the gathered dynamic data and which is useable in a subsequent execution of the at least of a portion of the instruction set by the processor.

In an embodiment the microengine may include a microengine operable to gather at least one of dynamic data and or static data in a manner transparent to software executing on the processor and corresponding to a runtime execution of at least a portion of the instruction set by the processor .

In another embodiment the device may further include the processor having an instruction set. In a further embodiment the processor and the microengine are formed on a chip illustrated as a single chip . In an embodiment the device may further include a communications link exposed to the microengine. In another embodiment the device may include the communications link exposed to the microengine and transparent to software executing on the processor. In a further embodiment the device may include the communications link operably coupled to the microengine and to the processor. In another embodiment the communications link may include an interconnection structure.

The modification operation may include at least one additional operation. The at least one additional operation may include an operation an operation and or an operation . The operation changes a movement of data with respect to the processor in response to the execution based optimization profile. For example changing a movement of data may include changing a movement of data toward and or away from the processor. For example frequently read data may be stored in a memory close to the processor and infrequently read data may be stored in a memory far from the processor. By way of further example frequently written or rewritten data may be stored in a memory close to the processor and infrequently read data may be stored in a memory far from the processor. The operation changes a format of data processable by the processor in response to the execution based optimization profile. For example the operation may save data translated from one format to another such as from big endian to little endian or floating point formats. The operation changes a movement of the at least one instruction of the instruction set toward a processor for execution in response to the execution based optimization profile.

In an alternative embodiment the means includes hardware implemented means for gathering data in a manner transparent to software executing on a processor and corresponding to an execution of at least one machine instruction of an instruction set by the processor. In another alternative embodiment the means may include at least one additional means. The at least one additional means may include hardware implemented means for creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one machine instruction of the instruction set by the processor. The at least one additional means may include software implemented means for creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one machine instruction of the instruction set by the processor.

In an embodiment the execution optimization information may include the execution optimization information generated by the execution optimization synthesizer of . In another embodiment the execution optimization information may include at least one of the ghost pages the execution optimization information and or the execution optimization profile described in conjunction with . In an alternative embodiment the first processor includes a first processor operable to execute an instruction set and operably coupled to the information store . In another embodiment the hardware circuit for altering an execution of a program includes a hardware circuit for altering an execution of a program and operably coupled to the information store. In a further embodiment the hardware circuit includes a hardware circuit operably coupled to the processor.

In an embodiment the hardware circuit includes a hardware circuit for copying the execution optimization information from the information store to a memory operably coupled to the first processor. For example the memory operably coupled to the first processor may include the hardware resource such as the on chip cache B or the off chip resource such as an off chip cache or an outboard memory or an outboard storage.

In a further embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for causing an alteration of an execution of at least one instruction of an instruction set of a static program by the first processor in response to the execution optimization information. In another embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering an execution of at least one instruction of an instruction set of a dynamic program by the first processor in response to the execution optimization information. In an embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering an execution of at least one instruction of an instruction set of a program by the first processor in response to the execution optimization information. In another embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering a movement of data with respect to the first processor in response to the execution optimization information. In a further embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering a movement of at least one instruction of the program toward the first processor in response to the execution optimization information.

In some instances the altering an execution of a program by the first processor in response to the execution optimization information may include directly altering an execution of a program by the first processor in response to the execution optimization information. In other instances the altering an execution of a program by the first processor in response to the execution optimization information may include causing an alteration of an execution of a program by the first processor in response to the execution optimization information. In further instances the altering an execution of a program by the first processor in response to the execution optimization information may include initiating an alteration of an execution of a program by the first processor in response to the execution optimization information.

In an embodiment the execution optimization information includes execution optimization information created by a hardware device not shown utilizing data collected from a second processor not shown that is at least substantially a same processor as the first processor . For example the execution optimization information used to alter a current execution of a program by the first processor may have been created during a prior execution of the program by the first processor. In another embodiment the execution optimization information includes an execution optimization information created by a hardware device utilizing data collected from a second processor that is at least a substantially different processor from the first processor. For example the execution optimization information used to alter a current execution of a program by the first processor may have been created during a prior execution of the program by a completely different second processor which may be a processor running in a completely different computing device.

In an embodiment the information store includes at least a portion of a cache. In another embodiment the information store includes at least one of an I cache or a D cache. In a further embodiment the information store includes at least one of a volatile memory or a non volatile memory. In a further embodiment the information store includes a computer readable medium. In another embodiment the information store may include a non volatile outboard storage such as magnetic disk storage.

In another embodiment the first processor and the hardware circuit are formed on a single chip illustrated as a single chip . In a further embodiment the first processor and the information store are formed on a single chip illustrated as a single chip .

In an embodiment the execution optimization circuit includes at least one of a microengine a micro programmed circuit and or a hardwired circuit. In another embodiment the execution optimization circuit includes an execution optimization portion of a control unit of the processor. In a further embodiment the processor and the execution optimization circuit are formed on a chip illustrated as the chip .

In an embodiment the execution optimization circuit includes an execution optimization circuit for receiving an identification of a first instruction to be fetched from the instruction set of a program for execution by the processor. The program may be a static program or a dynamic program. In another embodiment the execution optimization circuit includes an execution optimization circuit for pointing to a second instruction of the instruction set of the processor to be fetched for execution by the processor if indicated by an execution based optimization profile associated with the first instruction. In a further embodiment the execution optimization circuit includes an execution optimization circuit for pointing to a second instruction of the instruction set of the processor to be fetched for execution by the processor if indicated by an execution based optimization profile associated with another instruction of the instruction set. In an embodiment the execution based optimization profile includes the execution based optimization profile being previously derived by a hardware device utilizing data invisible to software and generated during a runtime execution of at least a portion of an instruction set of a static program.

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flow diagrams operation diagrams flowcharts illustrations and or examples. Insofar as such block diagrams operation diagrams flowcharts illustrations and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams operation diagrams flowcharts illustrations or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of a signal bearing media include but are not limited to the following recordable type media such as floppy disks hard disk drives CD ROMs digital tape and computer memory and transmission type media such as digital and analog communication links using TDM or IP based communication links e.g. packet links .

It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to inventions containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should typically be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should typically be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers typically means at least two recitations or two or more recitations . Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . In those instances where a convention analogous to at least one of A B or C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B or C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. .

The herein described aspects depict different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermedial components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality. Any two components capable of being so associated can also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically mateable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components.

While particular aspects of the present subject matter described herein have been shown and described it will be apparent to those skilled in the art that based upon the teachings herein changes and modifications may be made without departing from this subject matter described herein and its broader aspects and therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this subject matter described herein. Furthermore it is to be understood that the invention is defined by the appended claims.

