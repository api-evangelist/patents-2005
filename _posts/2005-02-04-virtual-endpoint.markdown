---

title: Virtual endpoint
abstract: A system or network may provide for communication between two or more applications. The communication is achieved by initiating communication between a first and second application. The communication is directed from the first application to a second virtual address of the second application. An actual address associated with the second application is determined. A first data channel is established between a first computer associated with the first application and a second computer associated with the second application over a control channel, to coordinate the communication over the first data channel. The communication is then directed to the actual address associated with the second application over the data channel. Further, the first data channel is taken down and a second data channel is established to maintain communication without the knowledge of the first and second applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797449&OS=07797449&RS=07797449
owner: Symantec Operating Corporation
number: 07797449
owner_city: Mountain View
owner_country: US
publication_date: 20050204
---
This application is a continuation of U.S. patent application Ser. No. 09 684 593 filed Oct. 5 2000 now U.S. Pat. No. 6 891 837 which claims priority to the following applications DYNAMIC SYMBOLIC LINK RESOLUTION Prov. No. 60 157 728 filed on Oct. 5 1999 SNAPSHOT VIRTUAL TEMPLATING Prov. No. 60 157 729 filed on Oct. 5 1999 SNAPSHOT RESTORE OF APPLICATION CHAINS AND APPLICATIONS Prov. No. 60 157 833 filed Oct. 5 1999 VIRTUAL RESOURCE ID MAPPING Prov. No. 60 157 727 filed on Oct. 5 1999 and VIRTUAL PORT MULTIPLEXING Prov. No. 60 157 834 filed on Oct. 5 1999. The above applications are incorporated herein by reference.

The present invention relates generally to resource management in a computer network. More specifically the present invention relates to a virtual endpoint or switching of data channels between a plurality of applications operating on a computer network.

In prior art computer network communications between applications is limited to the static attributes of the communications endpoint. When a communications endpoint is created it has implicit attributes associated with the type of endpoint created e.g. TCP UDP . In addition to the implicit attributes of the endpoint the application assigns other explicit attributes to the endpoint. For example if the endpoint is of type TCP socket the application assigns a local address to the endpoint by binding the socket to a local address. In addition the application assigns a remote address attribute to the endpoint by connecting the socket to a remote address. These attributes are associated with the endpoint until either the endpoint is destroyed or possibly until the client application changes the attributes of the endpoint.

The endpoint attributes both implicit and explicit are typically specified at the time the application is created at the time the application is run or at the time the endpoint gets created. However in a highly dynamic runtime environment the attributes initially assigned to the endpoint often are non optimal for the current operating system and or network state resulting in less efficient usage of system resources and or non optimal use of network communications. In the prior art applications attempting to be tuned to a dynamic environment have the logic embedded within the application to monitor the system network state and adjust its communications accordingly. However this is highly dependent on the running system environment and beyond the scope of most application.

To achieve the foregoing and in accordance with the purpose of the present invention a system or network is disclosed which provides for communication between two or more applications. The communication is achieve by initiating communication between a first and second application. The communication is directed from the first application to a second virtual address of the second application. An actual address associated with the second application is determined. A first data channel is established between a first computer associated with the first application and a second computer associated with the second application over a control channel to coordinate the communication over the first data channel. The communication is then directed to the actual address associated with the second application over the data channel. Further the first data channel is taken down and a second data channel is established to maintain communication without the knowledge of the first and second applications.

Among other aspects and innovations the invention provides structure system method method of operation computer program product and business model and method for providing virtual endpoints. Virtual endpoints virtualize the communication endpoints i.e. sockets an application uses for network communications. Virtual endpoints allow the network communications to become decoupled from the application allowing the underlying communication channels to be dynamically manipulated without the application s knowledge. The inventive virtual endpoints provide the ability to maintain communication between two or more applications or processes while allowing the data path or communication channel to be manipulated or changed without affecting the communication or corrupting the data. The present invention allows a data stream to be initially established between two or more applications on a first data channel and to allow the data stream to be shifted or rerouted to alternative data channels without affecting or losing data in the communication. Further the channel is changed or rerouted without the knowledge of the two or more communicating applications and without the assistance of the communicating applications. From the view point of the communicating applications the routing of the communication is unchanged. In one embodiment the present invention allows for the dynamic construction and deconstruction of network communication channels performed transparently to the applications communicating.

Another advantage provided by the virtual endpoints is that one or more of the applications or processes communicating can be shifted to alternate computers or servers while the communication between the two or more applications is unaffected. The present invention eliminates the necessity of operating applications or processes from a single machine in order to maintain communication and data connections with other applications or processes. The present inventive virtual endpoints further avoid the requirement of providing a direct communication path between computers applications or processes of prior art systems to maintain communication which restricting the applications and processes to be operated from a single machine. The present virtual endpoints enable a computer network computer processor microprocessor server and other computational systems to maintain communication and data connections between computers applications or processes without limiting an application to be operated from a single computer server or processor.

Where the prior art limits the operation of applications to a single computer in order to maintain communication and data connections with other applications the present novel virtual endpoint allows a computational system having two or more computers to shift applications between the plurality of computers while still maintaining the communication and data connections with other application to provide a computer network with the ability to optimize system resources. Further the present invention allows an endpoint to be set up initially with one set of attributes and then shifted dynamically to another set of attributes. For example an application can be communicating with a remote application using one of two interfaces interface A and interface B installed on the host. The local address of the endpoint is the address of the interface being used. Initially the data channel is set up to use one interface for example interface A. As a result the endpoints are using the address of interface A as the local address. Then interface A gets removed from the host. With prior art since interface A no longer existed the existing communication on endpoints with the local address of interface A would be terminated and the application would be disrupted. The present invention allows the open established communications channel to be switched to interface B for new and existing communications channels. Including changing the local address attribute of the endpoints. Similarly the other endpoint attributes can also be dynamically adjusted by reconstructing the data channel.

In one embodiment the method and system of the present invention is implemented in a computer readable medium such as a computer program and executed on a computer as illustrated in the high level block diagram of . As shown computer incorporates a processor utilizing in one embodiment a central processing unit CPU and supporting integrated circuitry. A memory which is any type or combination of memory including fast semiconductor memory e.g. RAM NVRAM or ROM slower magnetic memory e.g. hard disk storage optical memory and any conventional memory known in the art to facilitate storage of the computer program and the operating system software. In one embodiment also included in computer are interface devices including but not limited to keyboard pointing device and monitor which allow a user to interact with computer . Mass storage devices such as disk drive and CD ROM may also be included in computer to provide storage of information. Computer may communicate with other computers and or networks via modem and telephone line to allow for remote operation or to utilize files stored at different locations. Other media may also be used in place of modem and telephone line such as a direct connection high speed data line or a wireless connection and the like. In one embodiment the components described above may be operatively connected by a communications bus . In one embodiment the components may be operatively connected by wireless communication.

In one embodiment the virtual addresses associated with an endpoint are specified by the application for example where an application binds to a well known address. In one embodiment a virtual address is dynamically allocated by the VEM for example where no local address binding is performed by the application. In the case of dynamic allocation the VEM assigns a unique virtual address address port pair the first time a local address is required. For example if no bind is performed by the application the VEM assigns a local virtual address before a connect is performed on the socket such as a TCP socket or before data is sent to a socket such as a UDP socket.

In one embodiment because there is no entry in the virtual endpoint translation table an address translation process step is performed on the remote virtual IP address by a translation module to determine the actual address of the host where the first application resides. In one embodiment the translation module is implemented external to the system . The translation process step returns the actual IP address of the host where the first application is running. In one embodiment the translation module includes an address lookup table and provides the correlations between the virtual addresses and actual addresses. The second VEM uses this actual IP address in conjunction with a previously established static port number to determine the address of VEM .

Still referring to the second VEM then communicates with the first VEM associated with the first application and establish a communication path through a data channel for allowing the communication between the first and second applications step . In one embodiment the communication between the second VEM and the first VEM is through a control channel . The control channel is any communication channel which is designated as a control channel for at least the communication between the VEMs to coordinate the construction and deconstruction of data channels. In one embodiment the first VEM will communicate back to the second VEM establishing the communication between first and second applications across the data channel . The first and second VEMs then connect the data channel between protocol modules . The protocol modules can be substantially any protocol implementation providing data channel communication including TCP layers UDP layers and other protocol modules step .

Still referring to once the data channel is established the first VEM associates the first application endpoint or socket with the newly established data channel . In one embodiment the first application endpoint is established by pointing the file descriptor associated with the endpoint to the new data channel . In one embodiment the first VEM associates the data channel with the application socket or endpoint related with the first application step through a first socket module . The first socket module associates the new data channel with the existing socket endpoint in one embodiment by pointing the file descriptor associated with the endpoint to the new data channel . The socket module can be substantially any networking socket implementation and the data structures associated with implementation. First VEM further stores or records the communication channel mapping between the first and second applications and in the first virtual endpoint translation table step . In one embodiment the information stored in the virtual endpoint translation table includes the virtual addresses of the communication applications for example first and second applications virtual addresses 10.10.1.2 9000 and 10.10.1.1 1234 the associated endpoint or socket as well as the actual addresses utilized for routing the communication over data channel for example 10.10.1.2 7000 and 10.10.1.1 6521. In one embodiment the virtual address translation table also includes a status of the communication path between the first and second applications which designates the channel as active or up and deactivated or down. The second VEM associates the second application endpoint or socket with the newly established data channel in one embodiment by pointing the file descriptor associated with the endpoints to the new data channel . In one embodiment second VEM associates the data channel with an application socket related with the second application step through a second socket module . The second VEM also records the communication channel mapping in the second virtual endpoint translation table step . Once the data channel is established the first VEM establishes a connection with the first application step allowing data communication to proceed.

The data channel is substantially any transport layer data communication service allowing communication between at least two applications or computers including connection oriented protocol connectionless protocol and other communication protocols.

In one embodiment the VEMs transparently manipulates the data channels without the knowledge of the communicating applications. When a new data channel is constructed the VEMs transparently hook the data channel into the endpoint of the running application for example the second application . Since the network connections are routed through the VEMs rather than directly to the applications the applications are not notified when a data channel has been closed. The VEM dynamically sets up a data channel between two applications and directs the data over the data channel.

In the embodiment depicted in the second application attempts to send data to the first application step which signals the second VEM to reconstruct the communication path between the second application and the first application . The second VEM signals the virtual endpoint translation table to determine if the applications have an established and active data channel step . If the data channel is no longer established an entry will no longer exist in the virtual endpoint translation table. As such an address translation process step is performed on the virtual IP address by a translation module to determine the actual address of the host where the first application resides. The virtual endpoint translation table returns a status down signal notifying the second VEM that the data channel is inactive step . The second VEM communicates with the first VEM over the control channel to establish a data channel step . The first and second VEMs will then connect the data channel between protocol module step . One advantage of the present invention is that the reconstruction of the data channel does not require the use of the same data channel as was originally used to establish the communication path. The present invention allows any one of a plurality of data channels to be utilized in constructing and reconstructing the data channel . The first and second VEMs and signal the first and second socket module and respectively to associate the data channel with the allocated sockets steps and respectively . The first and second VEMs and further signal an update to the first and second virtual endpoint translation tables to update the status from down to up steps and respectively . Once the data channel is connected the first application receives the communication from the second application step .

One advantage of the present invention is the VEM system allows a data channel to be taken down to free up resources allowing other applications to utilize the freed resources. Additionally when the first and second applications and attempt to transmit data again the present invention allows the original or a new data channel connection to be established allowing the communication to again take place. The destruction and reconstruction of the data channel has no effect on the data being transferred. Further the applications have no knowledge that the data channel was taken down or reestablished. In one embodiment the deconstruction of a data channel occurs when a first application is shutdown or moved to an alternative computer and the reconstruction of the data communication over a new data channel is provided between the first application and the second application now operating from a new computer.

By maintaining the communication paths between two or more applications the present virtual endpoints in one embodiment permit a computer system having two or more computers to take down halt or snapshot an application which can then be revived on the initial computer or a different computer of the system. Permitting an initial application to be halted allows a computer system to free up computational resources for an alternative application. For example a first application running on a first computer can be halted and stored to a memory when the first application is not actively interacting with a second application. Once the first application is stored the first computer can remove the first application and can initiate a third application. When the second application attempts to communicate with the first application the first application can be reactivated on an alternative second computer without interfering with the data connection between the first and second applications.

One example of the ability to halt or snapshot an application along with all its accompanying states and data is described in co pending U.S. patent application Ser. No. 09 684 373 entitled Snapshot Virtual Templating filed on Oct. 5 2000 incorporated herein by reference. One example of the ability to reinitialize an application along with all its accompanying states and data is described in co pending U.S. patent application Ser. No. 09 680 847 entitled Snapshot Restore of Application Chains and Applications filed on Oct. 5 2000 incorporated herein by reference.

The present invention provides snapshot virtual templating by creating virtual application templates for the purpose of propagating a single application snapshot into multiple distinct images. Snapshot virtual templates allow multiple application instances to use the same fixed resource identifier by making the resource identifier virtual privatizing it and dynamically mapping it to a unique system resource identifier. When a snapshot is cloned from a virtual template the common or shared data is used exactly as is whereas the non sharable data is either copied on write multiplexed virtualized or customized on duplication. The present invention greatly reduces the required administrative setup per application instance. Snapshot virtual templating works by noting access to modified resources fixed system IDs keys and unique process related identifies and automatically inserting a level of abstraction between these resources and the application. The resources contained in a snapshot virtual template can be dynamically redirected at restore time. Access to memory and storage is managed in a copy on write fashion. System resource handles are managed in a virtualize on allocate fashion or by a multiplex on access mechanism. Process unique resources are managed in a redirect on duplicate fashion. Rules may be defined through an application configurator that allows some degree of control over the creation of non sharable data.

The present invention provides snapshot restoring by saving all process state memory and dependencies related to a software application to a snapshot image. Interprocess communication IPC mechanisms such as shared memory and semaphores must be preserved in the snapshot image as well. IPC mechanisms include any resource that is shared between two process or any communication mechanism or channel that allow two processes to communicate or interoperate is a form of IPC. Sockets shared memory semaphores and pipes are some examples of IPC mechanisms. Between snapshots memory deltas are flushed to the snapshot image so that only the modified pages need be updated. Software modules that track usage of resources and their corresponding handles are included as part of the snapshot restore framework of the present invention. At snapshot time state is saved by querying the operating system kernel the application snapshot restore framework components and the process management subsystem that allows applications to retrieve internal process specific information not available through existing system calls. At restore time the reverse sequence of steps for the snapshot procedure is followed and state is restored by making requests to the kernel the application snapshot restore framework and the process management subsystem.

Referring to initially as is described above the data channel is established between the first application operating on the first computer and the second application operating on the second computer as shown in . As described above in relation to the data channel is taken down between first and second applications and the second application is halted or snapshotted. Referring to which shows one example of one embodiment where the data channel between the first computer and the second computer has been taken down and the second application is reestablished on the third computer . In this embodiment the data channel is reconstructed between the first computer and third computer as described above in relation to . The virtual endpoint translation tables for the first and third computers are updated to include the virtual addresses and to show the status of the data channel as active. The present invention allows the data channel to be reconstructed without the knowledge of the first or second applications and further to be reconstructed between different computers without altering or affecting the data and without the knowledge of the applications .

The examples provided by shows one embodiment where the virtual addresses used by the second application does not correspond to an actual addresses of the node or computer where the applications resides. For example the second application is initially operated from the second computer see which has an IP address of 10.10.1.2. However the virtual address of the second application is using the virtual IP address 10.10.1.7. When the second application is moved to the third computer see which has a virtual IP address of 10.10.1.3 the virtual address for the second application remains 10.10.1.7.

In the embodiments shown in A and B each application is operated within a computer having a VEM respectively. However in alternative embodiments the present invention provides virtual endpoints for applications operating on computers without VEMs. shows a simplified block diagram of one embodiment of the present invention where a first application operating on a first computer is attempting to communicate with a second application operating on a second computer . In this embodiment first computer does not include a VEM. The present invention allows the first application to use virtual endpoints by utilizing alternative VEMs on the system to provide the virtualization. In one embodiment the first computer is coupled with a gateway . The gateway transparently provides first computer and first application with access to the VEM system and the virtualization of the local and remote addresses. The gateway includes a gateway VEM which receives the data communication from the first application and generates the data channel between the first application and the second application .

In one embodiment any calls to get the local or remote address e.g. getsockname getpeername get intercepted by the VEM. The VEM returns the virtual addresses associated with the application s endpoint.

In one embodiment two applications are capable of communication utilizing the virtual endpoints of the present invention through a single VEM. The single VEM provides the transparent construction destruction and reconstruction of a data channel to provide the communication between the two applications. shows a simplified block diagram of one implementation of one embodiment of the present virtual endpoint system where a single VEM provides the virtual endpoints for the plurality of communicating applications. The VEM establishes the data channel as described above without the need to coordinate the data channel with an additional VEM. Further the VEM maintains the virtual addresses of each application in the virtual endpoint translation table and associates the data channel with the application sockets as described above. In one embodiment the single VEM providing virtualization of both application addresses is implemented where first application and second application reside on the same computer.

Having disclosed exemplary embodiments and the best mode modifications and variations may be made to the disclosed embodiments while remaining within the scope of the present invention as defined by the following claims.

