---

title: Method and apparatus for providing improved HMM POS tagger for multi-word entries and factoids
abstract: A method of calculating trigram path probabilities for an input string of text containing a multi-word-entry (MWE) or a factoid includes tokenizing the input string to create a plurality of parse leaf units (PLUs). A PosColumn is constructed for each word, MWE, factoid and character in the input string of text which has a unique first (Ft) and last (Lt) token pair. TrigramColumns are constructed which define corresponding TrigramNodes each representing a trigram for three PosColumns. Forward and backward trigram path probabilities are calculated for each separate TrigramNode. The sums of all trigram path probabilities through each PLU are then calculated as a function of the forward and backward trigram path probabilities. Systems and computer-readable medium configured to implement the methods are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07124074&OS=07124074&RS=07124074
owner: Microsoft Corporation
number: 07124074
owner_city: Redmond
owner_country: US
publication_date: 20050614
---
The present application is a continuation of and claims priority of U.S. patent application Ser. No. 09 907 315 filed Jul. 17 2001 now U.S. Pat. No. 6 985 851 the content of which is hereby incoporated by reference in its entirety.

The present invention relates to natural language processing. More particularly the present invention relates to the field of parsing natural human language.

In processing natural languages such as English Hebrew and Japanese a parser is typically used in the analysis of sentences. A parser determines for a sentence the roles the words play and the interdependencies between those words. A first stage in parsing is breaking the input sentence into words and looking those words up in a lexicon to determine what parts of speech POS any word can have. For example the word brachiate can only be a verb the word sentence could be a verb or noun and still could be a noun verb adverb as well as other parts of speech. There are also individual words that when adjacent in a sentence act as a unit as a different part of speech. For example kind of is treated as an adverb in the sentence I kind of like her. But in the sentence It is a kind of cabbage the word kind is a noun and the word of is a preposition. Similar sets are sort of at least and on the other hand. These sets are called Multi Word Entries or MWEs. A parsing system can assign many different types of parts of speech.

In addition some parsers construct larger units from individual words before doing the syntactic parse. These larger units generally have internal structure that is not syntactic. For example street addresses time of day and proper names all have internal structure that must be dealt with outside of syntax. In the sentence David Parkinson visited 123 Elm Street at 11 30 AM the emphasized units David Parkinson 123 Elm Street and 11 30 AM can be treated as a larger unit by the grammar component which is responsible for syntax . These units are called factoids. However some sentences could have conflicting factoids. For example in the sentence After 1 second St. Augustine appeared there are two overlapping factoids 1 second St. which could be a street address and St. Augustine which could be a saint s name. Other sentences could have items in them that might be incorrectly identified as a factoid if the entire context of the sentence is not considered. For example in the Sentence After I saw Henry Nixon walked into the room we do not want Henry Nixon as a factoid.

The speed of a parser is dependent on how many different combinations of words it has to put together before it achieves a parse that spans the input sentence. There are many dead ends it could explore before finding the right way. For example if it considers a part of speech for a word that does not make sense by building larger structures using it then all that work is for naught. In a similar vein if it considered a MWE as a first when it shouldn t have or a factoid when the individual units are the correct one then the parsing of that sentence will be slow. In addition incorrect parses can be produced if the parser considers wrong parts of speech first. If an incorrect parse is generated before the correct one and the parser decides to stop looking for the correct one then an incorrect parse will be produced. The accuracy of factoid identification is also an issue. Confidence in whether a span is a factoid is done at two places in the system. When the factoid is constructed and when the parse completes.

A Hidden Markov Model HMM using trigrams is a standard technique to predict which part of speech for each word is the preferred one in a given sentence. However techniques for determining the parts of speech for MWE s and factoids are needed to improve parser performance. Also needed to improve parser performance are techniques to determine whether larger units such as MWE s and factoids should he considered first or whether their individual pieces should be considered first by the parser.

A method of calculating trigram path probabilities for an input string of text containing a multi word entry MWE or a factoid includes tokenizing the input string to create a plurality of parse leaf units PLUs . A PosColumn is constructed for each word MWE factoid and character in the input string of text which has a unique first Ft and last Lt token pair. TrigramColumns are constructed which define corresponding TrigramNodes each representing a trigram for three PosColumns. Forward and backward trigram path probabilities are calculated for each separate TrigramNode. The sums of all trigram path probabilities through each PLU are then calculated as a function of the forward and backward trigram path probabilities.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer .

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic FR infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Memory is implemented as non volatile electronic memory such as random access memory RAM with a battery back up module not shown such that information stored in memory is not lost when the general power to mobile device is shut down. A portion of memory is preferably allocated as addressable memory for program execution while another portion of memory is preferably used for storage such as to simulate storage on a disk drive.

Memory includes an operating system application programs as well as an object store . During operation processor from memory preferably executes operating system . Operating system in one preferred embodiment is a WINDOWS CE brand operating system commercially available from Microsoft Corporation. Operating system is preferably designed for mobile devices and implements database features that can be utilized by applications through a set of exposed application programming interfaces and methods. The objects in object store are maintained by applications and operating system at least partially in response to calls to the exposed application programming interfaces and methods.

Communication interface represents numerous devices and technologies that allow mobile device to send and receive information. The devices include wired and wireless modems satellite receivers and broadcast tuners to name a few. Mobile device can also be directly connected to a computer to exchange data therewith. In such cases communication interface can be an infrared transceiver or a serial or parallel communication connection all of which are capable of transmitting streaming information.

Input output components include a variety of input devices such as a touch sensitive screen buttons rollers and a microphone as well as a variety of output devices including an audio generator a vibrating device and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition other input output devices may be attached to or found with mobile device within the scope of the present invention.

System can be considered to be a trigram path probability calculating system for calculating trigram path probabilities for an input string of text containing a multi word entry MWE or a factoid. System includes a tokenizer a PosColumn generator a TrigramColumn generator a Trigram Graph generator a trigram path probability calculator and a normalizer . Not all of the components illustrated in are required and the functions provided by one or more components can be further separated into more components or combined into fewer components. A more detailed discussion of the system shown in is provided after the following discussion of methods of the present invention provided with reference to .

Referring back for the moment to the sub step of assigning token numbers for the input string of text is shown at block . As shown at blocks and the step of tokenizing the input string of text also includes the sub steps of identifying multi word entries MWE s and Lactoids and assigning parts of speech respectively. In the example illustrated in the MWE sort of is identified. The parts of speech are assigned for each token as well as for MWEs and factoids corresponding to multiple tokens. For tokens identifying single words each token is assigned one or more parts of speech either by looking up the word in a lexicon and or by morphological processing. Through lexicon lookup or other methods multi word entries are also identified and assigned one or more parts of speech. Through lexicon lookup or by other methods such as context free grammars CFGs or augmented transition networks ATNs factoids are identified and assigned one or more parts of speech.

As shown in the word He token number is assigned the noun and pronoun parts of speech. The word sort token number is assigned the noun and verb parts of speech. The word of token number is assigned the preposition part of speech. The word likes token number is assigned the noun and verb parts of speech. The word her token number is assigned the pronoun and adjective parts of speech. The punctuation . token number is assigned the character part of speech. Finally the MWE sort of is assigned the adverb and adjective parts of speech.

A ParseLeafUnit PLU is defined as a word MWE or factoid in a particular part of speech. Each PLU is also identified by its first token number Ft and its last token number Lt . For PLUs that consist of a single token then Ft is equal to Lt. For MWEs and factoids Ft is less than Lt. The Ft Lt token pairs for each PLU in the example sentence are shown in with demonstrating the Ft Lt token pair for the MWE sort of . Every PLU has a calculated probability PosProb which will correspond to the relative likelihood that the various parts of speech for a word will be the one used in the preferred parse for the input string.

Referring back to the flow diagram of the method next includes the step of adding dummy tokens for the input string. This is shown at block in . Dummy tokens are defined as tokens assigned to positions immediately prior to or after the first and last words MWEs factoids or characters of an input string. Two dummy tokens are added to the beginning of the tokens for the text string. The two dummy tokens are assigned a part of speech referred to in this example as the BEGIN part of speech. The first dummy token is assigned the token number and the second dummy token is assigned the token number .

Two dummy tokens are also added to the end of the tokens for the text string. These two dummy tokens are assigned a part of speech referred to in this example as the END part of speech. These dummy tokens are given the token numbers n 1 and n 2 where n is the number of tokens in the sentence. In the example sentence shown in these two END dummy tokens would have token numbers and .

Next a PosColumn is constructed for each Ft Lt token pair. A PosColumn consists of all PLUs that have the same Ft Lt. An example of a PosColumn is shown in for the Ft Lt pair corresponding to the word He . In one embodiment the PosColumn data for a particular Ft Lt pair includes the Ft Lt pair the PLUs associated with the Ft Lt pair i.e. the word MWE or factoid from the input string of text and its one or more assigned parts of speech and the probability PosProb PP for each of the different parts of speech. In two PLUs are included in the PosColumn for the Ft Lt pair . The first PLU corresponds to the noun part of speech assigned to the word He while the second PLU corresponds to the pronoun part of speech assigned to the same word.

Next an array referred to herein as the PosColumnArray is formed. This is an array of all PosColumns for each Ft Lt token pair in the string including dummy tokens . In essence the PosColumnArray is a 2D array of PLUs. illustrates the PosColumnArray for the input string He sort of likes her. Note that the PosColumnArray also includes PosColumns for Ft Lt pairs corresponding to dummy tokens and . Each PosColumn in the PosColumnArray can be identified by a unique identifier PCO through PC in the illustrated example 

Referring back to the flow diagram of the method further includes the step illustrated at block of constructing TrigramColumns. In constructing the TrigramColumns it is useful to understand that a PosColumn having the token pair Ft Lt is to the immediate right of another PosColumn having the token pair Ft Lt if Ft Lt 1. The PosColumn having the token pair Ft Lt is to the immediate left of the PosColumn having the token pair Ft Lt if Lt 1 Ft. A neighbor to a PosColumn is therefore all PosColumns on the left having an Lt value which is one less than the Ft value of the PosColumn and all PosColumns on the right having an Ft value which is one greater than the Lt value of the PosColumn. Therefore in PosColumns such as PosColumn PC will have multiple neighbors to the right i.e. PC and PC . Similarly PosColumns such as PC will have multiple neighbors to the left i.e. PC and PC .

A TrigramColumn is a set of 3 PosColumns for example PosColumns PC PC PC from where PC is an immediate neighbor to the left of PC and PC is an immediate neighbor to the left of PC. To enumerate all TrigramColumns for each PosColumn in the PosColumnArray determine all its immediate neighbors to its left and right. List all permutations of left neighbors and right neighbors. So if there were 3 neighbors to the left and 2 to the right of a particular PosColumn there would be 6 total TrigramColumns having the particular PosColumn in the middle.

For TrigramColumn PC PC PC where PC has x PLUs PC has y PLUs and PC has z PLUs we can form x y z trigrams. Every combination of tokens in PC PC and PC produces a trigram. illustrates the PosColumn number set for each of the eleven TrigramColumns designated TC through TC derived from the PosColumnArray shown in .

Referring back to the flow diagram of after creation of the TrigramColumns a Trigram Graph is created in the step shown at block . A Trigram Graph is shown in . The Trigram Graph consists of TrigramColumns represented in by TrigramColumn numbers TC TC and an associated TrigramArray which is an array of TrigramNodes. A Trigram node is shown in and a TrigramArray TrigramArray TC is shown in for TrigramColumn TC.

The Trigram Graph is ordered left to right in increasing order of the Ft or Lt of its first PosColumn. Each TrigramNode represents a trigram that can be created from the three PosColumns in the corresponding TrigramColumn. From above For TrigramColumn PC PC PC where PC has x PLUs PC has y PLUs and PC has z PLUs there will be x y z TrigramNodes. A TrigramNode contains four probabilities 

With reference to the probability Prob defined above in a Trigram model the probability of each token is conditioned on the two previous tokens. So the probability of token T n following tokens T n 1 and T n 2 is P T n T n 1 T n 2 which is calculated from the training corpus.

Referring back to the flow diagram of the method further includes the step illustrated at block . In this step for each TrigramColumn all TrigramColumns to its left and all TrigramColumns to its right are found. The left and right neighboring TrigramColumns for each TrigramColumn shown in are illustrated in . Generically a TrigramColumn TCI PCA PCB PCC is said to be to the left of a second TrigramColumn TCJ PCX PCY PCZ if PCB PCX and PCC PCY. A TrigramColumn TCI PCA PCB PCC is said to the right of a TrigramColumn TCJ PCX PCY PCZ if PCY PCA and PCZ PCB.

The trigram paths from the left and the right are independent. Therefore to find the sum of all paths through a trigram node one can find a the sum of all trigram paths from the left in the forward computation and b the sum of all trigram paths from the right in the backward computation . Then multiply the sums found in a and b with the probability of that trigram. This is actually used in the standard HMM training algorithm and it is what makes this algorithm linear instead of exponential.

Next as shown at block in the forward probability tr.leftprob is computed for each trigram node. This can be done using the following algorithm which is also illustrated in the flow diagram of . Other algorithms can also be used.

For each TrigramColumn TCJ i.e. 1 J 11 in the example in the TrigramGraph from left to right in increasing order of Ft or Lt of its first PosColumn identify all neighbor TrigramColumns to the right. This is shown in block of . For purposes of illustration the right neighbor TrigramColumn for TCJ is referred to here as TCK where K is another of TC TC .

Next as shown at block TrigramNodes Tr in the TrigramArray of TrigramColumn TCJ are identified. Since steps which follow are performed for each of these TrigramNodes in the TrigramArray of TrigramColumn TCJ a current or next of these TrigramNodes is referred to here as TrA for purposes of illustration of the following steps. TrigramNode TrA consists of tokens of the form t t t where t t t represent a set of three token numbers.

Next as shown in the step illustrated at block to continue the trigram path trigrams consisting of a set of tokens t t tx are identified. Token tx represents a token number not found in TrigramNode TrA while token numbers t and t represent tokens found in both TrigrmNode TrA and in the trigrams identified as continuing the path.

Then as illustrated at block for each TrigramNode TrB having tokens of the form t t tx the forward propagation of the path probabilities is computed as follows leftleft.left Where 

These calculations are repeated for each TrigramNode TrB having tokens of the form t t tx . Then as shown at block the process repeats for the next TrigramNode in the TrigramArray corresponding to TrigramColumn TCJ. As shown at block the process is also carried out for all right neighbors of TrigramColumn TCJ. Blocks and illustrate that the process is also repeated for each of the other TrigramColumns.

As shown at block in the backward probability tr.rightprob is computed for each trigram node. This can be done using the following algorithm which is similar to the one used for forward probability computation. This algorithm is also illustrated in the flow diagram of . Other algorithms can also be used for backward probability computation.

For each TrigramColumn TCJ i.e. 1 J 11 in the example in the TrigramGraph from right to left in decreasing order of Ft or Lt of its first PosColumn identify all neighbor TrigramColumns to the left. This is shown in block of . For purposes of illustration the left neighbor TrigramColumn for TCJ is referred to here as TCK where K is another of TC TC .

Next as shown at block TrigramNodes Tr in the TrigramArray of TrigramColumn TCJ are identified. Since steps which follow are performed for each of these TrigramNodes in the TrigramArray of TrigramColumn TCJ a current or next of these TrigramNodes is referred to here as TrA for purposes of illustration of the following steps. TrigramNode TrA consists of tokens of the form t t t where t t t represent a set of three token numbers.

Next as shown in the step illustrated at block to continue the trigram path trigrams consisting of a set of tokens tx t t are identified. Token tx represents a token number not found in TrigramNode TrA while token numbers t and t represent tokens found in both TrigrmNode TrA and in the trigrams identified as continuing the path.

Then as illustrated at block for each TrigramNode TrB having tokens of the form tx t t the forward propagation of the path probabilities is computed as follows rightrightright Where 

These calculations are repeated for each TrigramNode TrB having tokens of the form tx t t . Then as shown at block the process repeats for the next TrigramNode in the TrigramArray corresponding to TrigramColumn TCJ. As shown at block the process is also carried out for all left neighbors of TrigramColumn TCJ. Blocks and illustrate that the process is also carried out or repeated for each of the other TrigramColumns.

Referring again to at block it is shown that after the forward and backward propagation phases for each trigram the sum of all trigram paths through that trigram can be calculated. At the end of the backward propagation phase described above at each TrigramNode 

To get the sum of all trigram paths through that trigram these three probabilities are multiplied together at every node. This can be seen for example in which illustrates the eight nodes of TrigramColumn TC and the four nodes of TrigramColumn TC from the previously illustrated example. In the path probability PP of each node is shown to be the result of multiplying Tr.leftProb i.e. forward probability FP from Tr.rightProb i.e. backward probability BP from and Tr.prob i.e. Prob from of that node. This gives the sum of all paths through that trigram for every trigram.

Then the sum of trigram paths through each PLU is calculated. This can also be seen diagrammatically in where the sum of all PP s for all trigram paths through the pronoun PLU of PC and the sum of all PP s for all trigram paths through the adjective PLU of PC are calculated. Since each trigram consists of three PLUs the result can be written into one of them e.g. the third token t .

For each TrigramNode Tr pos pos pos 3.3.leftright Each pos represents a word mwe factoid in a particular part of speech. Therefore pos.PosProb represents that probability. This probability is not absolute it is only relative to other pos s i.e. relative to the same word mwe factoid in different parts of speech. Re normalize the PosProbs in Each PosColumn

At this point each PLU has the sum of the probabilities of all trigram paths that pass through that PLU stored in the PosProb parameter. Their scores give their relative probability assignments. At this point the PosProbs for each PosColumn are normalized as illustrated at block of . illustrates the normalization for PosColumn PC. Generally the PosProbs for each PosColumn can be normalized to sum to one.

For each PosColumn sum the PosProbs for each PLU calling the sum SUM. Then for each PLU set SUM. The relative probabilities of each PLU in a PosColumn are obtained using trigram estimation. First Alternative PosProb Normalization Step

In order to re normalize MWEs or factoids and their constituent PLUs one could just use the technique described above. However because larger units MWEs and factoids are in different PosColumns from their constituent PLUs they are not necessarily normalized against each other. For instance if each just had one part of speech then the PosProb for both the larger unit and its constituents would be 1.0 and no differentiation would have been achieved. In order to differentiate one must normalize each against the other. One alternative way to do this is to consider all PosColumns that contain a given token number and normalize them as a unit.

For each PosColumn that spans a given token number sum the PosProbs for each PLU calling the sum SUM. Then for each PLU set SUM.

This is illustrated by way of example in . In the example sentence in the PosColumnArray shown in both PosColumn PC sort and MWE PosColumn PC sort of share the token number . In a hypothetical example illustrated in the sum of the non normalized PosProbs for these two PosColumns i.e. 0.01 0.03 0.02 and 0.04 is equal to 0.1. Dividing each of these PosProbs by SUM i.e. by 0.1 gives the normalized PosProbs shown in .

One drawback with the first alternate step described above with reference to is that there are less transitions and therefore less multiplications by numbers less than zero in trigram paths through a MWE or factoid constituent than there are through the MWE or factoid. This is because there is a transition from say the first word of a MWE constituent to the second while the MWE is treated as a unit. This tends to cause the larger unit to be favored. To account for this one can normalize the PosProbs in a TrigramColumn containing a constituent of a larger unit MWE or factoid .

For example as shown in in which TrigramColumn TC is normalized for any TrigramColumn that has constituents of a larger unit in its first two columns set the trigram probability to 1. This will make sure that all trigram paths have the same number of trigram probabilities.

Let F be a mwe factoid that includes X Y and Z where X Y and Z are individual tokens i.e. F XYZ . A B are tokens that appear before X and C D appear after Z. Then for paths in which X Y and Z are independent tokens the probability calculation will be Prob calculation for all tokens before A P A B X P B X Y P X Y Z P Y Z C P Z C D Prob calculation after Y For paths through F the calculation is Prob calculation for all tokens before A P A B XYZ P B XYZ C P XYZ C D Prob calculation after Y Thus paths through a larger entity will be favored. To normalize this one could set probability of P X Y Z and P Y Z C to be 1. That way every path would have the same number of probabilities. Exemplary System

Referring back to an overview of system is provided in conjunction with the above description of the methods of the invention. The following discussion is for an exemplary system configured to implement the methods. However other system configurations can be used.

Tokenizer is configured to tokenize the input string of text to create parse leaf units PLUs . In various embodiments tokenizer tokenizes the input string of text by assigning a token number consecutively from left to right to each word and character in the input string of text. The tokenizer or another component also identifies MWEs and factoids in the input string of text and assigns parts of speech to each token MWE and factoid.

PosColumn generator is configured to construct a PosColumn for each word MWE factoid and character in the input string of text which has a unique first Ft and last Lt token pair associated therewith. This includes adding dummy tokens for positions immediately prior to the first word MWE factoid or character of the input string. It also includes adding dummy tokens for positions immediately after the last word MWE factoid or character of the input string. A Begin part of speech is assigned to dummy tokens for positions immediately prior to the first word MWE factoid or character of the input string. An End part of speech is assigned for positions immediately after the last word MWE factoid or character of the input string.

In constructing the PosColumn for each word character and dummy token the unique Ft and Lt token pair for that PosColumn has an Ft token number which is equal to the Lt token number. For each MWE and factoid the Ft token number is less than the Lt token number. In addition to the unique Ft and Lt token pair for each PLU in a particular PosColumn the PosColumn further includes the corresponding assigned part of speech and a path probability for the PLU.

TrigramColumn generator is configured to construct TrigramColumns corresponding to the input string of text. Each TrigramColumn defines a corresponding TrigramNode representing a trigram for three PosColumns in the TrigramColumn. Each TrigramNode is identifiable by a unique set of three tokens. TrigramColumn generator is also configured to determine for each TrigramColumn all neighboring TrigramColumns to the immediate left and to the immediate right.

Trigram Graph generator is configured to construct a Trigram Graph. The Trigram Graph includes with each of the constructed TrigramColumns an array of associated TrigramNodes. Each TrigramNode contains a probability of the corresponding trigram the forward probability of all forward paths through the TrigramNode the backward probability of all backward paths through the TrigramNode and the sum of all trigram path probabilities of all paths through the TrigramNode.

Trigram path probability calculator is configured to calculate the forward trigram path probability and the backward trigram path probability for each separate TrigramNode of each TrigramColumn. Calculator also calculates the sums of all trigram path probabilities through each PLU as a function of the calculated forward and backward trigram path probabilities.

The trigram path probability calculator is further configured to calculate the forward trigram path probability for each separate TrigramNode of each TrigramColumn by calculating the forward trigram path probability for each separate TrigramNode of each TrigramColumn of all forward paths from a TrigramNode in a right neighboring TrigramColumn through the separate TrigramNode. The trigram path probability calculator is similarly configured to calculate the backward trigram path probability for each separate TrigramNode of each TrigramColumn by calculating the backward path probability for each separate TrigramNode of each TrigramColumn of all backward paths from a TrigramNode in a left neighboring TrigramColumn through the separate TrigramNode.

The trigram path probability calculator is further configured to calculate for each TrigramNode the sum of all trigram path probabilities of all paths through the TrigramNode by multiplying the probability of the corresponding trigram the forward probability of all forward paths through the TrigramNode and the backward probability of all backward paths through the TrigramNode. Calculator calculates the sums of all trigram path probabilities through each PLU by adding the sums of all trigram path probabilities from each TrigramNode corresponding to a path through the PLU.

Normalizer is configured to normalize for each PLU the sums of all trigram path probabilities for the particular PLU.

Although the present invention has been described with reference to particular embodiments workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention. For example references to a string of text being stored or acted upon should be understood to include various representations such as parse trees of the string of text.

