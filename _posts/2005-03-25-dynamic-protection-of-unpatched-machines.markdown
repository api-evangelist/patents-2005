---

title: Dynamic protection of unpatched machines
abstract: A system and method for protecting a computer system connected to a communication network from a potential vulnerability. The system and method protects a computer system that is about to undergo or has just undergone a change in state that may result in placing the computer system at risk to viruses, and the like, over a communication network. The system and method first detect an imminent or recent change in state. A security component and a fixing component react to the detection of the change in state. The security component may raise the security level to block incoming network information, other than information from a secure or known location, or information requested by the computer system. The fixing component implements a fixing routine, such as installing missing updates or patches, and on successfully completing the fixing routine, the security level is relaxed or lowered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08359645&OS=08359645&RS=08359645
owner: Microsoft Corporation
number: 08359645
owner_city: Redmond
owner_country: US
publication_date: 20050325
---
The present invention relates to a computer system and to a computer implemented method for securing computer systems connected to a network from attacks.

As more and more computers and other computing devices are inter connected through various networks such as the Internet computer security has become increasingly more important particularly the prevention of attacks delivered over a network. As those skilled in the art will recognize these attacks come in many different forms including but not limited to computer viruses computer worms system component replacements denial of service even misuse and abuse of legitimate computer system features all of which exploit one or more computer system vulnerabilities for illegitimate purposes. While those skilled in the art will realize that the various computer attacks are technically distinct from one another for purposes of the present invention and for simplicity in description all of these attacks will be generally referred to hereafter as malware.

When a computer system is attacked or infected by malware the adverse results are varied including disabling system devices erasing or corrupting firmware applications or data files transmitting potentially sensitive data to another location on the network shutting down the computer system or causing the computer system to crash. Yet another pernicious aspect of malware is that an infected computer system is used to infect other computers.

Malware can also leverage a computer system s features in an attack. Thus operating system providers must now for economic and contractual reasons continually analyze their operating system functions to identify weaknesses or vulnerabilities that may be exploited through malware. For purposes of the present discussion any avenue by which malware may attack a computer system will be generally referred to as a computer system vulnerability or simply a vulnerability.

As vulnerabilities are identified and addressed in an operating system or other computer system components the provider will typically release a software update to remedy the vulnerability. The system provider will typically make available the necessary updates from an update server that is maintained by a trustworthy source. The update server such as update server is also communicatively connected to the network to which all other computer systems are connected. The updates frequently referred to as patches are meant to be installed on a computer system by the user in order to secure the computer system from the identified vulnerabilities. However these updates are in essence code changes to the components of the operating system device drivers or software applications. Because these updates are code changes the software updates require substantial in house testing prior to being released to the public.

Under the current system there is a period of time referred to hereafter as a vulnerability window that exists between when new malware is released on the network and when a computer system is updated to protect against it. As the name suggests it is during this vulnerability window that a computer system is vulnerable or at risk to becoming infected to the newest malware. are block diagrams of exemplary timelines and illustrating possible vulnerability windows.

In an operating system provider identifies the presence of a vulnerability in the released operating system at event . For example in one scenario the operating system provider performing its own internal analysis of a released operating system uncovers a previously unknown vulnerability that could be used to attack a computer system. In an alternative scenario the previously unknown vulnerability is discovered by third parties including organizations that perform system security analyses on computer systems and relays information regarding the vulnerability to the operating system provider.

Once the operating system provider is aware of the presence of the vulnerability the operating system provider addresses the vulnerability at event which leads to the creation and release of a patch to secure any computer systems running the vulnerable operating system. Typically an operating system provider will make some type of announcement that there is a system patch available along with a recommendation to all operating system users to install the patch. The patch is usually placed in a known location such as update server on the network shown in for downloading and installation onto vulnerable computer systems.

Unfortunately as happens all too often after the operating system provider releases the patch a malicious party downloads the patch and using some reverse engineering as well as any information made public by the operating system provider or others identifies the specifics regarding the fixed vulnerability in the operating system at event . Using this information the malicious party creates new malware to attack the underlying vulnerability. Alternatively an attacker develops an exploit for the vulnerability independently of examining the update or patch. At event the malicious party releases new malware onto the network. While the goal of issuing a software patch is to correct an underlying vulnerability the patch is often a complex piece of software code which itself unfortunately may create or contain a new vulnerability that could be attacked by malware created by a malicious party. Thus in addition to evaluating what the patch corrects the patch is also evaluated for potential vulnerabilities.

While a patch is available to computer system users the malicious party realizes that for various reasons including those described above not every vulnerable computer system will be immediately upgraded. Thus at event the release of malware opens a vulnerability window in which the vulnerable computer systems are susceptible to this malware. Only when the patch is finally installed on a computer system at event is the vulnerability window closed for that computer system.

Malware may also be released on the network that takes advantage of a previously unknown vulnerability in the operating system. illustrates a vulnerability window with regard to a timeline under this scenario. Thus as shown on timeline at event a malicious party releases new malware that takes advantage of a previously unknown vulnerability in the operating system. As this is new malware there is no operating system patch available to protect vulnerable computer systems from the attack. Correspondingly the vulnerability window is opened immediately after release of the malware.

At some point after the new malware is circulating on the network the operating system provider detects the new malware at event . As those skilled in the art will appreciate typically the presence of new malware on the network can be detected within a matter of hours by the operating system provider.

Once the latest malware is detected the operating system provider begins the process of analysis to determine whether the operating system must be patched to protect the computer system from the malware. As a result of this effort at event the operating system provider releases an update i.e. a software patch to the operating system that addresses the vulnerability. Subsequently at event the update is installed on a user s computer system thereby protecting the computer system and bringing the vulnerability window to a close.

Unfortunately many users may consider themselves free from ever being vulnerable to any one specific piece of malware once an update has been installed on the computer system. In reality however even after the user has updated the computer system with all possible available updates the computer system may become vulnerable once again to the same piece of malware that had at one time been rendered ineffective. In other words a previously closed vulnerability window may open at a future time.

Referring to a previously closed vulnerability window may be reopened at a future time on timeline whenever the computer system must revert for whatever reason to a computer system state corresponding to a time when the update is not installed on the computer system. In the normal course of events a computer system is patch non compliant at event on timeline and subsequently becomes patch compliant at event closing the vulnerability window as described above. However at a future time such as at event a computer system may find it necessary to return under scenario to a previous state and could possibly revert to a state prior to event but after event which corresponds to a time when the computer system is not updated thus reopening the previously closed vulnerability window and placing the computer system at risk to attacks from the specific malware which had at one time been rendered ineffective against the computer system. It is also possible that the computer system may revert under a different set of circumstances under scenario to a secure state after the vulnerability window has been closed or even before event which corresponds to a time when the computer system is updated as fully as possible. The indeterminate nature of state changes poses concerns for some users of a computer system.

As can be appreciated from the discussion above a vulnerability window can be reopened at a future time and any piece of malware circulating on a network still poses a security threat to a computer system even if the computer system was fully updated and patch compliant. The potential of placing the computer system at risk may be too great for a computer system user to accept since an infected computer may cost the computer s owner substantial amounts of money to disinfect and repair. This cost can be enormous when dealing with large corporations or entities that may have thousands or hundreds of thousands of computers connected to a network. Such a cost is further amplified by the possibility that tampering or destruction of customer data may ensue which may be extremely difficult or impossible to trace and remedy. What is needed is a system and method for securing a computer system against malware in a proactive manner when a computer system event is about to occur that could potentially expose the computer system to a vulnerability. These and other issues are addressed by the present invention.

The present invention is related to a computer system and to a method implemented on a computer system for dynamically protecting the computer system from attacks over a communication network.

One embodiment of the present invention includes a system for protecting a computer connected to a communication network from a potential vulnerability. The system may include a state change indicating component and or a state change discovery component that may set an indication and or discover when a computer system may undergo a state change. The system may include a security component interposed between a network and the computer system that raises the security level of the computer system on an indication of an imminent or recent state change. The system may include a fixing component that fixes any vulnerabilities that may result from a computer system state change. The system may return the security level to the normal level of protection upon successfully completing any routines to fix the vulnerabilities. The reason that the elevated level of protection is not a desired permanent state is that some desired functionality may become disabled as a result of the elevated protection level.

A second embodiment of the present invention includes a method for protecting a computer system connected to a communication network from a potential vulnerability regression. The method may include setting an indication of a computer system state change or having a means for discovering the state change. The method may include raising the security level of the computer system on detecting an indication of a state change or discovering the state change. Changing the state of the computer may occur from an operating system upgrade an application upgrade a new application installation a reinstallation of an application a system restore to a previous saved state or a system reboot. The method may include fixing any vulnerabilities that may have resulted from the change in state and then relaxing the security level to its previous setting on successfully completing a routine to fix any vulnerabilities. Alternatively successful completion may be determining the absence of any vulnerabilities.

The present invention provides a system and a method that proactively protects a computer system when a computer system is about to undergo a change in state that may result in placing the computer system at risk to attacks from viruses and the like over a communication network. In one embodiment before the computer system state is changed the security component of the computer system places the computer system in an isolated mode that may block all incoming network traffic except for communications from a secure location a known location or information requested by the computer system. When the computer system has concluded that it is no longer at risk or vulnerable the security level of the computer system may be lowered or relaxed to the normal or previous level that allows incoming network traffic through the security component. A computer system user or a computer system administrator may have control of the configuration of the security measures in both the isolated mode and the normal mode. In another embodiment after the system state is changed but before the computer resumes its normal operation the security component of the computer system places the computer system in the isolated mode.

It should be appreciated that the network may include any number of actual communication networks. These actual communication networks include but are not limited to the Internet wide and local area networks intranets cellular networks and the like. Accordingly while the present invention may be discussed in terms of a computer network and in particular the Internet it is for illustration purposes only and should not be construed as limiting upon the present invention.

Still referring to in addition to connecting to a plurality of computer systems and the network may also be connected to the update server . Although not intended to be limiting of the invention the update server is shown configured to communicate with the computer systems over the Internet . Alternatively the update server may be configured to communicate with any computer systems via an internal network that may be implemented as a local area network LAN wide area network WAN or even a direct communication link. In general the update server acts as a distribution point for software updates patches that are made available from an operating system provider anti virus software provider and the like. Also as is readily appreciated by those skilled in the art the update server allows a system administrator to customize how software updates will be installed on the computer systems. For example the update server may be configured to perform installations at predetermined periods of time thereby minimizing inconvenience to the computer system users. Additionally some types of software updates may be assigned a higher priority than other software updates. Consequently those updates assigned the highest priority are installed first. For example software updates for protection against known viruses may be assigned a higher priority level than updates for repair of vulnerabilities with no known viruses that exploit the vulnerability. Therefore when a software update becomes available the update server may suspend installation of a lower priority software update until installation of the higher priority software update is complete. The highest priority updates may be referred to generally as critical updates. The use of an update server such as update server communicatively connected to the Internet from which a computing system can communicate with and receive updates such as patches is described in the commonly assigned U.S. patent application Ser. No. 10 966 621 filed Oct. 14 2004 fully incorporated herein expressly by reference.

For illustration purposes is shown to include personal computer also communicatively connected to the Internet . Personal computer is representative of a malicious user who may release malware onto the Internet . The present invention prevents malware from infecting any one or more of the computer systems .

Still referring to each of the computer systems and may include a dynamic protection module in accordance with the present invention to prevent the computer system during state changes that may result in the reopening of a once closed vulnerability window. Personal computer includes dynamic protection module . Personal digital assistant includes dynamic protection module . Cellular phone includes dynamic protection module . Laptop computer includes dynamic protection module . Local area network includes dynamic protection module . It is to be understood by those skilled in the art that the dynamic protection module in accordance with the invention can be a discrete component which physically resides outside of the computer system to be protected by it or alternatively the dynamic protection module can be implemented within the individual computer system. According to other embodiments the dynamic protection module may be implemented as software or logic within one or more components of the computer system. In further alternative embodiments the dynamic protection module may be implemented as one or more software modules operating in conjunction with or as part of the operating system or as a separate application installed on the computer system. Accordingly the dynamic protection module should not be construed as limited to any particular embodiment.

Referring now to a representative computer system is shown including one configuration of a dynamic protection module having three components that combined result in the dynamic protection module in accordance with the invention. One embodiment of a computer system in accordance with the present invention includes at least a state change indicating component a security component and a fixing component . Each of the components and may be communicatively connected to each other to any other computer system components not shown and may also be communicatively connected to the network of . In another embodiment the state change indicating component may be replaced with a component or module that detects a change in state of the computer.

As explained in the Background of the Invention section above a computer system can be fully updated to include all available updates. However certain events or activities may transpire that may result in a change to the computer system state corresponding to a state when the computer system is not fully updated with all available updates that may result in reopening a vulnerability window therefore rendering the computer system susceptible to a renewed attack. A computer system state or simply state as used herein refers to the computer system s software condition. A state change therefore refers to modification of the computer system s software that may occur on certain events for example upgrades to an operating system installing new software or reinstalling a newer version of software rebooting the computer system or the use of a computer system restore state rollback functionality. A state change may have the potential to revert a computer system state to a previous condition. However not all state changes may result in placing the computer system at risk. It is possible the state change may only result in placing the computer system to a different or unknown state but may nevertheless still be a fully protected state. However neither the user nor the computer system may know ahead of time whether the state being entered will be a vulnerable state or a secure protected state. Accordingly because of the uncertainty of state changing processes the present invention provides a security measure to protect the computer system in the event that the state change does result in the opening of a vulnerability window. In accordance with the invention before simultaneously with or after a state change has been indicated detected or discovered for example by the state change indicating component the security component raises the security level placing the computer system in a temporary isolated mode which may include blocking all incoming network traffic other than information requested by the computer system or coming from a secure or a known location. Then on successful completion of a fixing routine by the fixing component which may include determining that the required updates have been installed the security level is returned to a normal mode by the security component . Thus in accordance with the present invention a computer system is protected during state changes.

One example of a state change includes the use of the System Restore feature of Microsoft Windows XP. When a user downloads or installs a new application or software version there are changes that occur to the computer system that can render the system unstable. The user is faced with the choice of having an unstable computer system or the user may opt to restore the computer system to a working state. The user typically will prefer to have a working system rather than an unstable one. The System Restore feature of Microsoft Windows XP may be used to remove any system changes that were made since a previous point in time including the possible removal of some updates thus opening a vulnerability window. In Microsoft Windows XP the computer system periodically records a snapshot of the computer system state. These snapshots are called restore points. The Microsoft Windows XP operating system also creates restore points at the time of significant system events such as when an application or driver is installed . Additionally Microsoft Windows XP provides the user the ability to create restore points at any time. If the computer system user installs a program that makes the computer unstable the computer user can request the use of the System Restore feature choose a restore point and return the computer system to a previously known stable state. However unknowingly the computer system user may return the computer system to a point in time when a vulnerability window is open. Nevertheless the computer system user prefers to be in an open vulnerability window rather than have a nonfunctioning unstable computer system. Similarly and for other reasons there are other situations that may require the computer system to return to a previous state that may not include the previously installed protection updates.

In the above examples of a computer system state change a state change indicating component in accordance with the present invention can set a flag. A flag is a marker of some type used by the computer system in processing or interpreting information that is set for example in the computer system s registry or in a database used to store information settings options and preferences regarding the operation of the computer system which computer system software may reference. The use of the example of setting a flag within the registry of the computer system to indicate an imminent state change a currently occurring state change or the past occurrence of a state change should not be viewed as limiting of the invention. The person skilled in the art can visualize alternative methods of indicating a state change such as through the use of a set of application programming interfaces API s . The function of the state change indicating component is to indicate a software state change is about to occur is occurring or has recently occurred. Preferably an indication is set prior to a state change in order to provide a higher security level that prevents even a small or instant reopening of a vulnerability window. In addition to system restore other instances when a computer system undergoes a state change may include installing new software reinstalling an application or rebooting a computer system. In accordance with the present invention during any one of these processes the fixing component may read the registry flag and signal the security component to place the computer system in isolated mode.

Furthermore because state changes are inherently discoverable it may be possible for a detection module to detect that a state change has occurred without the setting of a special flag or the addition of an explicit change indicating component.

The security component is interposed between a computer system and the network and as such all network traffic from the network to a computer system preferably flows through the security component . The security component may be interposed between the computer system and the network either physically as hardware or logically as software or a combination of both. A representative security component that may be used in accordance with the invention to protect the computer system in the event of a state change is a hardware or software firewall or a combination of both. As those skilled in the art will recognize a firewall is a security system that protects an internal network or other computer systems from unauthorized access originating from an external network by controlling the flow of information from the external network to the computer system. All communications originating outside of the firewall are first examined and a determination is made whether the communication is safe or permissible to forward to the intended computer.

In accordance with the present invention the security component may be in an isolated mode or a normal mode. Isolated mode refers to a security level that protects the computer system from an open vulnerability window during a state change. Normal mode refers to the security level that was in effect prior to entering the isolated mode. In isolated mode the security component may have implemented more stringent security restrictions than in normal mode.

For a given computer system the security component may have any number of configurations that the security component may impose. Based on the computer system s particular configuration protective security measures in the normal mode may include any number of network activity controls or combinations thereof including but not limited to blocking network traffic on specific communication ports and addresses blocking communications to and or from certain network related applications such as an e mail or Web browser application and blocking access to particular hardware or software components on the computer system. The isolated mode is more restrictive than normal mode. As such based on the computer system s particular configuration protective security measures in the isolated mode may include any of the controls mentioned in connection with normal mode but additionally including blocking all network communications between the computer system and the network except communications between known or secure network locations and also excepting communications or information such as to and from the update server for installing patches or updates. According to one embodiment of the invention therefore isolated mode refers to the blocking of all communications to and or from the network other than those communications required for successfully completing the fixing routine by fixing component . Either the computer system user or a system administrator can have access to set the appropriate security measures. Generally it is envisioned that the security component has a default condition which may be modified by a user or system administrator. If a system administrator modifies the controls the security component will implement the controls according to the system administrator.

In accordance with one embodiment of the invention the security component may have a user interface associated therewith to provide the user with an indication of the level of restrictions that are implemented by the security component . This visual indication may be especially useful when a user is trying to determine whether a network connection is malfunctioning or that network activity is restricted due to a current security threat. The security component may operate in an automatic manner i.e. requiring little to no user intervention and any corresponding visual representations of the security level can be mainly for user information purposes.

According to another embodiment of the present invention if the security component places the computer system in isolated mode the user may be provided with the option to disable the isolated mode and return to normal mode. This is useful as there are certain times that the necessity of full access to a network outweighs the risk of a potentially open vulnerability window. For example it may be necessary to disable the security component when attempting to diagnose networking problems or issues. Alternatively some emergency situations such as using 911 voiceover IP service may necessitate the security component to continue operating in the normal not isolated mode. It is intended that isolated mode be only a transient condition for security component while the fixing component undertakes to successfully complete the fixing routine that may include bringing a potentially open vulnerability window to a close.

In accordance with one embodiment of the present invention the fixing component may continuously poll the registry for a flag set in the registry that indicates an imminent state change that will cause the fixing component to signal the security component to place the computer system in the isolated mode. Alternatively the security component may poll the registry.

The fixing routine of the fixing component is multifold and may include determining what action needs to be taken completing the action and determining whether the computer system state warrants lowering the security level from isolated mode to normal mode. Successful completion of the fixing routine therefore is dependent on whether the state change does in fact result in reopening a previously closed vulnerability window such as under the set of conditions leading to scenario in or whether the computer system returns to a secure condition under the set of conditions leading to scenario wherein the computer system is fully patch compliant. Alternatively a third situation may exist wherein the computer system is in fact in an open vulnerability window but the vulnerability window was never closed. This situation may be represented on timeline of by event occurring after patch non compliant event but before patch compliant event . A fourth situation may exist wherein there was never an open vulnerability window. This fourth situation may be represented on timeline by event occurring before both events and .

As part of the fixing routine the fixing component may be configured to identify the software state of the computer system by performing an analysis of configuration databases stored on the computer system. As known to those skilled in the art and others computer systems maintain databases from which configuration information may be obtained. For example the system registry is a database used to store settings options and preferences regarding the operation of a computer system. The fixing component may analyze the system registry and other configuration databases to identify the software updates installed on the computer system. The fixing component can then query a catalog database for information about available software updates and rules that govern how a particular software update is installed.

The fixing component may be configured to parse configuration databases like the system registry and identify the exact version of the software updates already installed on the computer system. After the software state of the computer system is known the fixing component is able to determine the software updates that need to be installed on the computer system. The fixing component may have access to a database of all available updates which may be segmented into critical updates and non critical updates. The fixing component can make a comparison of the installed updates and the available updates from the database and can request the critical updates which are missing first. The fixing component assembles the data known about the computer system and transmits the data to the update server via the network such as the Internet.

In general the update server acts as a distribution point for software updates. The update server allows a system administrator to customize how software updates will be installed on computer systems connected to the Internet . For example the update server may be configured to perform installations at predetermined periods of time thereby minimizing inconvenience to users. Alternatively the fixing component may request installation of updates. Preferably to minimize the amount of time that the computer system is in the isolated mode the fixing component may request the critical updates first. Once the critical updates have been installed the computer system may be taken out of the isolated mode and returned to the normal mode. For example software updates to antivirus software may be assigned a relatively high priority level. In this instance when a request for a software update for antivirus software is received the update server may suspend installation of a lower priority software update until installation of the higher priority software update is completed.

The update server can maintain a software distribution module configured to transmit software updates to the computer systems where the software updates will be installed. To transmit the software updates the update server can use network protocols generally known in the art such as file transfer protocol FTP or HyperText Transfer Protocol HTTP . As illustrated in each component of the dynamic protection module e.g. the state change indicating component the fixing component and the security component are interconnected and able to communicate with each other and with other components not shown. The fixing component can determine which updates are currently installed on the computer system which updates are not installed on the computer system by comparing the installed updates to a database of all available updates and whether the fixing component can install or has installed the missing updates.

The fixing component may therefore perform one or more routines for monitoring for a flag indicating a state change detecting a state change scanning configuration databases like the registry for the current configuration for the computer system regarding updates issuing instructions to the security component to place the computer system in isolated mode issuing instructions to install available but not currently installed updates determining successful completion such as when critical updates have been installed and notifying the security component when to take the computer system from isolated mode to normal mode.

In accordance with one embodiment of the present invention the security component does not request information from the fixing component . Instead the security component operates on information transmitted to it from the fixing component in connection with certain events. Alternatively the security component may continuously monitor the registry for a flag indicating an imminent state change. Upon recognition of a flag indicating a state change the security component raises the security level from a normal level to an isolated level. As used herein an isolated security level may include blocking all incoming network traffic other than information that may be requested by the fixing component or information coming from a secure or a known location. A user or administrator may be given the option of changing the security measures before during or after the state change. A normal security level refers to the security settings that were in effect prior to the computer system being placed in isolated mode. The normal settings may be configured by the computer system user or the settings may be provided by a system administrator. The security component s security settings may be adjusted through a user interface such as a Graphical User Interface GUI illustrated in . Additionally once the security component has raised the security level the user may be made aware of this fact and give the user the opportunity to return to the normal security level on sufficient information about the risks to the user such as by providing a dialog box as illustrated in .

Referring now to and as discussed above one embodiment of the present invention relates to a method for securing a computer system from attack over a communication network. The method includes a state changing component setting an indication of a potential vulnerability in block . In block a security component initiates isolation mode and indicates an action to fix any vulnerabilities. Finally in block a fixing component fixes any vulnerabilities and on successful completion the computer system is returned to normal protection. Alternatively no explicit indication is necessary to be set in block since the state change itself may be discoverable.

Referring now to a representative schematic diagram illustrating one configuration of a fixing component security component and up date server connected to the Internet is provided. The fixing component issues an update request via the Internet to an update server which is transmitted to the update server via communications . The update server which is also communicatively connected to the Internet responds via communications . Internet traffic must pass through the security component . As shown the security component has an isolated mode and a normal mode . The security component is placed in the isolated mode . In the isolated mode the security component blocks all incoming Internet traffic but allows critical patch to pass through. Accordingly before the computer system undergoes a state change that may place the computer system vulnerable to attacks the computer system security component raises the security level to isolated . Fixing component and update server can communicate with each other via the Internet in any manner or in any sequence of steps to determine whether the fixing component has successfully completed its task of determining whether to return the security component from the isolated security mode to the normal security mode . After successfully completing the fixing routine the fixing component can issue instructions to the security component to return to normal mode from isolated mode . Alternatively the security component can continuously poll the fixing component to determine whether fixing component has successfully completed its task.

Referring now to a flow diagram illustrating one representative embodiment of a dynamic protection method in accordance with the present invention is provided. In summary the method sets an indication of and or detects a computer system state change and a potential vulnerability a security component isolates the computer system from all communications received from a network other than communications necessary for the successful completion of fixing the vulnerability. Finally on successfully completing the fixing routine the computer system is returned to normal security level protection.

At block the computer system is not isolated prior to a state change. The computer system is protected according to the normal security level settings. At block a test is made to detect a state change for example by continually monitoring for an indication such as a flag of an imminent software state change that may result in the opening of a vulnerability window. The monitoring can be substantially continuous or the monitoring can occur at a frequent and regular interval. While no state change is detected in block the computer system remains not isolated in block . On detection of a state change the dynamic protection method determines in block whether the system administrator has provided an override to the default security level settings for isolated mode. If the administrator has not overridden the default isolated mode settings the computer system is isolated in block with the current default isolated mode settings. However if the administrator has overridden the default isolated security settings the method reads the administrator security settings in block and places the computer system in the computer isolated mode with the settings provided by the system administrator in block .

While the computer system is in the isolated mode in block the computer system is capable of determining whether the user has overridden isolated mode in block . User override means that the user has decided for whatever purposes that the computer system should not be in the isolated mode. Therefore the user override returns the computer system to the not isolated mode in block . If however the user does not override isolated mode the method determines whether a fixing routine has been successfully completed in block such as by fully updating the computer system with critical updates. As discussed previously successful completion can be one of several outcomes. For example the computer system can determine that there are no possible updates to install. Accordingly the computer system is taken out of isolated mode and returned to not isolated mode block . Alternatively the computer system can determine that the computer system is and always was fully updated. Accordingly there are no updates to be installed and the computer system is returned to the computer not isolated mode block . Alternatively the computer system can determine that although the computer system is vulnerable to one or more pieces of malware there is no available update for a variety of reasons and therefore there is no purpose to remaining in the isolated mode. Alternatively the computer system may determine that in fact the computer system is not fully updated but for expediency the computer system can request only those updates that are deemed to be critical. In this instance the computer system will obtain the critical updates in block such as from an update server connected to the Internet. Once the critical updates have been installed the computer is up to date and the fixing routine has been successfully completed and the computer system s security level returns to the not isolated mode block .

Implementations of the present invention are not limited to the routine shown in . Thus the embodiment of the present invention described above in connection with should be construed as exemplary and not limiting of the invention.

Referring to a representative dialog box is illustrated that may alert the computer system user that the computer system has been placed into an isolated mode for the protection of the computer system due to the computer system undergoing a state change such as System Restore. Furthermore the security component s security mode can by constantly monitored by locating an icon on the taskbar of a computer display. Icon can take the form of a shield signifying protection or security. An X appearing in the center of the shield can signify that the computer system is in the isolated mode. The dialog box can contain an informational message to the user within the borders of the dialog box . Furthermore the dialog box can include a Close button . The user may locate a pointer over the Close button and select to close the dialog box such as by clicking a mouse button with the pointer being located within the borders of the Close button . Alternatively the user may select to view additional information by moving the pointer within the borders of the dialog box and then clicking a mouse button with the pointer located within the borders of the dialog box causing a user interface such as window shown in to appear.

As known to those skilled in the art a graphical user interface or GUI is an input system characterized by the use of graphics on a computer display to communicate with a computer user. In this instance the GUI is for a windowing environment. The window includes a title bar with the title of Windows Firewall. Thus the user is made immediately aware that the window is specific to the firewall security system. The window may provide information as well as configuration options to solicit input from the user. The window can include a Close Window button located in the upper right corner of window . Selecting the Close Window button removes the window from the computer display. The window can include any number of tabs such as tabs and however typically only one tab tab is displayed within the borders of the window and the remaining tabs and are hidden from view other than for a small portion of the tabs and used to select to view the contents of each respective tab. Tabs are generally placed near the upper portion of the window below the title bar. In window there is a General tab an Exceptions tab and an Advanced tab . Only the selections under the General tab are shown. Under the General tab the tab includes information pertaining to the various security modes and provides options for selecting isolated mode by checking the check box . Additionally the General tab includes radio buttons and . Selecting one radio button in a set deselects the previously selected button so only one of the options in the set can be selected at any given time. Thus upon selection of button the button is unselected and vice versa. Furthermore beneath each radio button or check box that appears in the window a sentence or two about the functionality and or helpful information or recommendations can be provided for the user that allows the user to make a well informed decision concerning the computer system s security measures. Radio button turns off the firewall security. Radio button turns on the firewall security. Additionally the window can include prompts for the user to request additional information such as the prompt to request further information about Windows firewall.

The tab may contain descriptions as well as provide the ability to select options of the exceptions that may be excluded from being blocked from the network when the firewall is on. For example there may be a selection for excluding e mail communications.

The advanced tab includes features that a knowledgeable person may only be able to access. The advanced tab may include system configurations for only the most knowledgeable persons familiar to computer systems and firewalls. If the user decides to make changes to the security firewall settings the user can make the necessary selections by moving the pointer over the radio button or check box as appropriate. After making all selections the user can then move the pointer over the OK button and mouseclick on the OK button to enter the changes. Otherwise if the user wants to return to the previous settings the user can move the pointer over the Cancel button and mouseclick with the pointer located over the Cancel button and the window is closed.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

