---

title: Image verification
abstract: Tampering with pieces of software is inhibited. Software obfuscation inhibits reverse engineering by hackers by manipulating names of functions and adding jump instructions into various pieces of software. The obfuscation of a software image so as to becloud the comprehension of hackers in reverse engineering pieces of software comprising the software image is provided. Image verification ensures the originality of the pieces of software to be installed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577997&OS=07577997&RS=07577997
owner: Microsoft Corporation
number: 07577997
owner_city: Redmond
owner_country: US
publication_date: 20050217
---
This application is a continuation of application Ser. No. 11 061 791 filed Feb. 17 2005 application Ser. No. 11 061 280 filed Feb. 17 2005 application Ser. No. 11 062 238 filed Feb. 17 2005 application Ser. No. 11 062 237 filed Feb. 17 2005 application Ser. No. 11 061 484 filed Feb. 17 2005 application Ser. No. 11 061 790 filed Feb. 17 2005 application Ser. No. 11 061 411 filed Feb. 17 2005 and application Ser. No. 11 061 399 filed Feb. 17 2005 and further claims the benefit of U.S. Provisional Application No. 60 578 937 filed Jun. 12 2004 all of which are incorporated herein by reference.

The present invention relates generally to security and more particularly to inhibiting software tampering by preventing modification by unauthorized individuals or unauthorized pieces of software.

Software makes computing machines powerful. Such machines can correct the irregular rhythm of a person s defective heart or let people reach for the constellations of the heavens. Yet software is vulnerable to something as simple as accidental mischief or intentional harm. Accidental mischief may innocently come from a child who somehow gains access to his parents personal computer causing physical loss of data or changing settings that are detrimental to the use of the computing machine among other examples. Intentional harm is typically instigated by a hacker which is a dysphemism for a person who uses computing expertise for illicit ends such as by causing malicious software to execute on computing machines or directly gaining access to computing machines without permission and tampering with programs and data.

Operating systems are software that controls the allocation and usage of computing machine resources such as memory central processing unit CPU time disk space and peripheral devices. The operating system is the foundation software on which applications depend. Popular operating systems include Windows 98 Windows NT Windows XP Mac OS UNIX and Linux. Operating systems are sometimes packaged in a way that is appropriate for a particular market. For example a powerful operating system used for the small niche server market can be retrofitted by the software manufacturer in various ways that are appropriate for novice users in the large general consumer market. One problem is that novice users may inadvertently modify the retrofitted operating system thereby crippling it. The most pernicious problem of all however is that hackers can reverse engineer the retrofitted operating system so as to transform it for use for other illicit purposes to the detriment of the software manufacturer. illustrates this problem and other problems in greater detail.

A software image represents a duplicate or copy of an operating system containing instructions that make computer hardware work. A hacker or his malicious software can modify the software image or cause it to be easily replaced because the software image is typically a file stored somewhere in the computer hardware. The next time users invoke the software image to run system software such as the operating system the modified or supplanted software image is run instead of the original provided by the software manufacturer.

The tampering of the software image is typically carried out by hackers or pieces of malicious software but rarely by users . However a registry can be unintentionally tampered with by the users as well as by hackers or pieces of malicious software . The registry is a piece of system software used to store information that can be employed to configure the system for one or more users applications and hardware devices. For example the registry could be used to enable three dimensional rendering and hardware acceleration support for consumer computing machines while disabling those same features for server computing machines.

These pieces of information can be changed when users act with administrative permission or by hackers or pieces of malicious software that improperly obtain permission to modify the registry. Hackers and pieces of malicious software can attempt to manipulate the registry to overcome licensing restrictions so as to change information in the registry registry settings and unlock additional features that were not meant for a particular audience or marketing channel. One issue is that modification of the registry may cause the computing machine to stop working or to exhibit unpredictable behaviors.

Another problem involves tampering with executing software . Hackers or pieces of malicious software can improperly jettison properly executing software and supplant it with unauthorized or prohibited software services. Moreover hackers or pieces of malicious software can emulate software responses or software calls and tamper with the running of the executing software .

Given the problems of software tampering both by accidental mischief or intentional harm it will come as no surprise that unscrupulous hackers and their malicious software can cause software to be vulnerable. Without a resolution to the problem of software tampering users may eventually no longer trust computer manufacturers to provide a secure computing experience while preventing access by unauthorized individuals. Thus there is a need for a system method and computer readable medium for securing software while avoiding or reducing the above problems associated with existing systems.

In accordance with this invention a system method and computer readable medium for inhibiting software tampering is provided. The method form of the invention includes a method for inhibiting software tampering. The method comprises calculating a first checksum of an obfuscated protection dynamic link library prior to loading the obfuscated protection dynamic link library on a computing machine. The method further comprises verifying the originality of a software image of the obfuscated protection dynamic link library to determine whether security error measures are to be taken to inhibit software tampering.

In accordance with further aspects of this invention a computer readable medium form of the invention includes a computer readable medium having computer executable instructions for implementing a method of inhibiting software tampering. The method comprises calculating a first checksum of an obfuscated protection dynamic link library prior to loading the obfuscated protection dynamic link library on a computing machine. The method further comprises verifying the originality of a software image of the obfuscated protection dynamic link library to determine whether security error measures are to be taken to inhibit software tampering.

In accordance with further aspects of this invention a system form of the invention includes a system for inhibiting software tampering. The system comprises means for calculating a first checksum of an obfuscated protection dynamic link library prior to loading the obfuscated protection dynamic link library on a computing machine. The system further comprises means for verifying the originality of a software image of the obfuscated protection dynamic link library to determine whether security error measures are to be taken to inhibit software tampering.

It is a dichotomy of software that it is powerful but vulnerable. Various embodiments of the present invention inhibit tampering with pieces of software. One embodiment is the obfuscation of a software image so as to becloud the comprehension of hackers in reverse engineering pieces of software comprising the software image. Another embodiment is verifying whether the pieces of software together constitute a software package that requires protection from tampering. As yet another embodiment is determining whether the hardware resources such as the central processing unit or the cache memory on a computing machine belong to a class for which inhibiting software tampering is possible. A further embodiment includes checking whether certain critical files on the computing machine have been tampered with. An additional embodiment includes determining whether the registry has been tampered with. Some other embodiments include determining whether software services that are executing have been tampered with.

The setup information file C belongs to a class of files that is textually based and contains information used by a setup application such as the setup software B during an installation. Typically the setup information file C among other setup information files such as a protection information file A is created before the authoring of a setup application such as the setup software B. Examples of information that may be stored in an information file includes registry changes file names and locations of the source files on source media. The setup information file C as well as the protection information file A can also contain private sections. These private sections depend on the setup software B and can be used to store specialized information used by a specific setup application such as the setup software B for installing pieces of software that inhibit software tampering.

The setup software B is a program whose function is to install another program such as system software application software or network software either on a storage medium or in memory. The setup software B might be used to guide a user through the often complex process of setting up an application for a particular combination of machine printer monitor and network. The product identifier dynamic link library A creates a unique product identifier and stores the created product identifier A in a registry which is discussed hereinbelow. The setup information file C prepares an installation dynamic link library B for the installation of a piece of software that inhibits software tampering. An installation component comprises a protection information file A and the installation dynamic link library B. The protection information file A contains various pieces of information such as registry changes file names and locations of the source files for the installation of pieces of software that inhibit software tampering. Additionally the protection information file A includes information for the installation of a system file B and various software components that are particular to a marketed software package.

Contained within a software component the installation dynamic link library B installs the actual piece of software that inhibits software tampering such as the protection dynamic link library A that is specific to a particular market segment and may provide content or language appropriate for that particular market segment. The installation dynamic link library B also sets an activation key C so as to allow the piece of software that inhibits tampering as embodied in the protection dynamic link library A to quickly identify that the installation is a secured installation. Moreover the installation dynamic link library B also installs a number of encrypted protection profiles that contain information pertaining to the hardware and or language among other things and various system files B so as to allow it to determine whether something has been tampered with.

The runtime component comprises the protection dynamic link library A which embodies a piece of software that inhibits software tampering with system files B which include help files and market specific content files such as language.

A central hierarchical database includes the product identifier A the activation key C and the encrypted protection profiles D. The central hierarchical database is used to store information necessary to configure the systems for one or more users applications and hardware devices. The central hierarchical database contains information that an operating system continually references during operation such as profiles for each user the applications installed on the computer and types of documents each can create property sheet settings for folders and application icons what hardware exists on the system and which ports are being used. The central hierarchical database in addition can be used as mentioned above to store pieces of information that aid in the inhibition of software tampering. One suitable piece of information includes checksums which are calculated values that are used to test data for tampering such as when a hacker modifies a file. The checksum is preferably calculated for a given chunk of data by sequentially combining all the bytes of data with a series of arithmetic or logical operations. During the time period in which software tampering is verified or validated a new checksum can be calculated in the same way using the stored data. If the two checksums do not match software tampering may have occurred and suitable steps can be taken to correct the tampering or shut down the computing machine.

The protection dynamic link library A during the execution of the software of the computer system verifies that various system files B have not been tampered with by reading various encrypted protection profiles D. In addition the protection dynamic link library A verifies various settings of keys and their associated values to determine whether they have been tampered with. The protection dynamic link library A initially creates timers to check the registry as well as services that are authorized to run on the computer system. If the system has been tampered with the protection dynamic link library A preferably attempts to fix the tampering or initiates shutdown of the computing machine among other suitable methods of dealing with tampering.

For example the protection dynamic link library A monitors the central hierarchical database and resets keys and their associated values if there has been tampering. The protection dynamic link library A also checks critical files such as various system files B against the information contained in the encrypted protection profiles D and the protection dynamic link library A to determine whether there has been tampering. Moreover the protection dynamic link library A checks to make sure that software services running on the computer systems are authorized and removes unauthorized software services.

One suitable protocol includes the transmission of a random salt value which can comprise a string of numeric alphabetic or alphanumeric information sent by the log on module A to the protection dynamic link library B. The protection dynamic link library B preferably has two keys a public library key and a private library key. In encryption and digital signatures these keys comprise a string of bits used for encrypting and decrypting information to be transmitted or received. Encryption commonly relies on two different types of keys a public key known to more than one person and a private key known only to one person.

The protection dynamic link library B uses the private library key to decrypt a profile such as profiles . Each profile is suitably organized as a data structure known as a blob which is an amorphous data structure in which various pieces of information can be stored. Preferably blobs of profiles are encrypted using the private library key of the protection dynamic link library B. The profile includes a blob which has been encrypted by the private library key of the protection dynamic link library B. The blob includes profile data A whose size and format depend on a profile type such as a hardware profile or a language profile. Blob also includes a signature B which contains a checksum of the profile data A digitally signed with the public library key of the protection dynamic link library B. Blob also includes a verify blob C which is a checksum of the identifier of the profile and the profile data A digitally signed with a public calling key of the log on module A and also encrypted with a private calling key of the log on module A.

The profile is organized as a blob within which is contained a verifier blob A which is a checksum of an identifier of the profile and its data described by the profile data B digitally signed with the private calling key of the log on module A and also encrypted with a private calling key of the log on module A. The blob includes the profile data B whose size and format depend on a profile type such as a hardware profile or a language profile. The blob also includes a signature C which is a checksum of the profile data B digitally signed with the public library key of the protection dynamic link library B.

The profile is organized as a blob . The blob includes a signature A which is a checksum of a profile data C digitally signed with the public library key of the protection dynamic link library B. The blob includes a verifier blob B which is a checksum of an identifier of the profile and its profile data C digitally signed with the public calling key of the log on module A and also encrypted with the private calling key of the log on module A. The blob includes the profile data C whose size and format depend on a profile type such as a hardware profile or a language profile. Note that for each blobs of profiles various named organizations such as profile data signatures and verifier blobs are placed differently in each of blobs or profiles . These differing arrangements aid in the inhibition of the tampering of profile data contained within the registry . Headers containing placement information exist within the blobs allowing a determination where each of the named organizations reside within the blobs .

When the protection dynamic link library B has found the desired profile by decrypting the profile or the blob using its private library key it will return the profile to the log on module A. Prior to returning the data to the log on module A the protection dynamic link library B computes a checksum from the identifier and the profile data of the found profile. The checksum includes the result of comparing the profile and the random salt value that was originally transmitted by the log on module A. The salt value in essence inhibits the ability of a hacker from simply emulating the protection dynamic link library A to return a false profile to the log on module A.

When the computation of the checksum has occurred the protection dynamic link library B returns to the log on module A a result which is essentially a result data structure with various pieces of information e.g. success failure and flags detailing the success or failure a verifier blob in the found profile and the calculated checksum computed from the identifier of the profile its data the result and the random salt value. The log on module A verifies the returned result from the protection dynamic link library B. The log on module A decrypts the verifier blob using its private calling key to obtain the checksum of the identifier of the profile and the data of the profile. In addition the log on module A verifies the signature of the verifier blob by using its public calling key. Moreover the log on module A computes a checksum from the decrypted verifier blob checksum the results of the DLL and the random salt value passed originally to the protection dynamic link library A. The log on module A performs a test to determine whether the checksum it has computed matches the checksum returned by the protection dynamic link library B. If the checksums do not match the log on module A concludes that the system has been tampered with.

From Terminal A the method proceeds to block where source code is created for a protection dynamic link library which embodies pieces of software that inhibit software tampering. The source code is compiled and linked to create the protection dynamic link library DLL . See block . Next at block an obfuscation control file which contains names of classes methods and fields is created. The method then proceeds to block where an obfuscation process is executed using the protection DLL and the obfuscation control files as input. An obfuscated DLL is produced in which names of classes methods fields and control flows are obfuscated. See block . The obfuscation process makes the protection dynamic link library difficult to debug by a hacker who is attempting to reverse engineer the protection dynamic link library. One example of obfuscation is the insertion of jump instructions into the protection dynamic link library or the reordering of programming instructions.

The obfuscation process described above is one of many suitable techniques that provides for the renaming of symbols in the assembly of software so as to foil decompilers that attempt to reverse engineer software for illicit purposes. The obfuscation process can increase protection against illicit decompilation while leaving the application intact. The goal of obfuscation is confusion which taxes the minds of hackers to comprehend multifaceted intellectual concepts of pieces of software. While the obfuscation process would not only confuse a human interpreter who is a hacker it would also likely break a decompiler which depends on certainties of logic. An obfuscation process creates a myriad of decompilation possibilities some of which lead to incorrect logic hence causing uncertainties in translation.

From Terminal A the method proceeds to block where the method calculates a checksum of the obfuscated protection DLL. A catalog file is then created. See block . One suitable implementation of the catalog file is a database. The catalog contains the name of each software component its version and its signature e.g. checksums . Next at block the checksum of the obfuscated protection DLL is placed into the catalog file. The method then proceeds to block where the method calculates a checksum of the catalog file containing the checksum of the obfuscated protection DLL. The checksum of the catalog file is also encrypted using a private key. See block . In other words the catalog file is digitally signed by the private key. At this point the method produces the obfuscated protection DLL and the catalog file that can be verified. Verification aids in ascertaining whether the obfuscated protection DLL is coming from a known source such as a particular software manufacturer and that the obfuscated protection DLL has not been tampered with. The method then continues to the exit Terminal B.

From Terminal B the method proceeds to a set of method steps defined between a continuation terminal Terminal C and an exit terminal Terminal D . The set of method steps describes the setting up of the protection dynamic link library which embodies pieces of software for inhibiting software tampering on a computing machine.

From Terminal C the method proceeds to block where the method obtains a product identifier for a piece of software and stores it in a central hierarchical database such as a registry. The product identifier is provided by a user which he can obtain from a key typically affixed to the packaging of the piece of software. The method decodes the product identifier to identify a class in which the piece of software is categorized. See block . The piece of software can include any suitable pieces of software such as system software application software or network software. Next at decision block a test is made to determine whether protection is available for the identified class. If the answer is NO the method proceeds to another continuation terminal Terminal L and terminates execution. If on the other hand the answer to the test at decision block is YES the method proceeds to block where the installation dynamic link library is invoked. The installation dynamic link library installs an activation key into the central hierarchical database such as the registry based on the product identifier. See block . The activation key allows the computing machine to quickly check and determine whether pieces of software for inhibiting software tampering are running on the computing machine without decoding the product identifier which could be time consuming.

From Terminal C the installation dynamic link library installs encrypted protection profiles into the central hierarchical database such as the registry. Upon the start up of the computing machine a log on module of the piece of software such as system software is executed. See block . Next at block the log on module decodes the product identifier stored in the central hierarchical database such as the registry and obtains the product class in which the piece of software is categorized. The method proceeds to decision block where a test is performed to determine whether protection is available for the identified product class. If the answer is NO to the test at decision block the method continues to Terminal L where it terminates execution. If the answer on the other hand to the test at decision block is YES the log on module A attempts to load the obfuscated protection dynamic link library onto the computing machine. See block . The method continues at another continuation terminal Terminal C .

From Terminal C the method proceeds to block where the method calculates the checksum of the protection dynamic link library to be installed. Note that hereinafter the obfuscated protection dynamic link library will be known as the protection dynamic link library for brevity purposes. The method obtains a list of catalog files included in the system files. See block . Next at block the method takes a catalog file from a list and searches for a checksum contained in the catalog file. Decryption and verifying of the signature occurs. The method proceeds to decision block where a test is performed to determine whether there is a match between the two checksums. If the answer is NO to the test at decision block the method continues to another continuation terminal Terminal C . If on the other hand the answer to the test at decision block is YES the method continues to another continuation terminal Terminal C . The processing steps discussed in connection with describe a process by which a software image of the obfuscated protection dynamic link library is verified to determine the originality of the software image i.e. whether the software image was originally shipped or distributed by a desired software manufacturer. If tampering has occurred the verification process indicates that the software image of the obfuscated protection dynamic link library to be loaded has been tampered with and security error measures such as shutting down a computing machine may have to be taken.

From Terminal C the method continues to decision block where a test is performed to determine whether there are more catalog files to search. If the answer to the test at decision block is YES the method continues to another continuation terminal Terminal C . From Terminal C the method loops back to block where the above described processing steps are repeated. If on the other hand the answer to the test at decision block is NO the method continues to block where the protection dynamic link library to be installed is not the original that came with the catalog files signifying that it may have been tampered with. The method then continues at another continuation terminal Terminal C . From Terminal C the method proceeds to decision block where a test is performed to determine whether there is a protection dynamic link library and the trusted catalog file. If the answer is NO to the test at decision block the method continues to Terminal C where it loops back to block and the above described processing steps are repeated. One suitable implementation of the test discussed in decision block is a set of trust checking application programming interfaces provided by Microsoft Windows. Otherwise if the answer to the test at decision block is YES the method continues to another continuation terminal Terminal C .

From Terminal C the method proceeds to block where the method verifies the found catalog file and obtains state data as a return value by invoking a set of trust checking application programming interfaces. The method obtains trust provider information using obtained state data via the set of trust checking application programming interfaces. See block . Next at block the method obtains a base signer from a certificate chain using the obtained trust provider information. The method proceeds to block where the method validates the last element of the certificate chain using the context of the base signer. A test is performed to determine whether the last element contained a proper public key. See decision block . If the answer is YES to the test at decision block the method continues to Terminal C. If on the other hand the answer to the test at decision block is NO the method continues to Terminal C where it loops back to block and the above described processing steps are repeated.

From Terminal C the method proceeds to decision block where a test is performed to determine whether the protection dynamic link library loaded successfully. If the answer to the test at decision block is NO the method initiates system shutdown. See block . The method proceeds to Terminal L and terminates execution. If on the other hand the answer to the test at decision block is YES the method proceeds to block where the method creates a first timer running in a non terminable thread. The method then continues on to two paths of execution represented by a continuation terminal Terminal C and the exit Terminal D. This splitting of execution paths at is to illustrate the concurrency of several pieces of software running on the computing machine.

From Terminal C the method proceeds to decision block where a test is performed to determine whether a pre configured time period has expired. If the answer is NO the method loops back to decision block where the above described processing steps are repeated. If the answer to the test at decision block is YES the method proceeds to block where the method checks the activation key stored in the central hierarchical database such as the registry to decode the product class. Another test is performed to determine whether there is protection available for the decoded product class. See decision block . If the answer is YES to the test at decision block the method loops back to Terminal C where the above discussed processing steps are repeated. If on the other hand the answer to the test at decision block is NO the core application programming interface has been tampered with and the method takes security measures such as shutting down the computing machine. See block . The method then continues to Terminal L and terminates execution.

From Terminal D the method proceeds to a set of method steps which is defined between a continuation terminal Terminal E and an exit terminal Terminal F . The set of method steps determines whether the computing machine belongs to a class of supportable machinery.

From Terminal E the method proceeds to block where the method verifies the existence of a set of instructions on the central processing unit of the computing machine to obtain its identification. A test is performed to determine whether the set of instructions is available. See decision block . If the answer to the test at decision block is NO the central processing unit of the computing machine has an architecture that does not support self identification. See block . One suitable conclusion is that the central processing unit can support pieces of software for inhibiting software tampering. The method then continues to the exit Terminal F. If on the other hand the answer to the test at decision block is YES the log on module communicates with the protection dynamic link library to access the encrypted protection profile relating to the excluded central processing unit classes. See block . In other words there are files installed on the computing machine that describe various parameters with which the computing machine operates. For example language files describe the language in which an operating system presents information to users. As another example hardware files describe the pieces of computing machinery that the operating system supports. The problem is that files can easily be tampered with by a hacker or malicious software. Contained within the encrypted protection profile are checksums that signify the original files installed on the computing machine. If the original files were to be tampered with the checksums of the tampered files and the checksums stored in the encrypted protection profile will not match signifying that the original files have been tampered with. For example if a hacker were to modify the hardware files to fool the operating system into supporting a non supportable computing machine the checksum of the modified hardware files are likely to be different than the checksum stored in the encrypted protection file hence allowing a determination of tampering. Returning to the log on module passes into the protection dynamic link library of a random salt value that is used to enhance security. See block . The random salt value makes it difficult for a hacker to defeat or intercept a functional invocation or call. As will be discussed hereinbelow the random salt value is used in the calculation of a checksum based on the random salt value and data sent by the protection dynamic link library. That checksum is compared against the checksum calculated by the protection dynamic link library to determine if tampering has occurred. The method then continues to another continuation terminal Terminal E .

From Terminal E the method proceeds to block where the protection dynamic link library decrypts an encrypted protection profile profile using a private library key. The protection dynamic link library compares the profile to the system. See block . Next at decision block a test is performed to determine whether the profile has been found. Each profile has a name that preferably is a number of bits such as 64 bits. If the answer is NO to the test at decision block the method loops back to block where the above described processing steps are repeated. If on the other hand the answer to the test at decision block is YES the method proceeds to block where the protection dynamic link library computes a checksum for the identity of the profile its data the comparison result and the salt value. The protection dynamic link library returns a result data structure a verifier blob of the profile and the computed checksum. See block . The method then continues to another continuation terminal Terminal E .

From Terminal E the method proceeds to block where the log on module uses a private calling key to decrypt the verifier blob and obtains a verifier checksum. The log on module validates the signature of the checksum using a public calling key. See block . Next at block the log on module computes a checksum from the decrypted verifier checksum the received result data structure and the salt value. The method proceeds to block where the method prepares the checksums computed by the log on module and the protection dynamic link library. A test is performed to determine whether the checksums are a match. See decision block . If the answer is NO to the test at decision block the method continues to Terminal L and terminates execution. Otherwise the answer to the test at decision block is YES and the method proceeds to another continuation terminal Terminal E .

From Terminal E the method proceeds to block where the method extracts a list of excluded computing machine classes from the profile. The method then causes the computing machine to review CPU information e.g. vendor identity type family model number brand identity and feature set . See block . Next at decision block a test is performed to determine whether the vendor identity is on the excluded list. If the answer is NO to the test at decision block the method continues to Terminal F. Otherwise the answer to the test is YES and the method continues to another continuation terminal Terminal E .

From Terminal E the method continues to decision block where a test is performed to determine whether the type family and model number are on the excluded list. If the answer is YES to the test at decision block the method continues at another continuation terminal Terminal E . Otherwise if the answer to the test at decision block is NO the method continues to another decision block where a test is performed to determine whether the brand identity and the feature set are on the excluded list. If the answer is YES to the test at decision block the method continues to Terminal E. Otherwise if the answer to the test at decision block is NO the method continues to another continuation terminal Terminal E .

From Terminal E the method continues to decision block where a test is performed to determine whether extended instructions to determine the CPU or the central processing unit of the computing machine identity exists. If the answer to the test at decision block is NO the method continues to Terminal F. Otherwise if the answer to the test at decision block is YES the method invokes the extended instructions to obtain the name of the CPU or the central processing unit of the computing machine. See block . Next at block the method invokes the extended instructions to obtain the cache size of the central processing unit. The method continues at another continuation terminal Terminal E .

From Terminal E the method proceeds to decision block where a test is performed to determine whether the name of the center processing unit is on the excluded list. If the answer to the test at decision block is YES the method continues to Terminal E. If the answer to the test at decision block is NO another test is performed to determine whether the cache size of the CPU is on the excluded list. See decision block . If the answer is YES to the test at decision block the method continues to Terminal E. Otherwise if the answer is NO the method continues to Terminal F.

From Terminal E the method issues error messages that no protection is available on the computer machine and initiates system shutdown. See block . The method then continues to Terminal L and terminates execution.

From Terminal F the method proceeds to a set of method steps defined between a continuation terminal Terminal G and an exit terminal Terminal H . The set of method steps verifies whether the install files have been tampered with.

From Terminal G the log on module communicates with a protection dynamic link library to access an encrypted protection profile relating to critical files on the computing machine. See block . The steps in the illustrated sequence of are executed in the context of finding an encrypted protection profile relating to critical files on the computing machine. See block . Next at block the method extracts a list of critical files from the profile. A test is performed to determine whether the critical files on the computing machine have been changed. See decision block . If the answer to the test at decision block is YES the method continues to Terminal L and terminates execution. Otherwise the answer to the test at decision block is NO the method continues to Terminal H. Please note that processing steps between Terminal G and Terminal H can be concurrently executed so as to continuously check whether critical files on a computing machine have been changed or tampered with.

From Terminal H the method proceeds to a set of method steps defined between a continuation terminal Terminal I and an exit terminal Terminal J . The set of method steps determines whether the registry has been tampered with.

From Terminal I upon start up the log on module invokes a protection function of the protection dynamic link library to protect the keys and values of the registry of the system context. See block . The protection dynamic link library creates a thread to protect various keys and values of the registry of the system context. See block . Next at block the protection dynamic link library returns a handle to the just created thread to the log on module. The method proceeds to block where the method creates a timer to check the continuance of the thread protecting the keys and values of the registry at the system context. Next the method proceeds to three independent paths of execution which are represented by a continuation terminal Terminal I decision block and another continuation terminal Terminal I . These independent paths of execution indicate concurrency. A test is performed at decision block to determine whether a pre configured time period has expired. If the answer is NO to the test at decision block the method proceeds to another continuation terminal Terminal I and loops back to decision block where the above described processing step is repeated. Otherwise if the answer to the test at decision block is YES the method continues to another continuation terminal Terminal I .

From Terminal I the method proceeds to decision block where a test is performed to determine whether the thread has terminated. If the answer to the test at decision block is NO the method continues to another decision block where another test is performed to determine whether the thread has been suspended. If the answer to the test at decision block is NO the method continues to Terminal I and loops back to decision block where the above described processing steps are repeated. If the answers to the tests at decision blocks are YES the method proceeds to block where the system is believed to have been tampered with and the method initiates system shutdown. The method then continues to Terminal L and terminates execution.

From Terminal I the method proceeds to block where the thread communicates with a protection dynamic link library to access a list of system registry keys and values to be protected. The steps in the illustrated sequence of are executed. See block . Next at block the thread subscribes for notification of any changes to protect registry keys. A test is performed at decision block to determine whether there is a notification of a change. If the answer to the test at decision block is NO the method loops back to decision block where the above described processing step is repeated. Otherwise the answer to the test at decision block is YES and the method fixes the tampered key and its value. See block . The method then loops back to decision block where the above described processing steps are repeated.

From Terminal I the method proceeds to block where upon log on by a user the log on module invokes a protection function of the protection dynamic link library to protect the keys and values of the registry of the user context. The protection dynamic link library creates a thread to protect various keys and values of the registry at the user context. See block . Next at block the protection dynamic link library returns a handle to the just created thread to the log on module. The method proceeds to block where the method creates a timer to check the continuance of the thread protecting the keys and values of the registry of the user context. The steps of in the illustrated sequence are executed for the user context. The method then continues to Terminal J.

From Terminal J the method proceeds to a set of method steps defined between a continuation terminal Terminal K and an exit terminal Terminal L . The set of methods determines whether services have been tampered with or whether unauthorized services are executing. From Terminal K upon start up the log on module invokes a protection function of the protection dynamic link library to inhibit the execution of unauthorized services. The protection dynamic link library creates a thread to inhibit the execution of unauthorized services. See block . Next at block the protection dynamic link library returns a handle to the just created thread to the log on module. The method then continues to block where the method creates a timer to check the continuance of the thread inhibiting the execution of unauthorized services. The steps of are executed. See block . Next at block A the thread communicates with the protection dynamic link library to access an encrypted protection profile relating to a list of unauthorized services. The method then continues to another continuation terminal Terminal K .

From Terminal K the steps of are executed. A test is performed at decision block C to determine whether an unauthorized service is running. If the answer to the test at decision block C is NO the method continues to another continuation terminal Terminal K . Otherwise if the answer is YES to the test at decision block C the method proceeds to block D where the method stops all services that are dependent on the unauthorized service. The unauthorized service is then deleted from the execution. See block E.

From Terminal K the method proceeds to decision block F where a test is performed to determine whether there are more unauthorized services. If the answer to the test at decision block F is YES the method continues to another continuation terminal Terminal K . From Terminal K the method loops back to decision block C where the above described processing steps are repeated. Otherwise if the answer to the test at decision block F is NO the method proceeds to block G where the thread sleeps for a pre configured period of time. The method then loops back to decision block C via Terminal K where the above described processing steps are repeated. The steps described in connection with the set of method steps defined between the Terminals K and L are preferably concurrently executed to other sets of method steps.

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

