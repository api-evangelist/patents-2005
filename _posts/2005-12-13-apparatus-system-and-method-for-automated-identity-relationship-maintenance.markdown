---

title: Apparatus, system, and method for automated identity relationship maintenance
abstract: An apparatus, system, and method are disclosed for automatically maintaining identity relationships among disparate enterprise information systems. The apparatus comprises a synchronization hub comprising an identity relationship repository, a relationship service module, a consistency module, and an adjustment module. The relationship service is configured to access a target relationship entry using a unique key from a source business object, wherein the source business object is representative of changes made in a source enterprise information system. The various components and modules of the synchronization hub cooperate to determine identity relationships that need updating and to propagate identity relationship changes to one or more destination enterprise information servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07958031&OS=07958031&RS=07958031
owner: International Business Machines Corporation
number: 07958031
owner_city: Armonk
owner_country: US
publication_date: 20051213
---
This invention relates to maintaining hierarchical data structures and more particularly relates to apparatus systems and methods for automatically synchronizing data structures representing similar data objects in separate enterprise information systems.

With the advent of the Information Age large organizations store voluminous amounts of information in large repositories. Examples of large organizations include a bank an insurance company a retail department store chain a fuel distribution company a city government entity a church a charity organization and a commercial construction company.

An enterprise such as an auto parts manufacturing company may store customer orders in a production enterprise information systems EIS . The production EIS may track the customer orders manufacturing schedules procurement details for individual components necessary to manufacture ordered parts and employee scheduling. The same auto parts manufacturing enterprise may have a second EIS a financial EIS that tracks at employee pay accounts payable and the like. The production EIS and the financial EIS serve different purposes. The production EIS may handle the scheduling of manufacturing more efficiently than the financial EIS. Similarly the financial EIS may handle the payment of salaries and accounts payable more efficiently than the production EIS.

As an enterprise grows and evolves the enterprise frequently acquires multiple enterprise information systems. The multiple systems may maintain similar data. For example the auto parts financial EIS may keep a table of employees to track salary information while the production EIS may track employees to handle scheduling functions on an assembly line. Another enterprise may keep two enterprise information systems that track precisely the same data. Such a situation may arise due to the merger of two similar companies that previously had enterprise information systems.

As those of skill in the art understand redundant data on two systems frequently creates problems. A new hire entered into a financial EIS may not be reflected in a production EIS. An assembly line manager who depends on the production EIS to schedule employees to work on the assembly line may not be able to schedule a new employee to work an assembly line shift until the both the production EIS and the financial EIS both include the new employee in their systems. Similarly an assembly line manager may be able to enter an employee for work shifts in a production EIS but the employee may not receive pay unless the employee s information is also entered into the financial EIS.

In the auto parts manufacturer example owners of multiple EISs desire to synchronize the redundant data stored in distinct enterprise information systems. Synchronization avoids entering the information for a new employee into both systems. When information about the new employee changes in one system those changes need to be propagated to all other systems that store similar data about the new employee.

Today synchronization hubs exist to propagate information changes from one EIS to another. However these synchronization hubs themselves are difficult to maintain and manage. A synchronization hub may identify the need to propagate changes to an employee in one EIS to other systems. However the software code to propagate the changes can be cumbersome and complex. For example an employee may have three dependents stored in a financial EIS. However the dependents may not be stored in the production EIS. If an assembly line manager decides to fire an employee and remove the employee from the production EIS the synchronization hub must propagate the change to the financial EIS. However synchronization hubs today may not recognize that the dependents of the fired employee also need to be removed from the financial EIS.

An entry for a dependent may be termed a child entry related to an employee entry which may be termed a parent entry. Even if the dependent is a spouse the dependent may be termed a child entry in terms of the entry s hierarchical relationship to the employee entry. In some systems a dependent child entry may relate to a parent entry a grandparent entry or beyond. Synchronization hubs do not properly track hierarchical relationships among various child parent grandparent and other related entries unless an integration code developer provides explicit software instructions for doing so. For each change in one EIS hierarchically related changes may need to be made in a second EIS. To handle various hierarchically related updates a database programmer or integration developer may write extensive software code to run in a synchronization hub to anticipate hierarchical relationships and modify those relationships to properly propagate changes made in one EIS to a second EIS.

Owners of enterprise information systems may not know why or may not wish to explain why redundant enterprise information systems exist in their organizations. Even so those owners know that the redundant data in the plurality of enterprise information systems must be kept in synch as inexpensively as possible.

From the foregoing discussion it should be apparent that a need exists for an apparatus system and method that facilitate the synchronization of redundant data among a plurality of enterprise information servers. Ideally the apparatus system and method must coo properly propagate data object changes as well as update hierarchically related data objects automatically while avoiding the need for detailed database or integration programming to handle each type of update. Beneficially such an apparatus system and method would automatically synchronize disparate enterprise information systems.

The present invention has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available systems for synchronizing enterprise information systems. Accordingly the present invention has been developed to provide an apparatus system and method for automated identity relationship maintenance that overcome many or all of the above discussed shortcomings in the art.

The apparatus to automatically maintain identity relationships is provided with a plurality of modules configured to functionally execute the necessary steps to automatically maintain identity relationships. These modules in the described embodiments include an identity relationship repository a source adapter a relationship service module a consistency module and an adjustment module. The apparatus may further include a propagation module.

The apparatus in one embodiment is configured to store and maintain unique keys related to business objects stored in a source enterprise information system EIS and a destination EIS.

The apparatus is further configured in one embodiment to search for hierarchically related affected identity relationships within a specified number of hierarchical levels from the target identity relationships. Affected identity relationships are identity relationships that are inconsistent due to changes to the target identity relationship.

In a further embodiment the apparatus may be configured to maintain composite relationships comprising one or more hierarchical levels.

In a further embodiment the apparatus may be configured to maintain a generic business object as a hub object to which business objects in EISs are linked as spokes to the generic business object hub.

A system of the present invention is also presented to automatically maintain identity relationships among disparate enterprise information systems. The system may be embodied by two or more enterprise information systems in combination with a synchronization hub. In particular the system in one embodiment includes a source enterprise information system a destination enterprise information system and a synchronization hub.

The system may further include a source adapter linking the source enterprise information system and the synchronization hub and a destination adapter linking the synchronization hub and the destination enterprise information system.

A method of the present invention is also presented for automatically maintaining identity relationships. The method in the disclosed embodiments substantially includes the steps necessary to carry out the functions presented above with respect to the operation of the described apparatus and system. In one embodiment the method includes providing an identity relationship repository receiving a source business object accessing a target identity relationship determining an affected identity relationship hierarchically related to the target relationship and modifying the affected identity relationship to make the affected identity relationship consistent with the target identity relationship. The method also may include propagating the changes from the source EIS to one or more destination EISs.

In a further embodiment the method includes maintaining composite relationships of a predetermined depth.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

These features and advantages of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Reference to a signal bearing medium may take any form capable of generating a signal causing a signal to be generated or causing execution of a program of machine readable instructions on a digital processing apparatus. A signal bearing medium may be embodied by a transmission line a compact disk digital video disk a magnetic tape a Bernoulli drive a magnetic disk a punch card flash memory integrated circuits or other digital processing apparatus memory device.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

An enterprise information system or EIS comprises one or more information repositories. An information repository may be an information management system a relational database a hierarchical database or the like. An EIS may further comprise computer systems software business logic procedures data entry systems controls forms check clearing machines credit card readers and other types of computer hardware assembled to manage the information in the EIS and the flow of information through the enterprise.

Information or data in the EIS may be stored accessed created updated modified or deleted. In one sense access refers to the reading of data from an information repository. However for purposes of this application access includes all actions that an information repository may perform on data including creating writing storing reading updating modifying copying transferring transcribing translating merging deleting and the like.

In one embodiment source EIS may track order processing for a clothing mail order house. The source EIS may comprise an information repository for storing information about individual orders information about individual customers and information about inventory levels at various regional warehouses. The source EIS includes business logic to compare inventory levels against order trends and to generate inventory replacement orders to anticipate and prevent inventory shortages. The EIS may provide web based forms to consumers and to order processors for order creation. The system may include logic and hardware to track inventory shipments and so forth.

An order processor may be a human computer operator who receives a customer order over the phone through email in person or by some other means. The order processor may receive information about an order including the customer name the desired articles of clothing to include in the order and so forth. The order processor uses computer terminal linked to source EIS to create orders and enter those orders into the source EIS .

In one embodiment source EIS creates a source customer order business object for each customer order. Each business object organizes information to be stored in the source EIS . A business object is a grouping of data stored in an EIS. In some instances a business object may further comprise contextual information about the data contained in the business object. For example a business object may indicate that the contained data has just been created deleted or updated in the information repository of an EIS. In figure one the source customer order is a business object that tracks a single customer order. The business object comprises a unique key for example S25. The unique key or handle uniquely identifies the source customer order across all source customer orders that source EIS manages.

In one embodiment destination EIS is a second EIS which maybe owned and managed by the same enterprise that owns source EIS . Destination EIS may store some information that is duplicative of information stored in source EIS . For example destination EIS stores destination customer orders similar to the source customer orders stored in the source EIS .

Many reasons may exist for storing duplicative information in two EISs . Two enterprises each with its own EIS may merge to form a single enterprise. Merging the two EISs into a single EIS may be cost prohibitive and the new merged enterprise may choose to maintain both EISs to avoid the cost of conversion. Alternatively one EIS may serve a distinct purpose from a second EIS. One EIS may track orders while a second EIS may track financial accounting. In this case the two EISs may not store completely duplicative information but rather share a limited amount of duplicative information.

Regardless of the reason for maintaining multiple EISs an enterprise operates more effectively if duplicative information stored in each EIS is synchronized across all of the EISs in the enterprise. For example source EIS may track customer orders inventory shipments and order processor operators . Destination EIS may track financial information related to customer orders as well as wage data accounts payable and accounts receivable. Each EIS may store information about customer orders and about car individual customers.

In order to keep destination EIS synchronized with source EIS business logic in the source EIS may be configured in a conventional solution to send an email to synchronization operator each time that source EIS creates a new source customer order . The email may comprise the customer name the unique source key associated with the source customer order as well as the particular line items from the source customer order .

The synchronization operator may comprise a human operator that processes the email updates. The synchronization operator may create a new destination customer order in destination EIS using computer terminal . The destination customer order may comprise the customer name from the source customer order as well as other information from the source customer order . The destination customer order may also comprise a unique destination key for example D35 that uniquely identifies the destination customer order among all of the destination customer orders stored in the destination EIS .

In this manner the EIS owners may manually synchronize the two EISs each time that a change to one EIS occurs. For purposes of the examples in this application one EIS is designated as the source EIS while the other is designated as the destination EIS . Those of skill in the art will understand that initial changes may be made in any of the EISs owned by an enterprise and propagated to one or more EISs as needed to synchronize duplicative data.

Synchronization hub may comprise software modules configured to recognize changes in a source EIS and propagate those changes to a destination EIS . Source adapter may link to the update logic of source EIS . Changes to an information repository in source EIS O may result in a function call to software modules in source adapter . For instance source EIS may transmit to source adapter the creation of source customer order along with the associated customer name and unique key for example S25. In the example source customer order is a business object contained in the source EIS .

The source adapter communicates changes in the source EIS for example the creation of source customer order to the synchronization hub . The synchronization hub may maintain its own information repository that correlates changes to business objects stored in the source EIS with business objects in the destination EIS . Synchronization hub selectively propagates changes received from the source adapter to the destination adapter . The destination adapter relays propagated changes to the destination EIS . For example the creation of a source customer order with key S25 is propagated to the destination EIS resulting in the creation of a destination customer order with key D35. Following the creation of the destination customer order the destination EIS may return a creation event business object comprising the unique key for example D35 that the destination EIS uses to uniquely identify the destination customer order. The destination EIS returns the creation event business object to the destination adapter which in turn sends the creation event business object to the synchronization hub .

The synchronization hub maintains identity relationships indicated by dashed lines between two or more EISs. An identity relationship captures the fact that certain object instances e.g. source customer order in source EIS are one and the same logically equivalent substantially similar with respect to instances found in other systems modeling domains e.g. destination customer order in destination EIS . Thus an identity relationship captures the notion of an equivalence relationship across disparate object instances found across multiple EISs. Structurally business object instances in disparate EISs may be considerably different however logically they may both represent the same physical or virtual entity.

An identity relationship may use the unique keys for business objects stored in disparate EISs to logically map a business object in one system to a business object in another system. An identity relationship may track the existence of similar data in two disparate EISs. In the example the source EIS and the destination EIS maintain the same customer order . Each EIS uses a distinct unique key to identify each customer order . Any change to the source customer order should be propagated to destination customer order and vice versa.

Composite relationships are related to identity relationships . An identity relationship defines an equivalence between two objects in disparate EISs. Normally the disparate objects are uniquely defined by a key or index in each EIS. For example an employee record in source EIS may be identified by a unique sixty four bit employee identifier. No other employee record in source EIS may contain the same employee identifier. The destination EIS may maintain a personnel record using a social security number as the unique identifier. The employee record in the source EIS and the personnel record in the destination EIS

A composite relationship defines an equivalence relationship between objects in disparate EISs as well. However the EIS may not use a unique identifier for all objects in its repository. A composite relationship is a relationship that contains roles that refer to composite participants . Composite participants are in turn defined as participants that can only be uniquely identified within the hierarchical context within which they are found. For example the employee record may maintain a spouse record. The spouse record may not have a unique identifier. However the spouse record is unique when considered in the hierarchical context within the employee record. The source and destination EISs may maintain spouse records for the employee record and the personnel record respectively. An equivalence relationship between two secondary objects such as spouse records that uses a primary object in each EIS to define a unique identifier is termed a composite relationship.

In one embodiment order processor creates a new source customer order using terminal . The source customer order is stored in source EIS . The synchronization hub automatically creates a destination customer order in destination EIS . The synchronization hub creates tracks updates and maintains the identity relationship between source customer order and destination customer order .

Source adapter listens for creation modification and deletion events in the source EIS . Many EISs comprise software exits that can be configured to call a configurable software code segment under specified conditions. For example some email client programs allow a user to configure rules that are executed when an email message arrives. One rule may be configured to forward a copy of all received email messages to a secondary email address. Such a rule may execute when a new email message arrives. Similarly the operator of an EIS may configure a software exit to execute specific code segments at the time that certain events take place. The software exit may be scripted code or it may be a compiled high level language code segment.

In one embodiment of the present invention the source EIS is configured to call a software exit following the creation deletion or modification of a business object stored in the source EIS . The source adapter comprises software exits that the source EIS may invoke following the creation deletion or modification of business objects in the source EIS . The operator of the synchronization hub may use standard software exits or may write and configure custom exits for the source adapter according to the needs and design of the synchronization hub .

The synchronization hub manages identity relationships between source EIS and the destination EIS . The synchronization hub propagates changes made in the source EIS to the destination EIS . Examples of changes that may be propagated include the creation of a purchase order the modification of a purchase order the addition of line items to a purchase order the modification of cost amounts for line items in a purchase order and so forth. Some propagated changes may result in the creation deletion or modification of identity relationships maintained by the synchronization hub . Other propagated changes may simply pass data value changes from the source EIS through the synchronization hub to the destination EIS . For example changing the cost of a line item for a purchase order may be propagated to the destination EIS resulting in the modification of a destination business object. However such a change may not require a change to an identity relationship. Synchronization hub may also propagate a change from destination EIS to source EIS or to other EISs.

Synchronization hub comprises various modules configured to manage identity relationships including a business object definition repository an identity relationship definition repository an identity relationship repository a relationship service module a consistency module an adjustment module and a propagation module .

The object definition repository stores the definitions for the business objects that the synchronization hub may receive. An object definition defines the fields also referred to as attributes that a business object may comprise. Object definitions are typically stored in eXtended markup language XML but may be stored in other formats. Object definitions may be referred to as schemas as well.

The identity relationship definition repository stores the definitions for the various identity relationships that the synchronization hub may manage. One identity relationship definition may manage a mapping between purchase orders in the source EIS and purchase authorizations in the destination EIS . An identity relationship definition correlates the business object definitions in one EIS that are equivalent to a different business object definition in a second EIS.

The identity relationship repository stores identity relationship instances. The identity relationship repository may comprise a location in memory or a cache. An identity relationship instance maps a source business object instance in the source EIS along with a unique key for the source business object instance to a destination business object instance in the destination EIS . An identity relationship instance may comprise a unique key from each EIS that the identity relationship instance contains or joins. Each unique key identifies a business object in the respective EIS.

The relationship service module receives business object changes from the source adapter . Business object changes may comprise business object creations deletions and modifications. The relationship service module selects business object definitions from the business object definition repository and identity relationship definitions from the identity relationship definition repository in accordance with the business object change received from the source adapter . The relationship service module also selects a target identity relationship from the identity relationship repository . The target identity relationship relates a business object from the source EIS to a business object in the destination EIS . The relationship service module selects the identity relationship from the identity relationship repository based on the business object changes received from the source adapter . The target identity relationship references a specific business object referenced in the business object change received from the source EIS through the source adapter . The relationship service module updates the target identity relationship in the identity relationship repository according to the business object change.

The consistency module analyzes the identity relationship repository in accordance with the hierarchical definitions defined in the business object definition repository and the identity relationship definition repository . Accordingly the consistency module identifies identity relationships which are inconsistent one with another.

As an example of an inconsistent identity relationship a parent identity relationship may track purchase orders in two distinct EISs. A child identity relationship may track business objects in the two distinct EISs representing a line item of the purchase order. A child identity relationship may track the relationship between the two line item objects one object in each EIS. A delete event for the purchase order in the first EIS may cause the parent identity relationship to be removed. However the child identity relationship may be ignored. The consistency module insures that the child identity relationship as well as the child business objects are deleted. In some EISs a single business object may track a purchase order and the line items for the purchase order while another EIS may track the purchase order and the line items as separate business objects. The consistency module also tracks inconsistent relationships that may arise when objects are represented with distinct genealogies in distinct EISs.

By performing a consistency check the consistency module reduces the amount of operator written software segments needed in the source adapter and in software exits in the source adapter . The consistency module may identify additional creations deletions and updates that should be made to keep an identity relationship consistent with a received business object change.

The adjustment module makes changes to the identity relationships in the identity relationship repository to eliminate inconsistencies discovered by the consistency module . The adjustment module operates according to the direction of the relationship service module and the consistency module . The adjustment module may also create additional business object changes to be propagated to a destination EIS .

The propagation module in one embodiment builds a business object comprising the changes made by the adjustment module and propagates those changes to the destination EIS via the destination adapter . Alternatively the propagation module alters an existing business object to reflect the changes and sends that altered business object to the destination EIS . The propagation module operates according to the direction of the relationship service module the consistency module and the adjustment module . The propagation module uses the information from the identity relationship repository and may comprise logic to selectively propagate only those changes of which the destination EIS is not aware.

Source customer order See is an example of a business object instance. A business object or a business object instance is an actual instantiation of a business object definition. The business object instance contains actual data values. The source customer order of contains a data value for a key namely S25. 

The business object definitions may also store hierarchical relationships between various business objects. For example illustrates a child source business object definition comprising a line item field and a quantity field. A parent child hierarchical relationship connects the parent source business object definition to the child source business object definition. The parent child child hierarchical relationship may be stored as part of a parent business object definition as part of a child business object definition as part of an identity relationship definition or the like. The parent business object definition offers as an example of a business object definition for a purchase order. The purchase order identifies various fields. However the purchase order does not identify individual line items for the purchase order. Rather the individual line items are defined in a child source business object definition . One purchase order may comprise one line item or a dozen line items. There is a one to many relationship between purchase orders and line items. The child source business object definition serves as the definition for all the line items that may be related to a purchase order instance.

In a separate EIS purchase orders may use a different definitional scheme. For example a destination EIS may use a destination business object definition comprising a purchase order number a client number and an array of order items. The order items in the destination business object definition maybe contained in a single business object definition.

The identity relationship definition relates purchase orders in one EIS to purchase orders in a second EIS. In one embodiment the OrderNo field of source business object definition is logically linked to the PurchaseNo field of destination business object definition . The OrderNo field is a key field in parent source business object definition . The PurchaseNo field is a key field in a destination business object definition . Preferably the identity relationship is a definition and not an instance of an identity relationship. The identity relationship definition is stored in the identity relationship definition repository .

The identity relationship definition links the definition for a field in a source business object definition to a field in a destination business object definition . An additional identity relationship definition relates one line item from the source business object definition to an order item of a destination business object definition . Preferably a hierarchical relationship may connect identity relationship definition to identity relationship definition . The hierarchical relationship may be used to locate hierarchically related business object definitions and identity relationship definitions.

Although destination business object definition does not link to a child object in this example a second identity relationship definition may link order items in the destination business object definition to line items in the child source business object definition . In this manner identity relationship definitions link fields from one business object definition to another business object definition.

Various tools and helps may assist those of skill in the art such as integration developers to construct business object definitions for source EISs and destination EISs . Tools may also assist identity relationship designers to map fields from one business object definition to fields in another business object definition. illustrates one way in which business object definitions may be linked using hierarchical relationships and identity relationship definitions. Those of skill in the art will understand that various other methods means and schemes may be used to relate business objects from one EIS to business objects in a second EIS.

An identity relationship instance links the purchase order source business object to the purchase number destination business object . The identity relationship links business objects by storing unique keys . In addition identity relationship stores a generic key related to a generic business object managed by the synchronization hub .

A relationship relates line items from source and destination business object instances. Relationship stores line item source business object key as well as order item destination business object key and generic key . Note that key and key are typically not unique. Thus relationship is a non identity relationship. An identity relationship comprises unique keys that uniquely identify business objects. Unique key uniquely identifies the purchase order source business object . However key is not unique.

A purchase order may comprise three line items. In one EIS the line items may be numbered from zero to two. In a second EIS the line items may be numbered from one to three. An index of the line item by itself does not uniquely identify a line item among all the line items stored in a system. Rather a line item is unique only when joined with the purchase order number. Thus line item 0 of purchase order S25 is unique in one system and is directly related and equivalent to order item 1 of purchase number D35. Relationship is a sub part of composite identity relationship which joins the unique keys of the parent purchase orders with the non unique keys of the line items to build a composite identity relationship that uniquely links line item source business object to order item destination business object .

A composite identity relationship such as composite identity relationship uniquely equates two or more business object fields using a plurality of keys. Typically the parent key in a composite identity is unique and the child key is not unique unless combined with the parent key. A composite identity relationship may include two hierarchical levels as illustrated in or a composite identity relationship may include a larger number of hierarchical levels also referred to as degrees of separation. For example a child object combined with a parent and a grandparent object may form a composite identity relation of three levels.

The method begins by providing an identity relationship repository . In addition the method may provide a business object definition repository and an identity relationship definition repository . Providing the various repositories may include providing a various tools to read XML schemas database schemas as well as tools to build identity relationship definitions. Tools to build identity relationship definitions allow an operator to link fields from source business object definitions to fields in destination business object definitions . Tools may further generate exit software code to initiate the relationship service module to properly process business object changes from source EISs and propagate the changes to destination EISs .

Next the method receives a source business object from a source EIS via a source adapter . An operator may configure the source EIS to call exit software in response to a change in the business objects stored in the source EIS . The source EIS may pass the changes in the form of a business object or as business object changes. The changes may comprise creations deletions or modifications to the source EIS . The exit software in the source adapter may process the business object changes.

In one embodiment an operator writes user code to run as part of the source adapter to explicitly process a source business object received from the source EIS . The user code may identify the business object definition and call a software function in the relationship service module named for example maintainIdentity passing the business object and optionally the business object definition to the maintainIdentity software function.

In legacy software code an operator called a maintainSimple software function to indicate to the relationship service module that a particular source business object reflective of a change in the source EIS belonged to an identity relationship. In legacy software code an operator further called a maintainComposite software function to indicate to the relationship service module that a particular group of source business objects belonged to a composite identity relationship . Also in legacy software code an operator further called special parent child software functions to indicate to the relationship service module the hierarchical relationships of various business objects. The maintainComposite code only operates on two level hierarchies. In other words maintainComposite only operates on parent child relationships. The relationship service module of the present invention is not limited to a two level hierarchy composite relationships.

Advantageously the logic of the consistency module allows an integration developer to simply make a single call to a maintainIdentity function of the relationship service module . The maintainIdentity function call passes the source business object from the source EIS to the relationship service module . The maintainIdentity function call uses the definitions from the business object definition repository to identify identity relationships composite relationships and hierarchically related changes that may affect two three four or more hierarchical levels and properly adjusts those relationships.

The relationship service module uses business object definitions from the business object definition repository See and identity relationship definitions from the identity relationship definition repository to ascertain the correct hierarchical relationships among the various business objects . Using these definition repositories the relationship service module correctly identifies the identity relationship entries applicable to a specific source business object and updates the correct identity relationship entry in the identity relationship repository . In addition the relationship service module in combination with the consistency module properly identify hierarchical inconsistencies using the definitions from the repositories . The relationship service module identifies composite relationships that may span two three four or more hierarchical levels and properly updates equivalent relationships between two EISs.

For example the deletion of purchase order may cause an update to identity relationship . The relationship service module may delete the key stored in identity relationship corresponding to the source business object in this example the key field is S25 . The consistency module may determine that relationship is hierarchically related to identity relationship . The consistency module may further identify that line item source business object and order items destination business object are no longer consistent with the identity relationships . The adjustment module may delete identity relationship . The propagation module may in turn send delete messages to the source and destination EISs for line item source business object and the destination business object .

In another example the source EIS may delete the line item source business object . Such a change may cause the consistency module to determine that the identity relationship is inconsistent since the order item field of the purchase number destination business object no longer exists. The adjustment module may adjust the identity relationship and the propagation module may send a delete message to the destination EIS resulting in the deletion or clearing of the order item field in the purchase number business object .

Advantageously the maintainIdentity function of the relationship service module cooperates with the consistency module to perform at run time many functions that previously had to be hard coded by an integration developer. Consequently the integration developer need not be concerned with whether a business object has an identity relationship or a composite identity relationship. Instead the integration developer is shielded from this complexity and the synchronization hub determines what type of relationship exists and how to resolve any inconsistencies.

The relationship service module processes the source business object comprising changes to the source EIS and determines a business object definition for the source business object selected from the business object definition repository . In one embodiment the source business object contains a business object type or name that the relationship service module uses to determine the correct business object definition . Alternatively the relationship service module may select an identity relationship from the identity relationship repository based on a source key value located in the source business object . The source business object may comprise an action such as create update delete or retrieve. The source business object may further comprise a calling context related to the context in which the business object change was created.

A calling context defines the circumstances under which a business object change is created. For example source EIS may delete a source business object resulting in a call to the source adapter . Such a calling context may be called event delivery specifying that a triggered event caused the creation of the source business object . In addition the source business object action in this case is delete. 

In another instance the source EIS may request information of the synchronization hub using an access request calling context and a retrieve action. Additional calling contexts may further include access response for business objects created by the synchronization hub and propagated to an EIS in response to an access request.

Using the determined business object definition the relationship service module selects an identity relationship definition from the identity relationship definition repository . The identity relationship definition relates the source business object definition to one or more destination business object definitions .

The relationship service module further determines if an identity relationship instance exists for the source business object based on the selected identity relationship definition . The identity relationship instance directly related to anew source business object processed by the relationship service module is termed a target identity relationship. For example if the source EIS deletes parent source business object the identity relationship comprising the source key of S25 is the target identity relationship. The target identity relationship comprises the source key value contained in the source business object .

Initially the relationship service module attempts to locate the target identity relationship that directly relates to the incoming source business object . In some instances the source business object comprises a create action in which case the relationship service module likely does not locate a source target identity relationship instance in the identity relationship repository having the same source key value . In other cases the source business object comprises an updated action or a retrieve action. In these cases the relationship service module likely does find a target identity relationship instance .

If no target identity relationship instance exists the relationship service module creates a target identity relationship instance based on a selected identity relationship definition and comprising a source key value from the source business object . If an identity relationship instance exists the relationship service module updates the existing target identity relationship with the key value from the source business object .

The source business object comprises information about a change to a business object in the source EIS . The source business object may comprise key values that relate to a specific target identity relationship from the identity relationship repository . The relationship service module creates or modifies the target identity relationship instance to reflect the values from the source business object .

Once the target identity relationship entry has been created deleted or modified according to the values in the source business object the identity relationship repository may be inconsistent. For example the deletion of a purchase order source business object See may leave a line item child source business object without a parent. The consistency module searches the identity relationship repository for identity relationship entries that are inconsistent as a result of a changes in the source business object. For example the deletion of a purchase order may necessitate the deletion of the line items related to the purchase order.

The consistency module uses the definitions from the business object definition repository and the identity relationship definition repository as well as the entries in the identity relationship repository to determine an affected identity relationship instance . An affected identity relationship instance is one that is made inconsistent as a result of changes in a source business object from a source EIS . In searching for and determining an affected identity relationship the consistency module searches for hierarchically related identity relationships. For example identity relationship is hierarchically related to identity relationship . Hierarchically related identity relationships include identity relationships related through parent child relationships sibling relationships and combinations of parent child and sibling relationships.

Hierarchically related identity relationships may be separated by one level as in a parent child relationships or several levels as for example in a great grandparent great grandchild relationship. Hierarchically related relationships may also be calculated in terms of degrees of separation. For example a parent child relationship has one degree of separation. A grandparent grandchild relationship has two degrees of separation. Other degrees of separation may be identified that do not follow traditional genealogy naming.

In searching for an affected identity relationship the synchronization hub may be configured to search for all inconsistent relationships or alternatively may be configured to search for inconsistent relationships within a specified number of degrees of separation for example four.

A target identity relationship entry is an identity relationship changed as a direct result of a source business object change received from the source EIS . An affected identity relationship entry is an identity relationship that is no longer consistent with the other identity relationship entries due to a change to the target identity relationship entry. For example source business object directly relates to target identity relationship . Additionally the deletion of identity relationship may cause affected identity relationship to be inconsistent with the other identity relationships in the identity relationship repository .

Once the consistency module determines an affected identity relationship the adjustment module modifies the affected identity relationship to make the affected identity relationship consistent with the target identity relationship . The adjustment module may delete an inconsistent entry create a new entry or modify an existing entry in order to make the affected identity relationship entry consistent with the target identity relationship entry. In the example from the adjustment module may delete affected identity relationship in response to the deletion of the target identity relationship and the resulting inconsistency in the identity relationship repository .

In one embodiment the propagation module may construct a destination business object comprising the changes made to the affected relationship entry and propagate the destination business object to the destination EIS . The destination business object may comprise an action and context similar to the source business object . The propagation module propagates the destination business object to the destination EIS via the destination adapter .

In those cases in which the destination EIS creates a new business object in its own information repository the destination adapter or some other mechanism may capture the destination unique key See used by the destination EIS for the new destination business object and return the destination unique key to the synchronization hub . The relationship service module receives the destination unique key and updates the identity relationships related to the destination business object with the new destination unique key .

The consistency module continues the search for affected identity relationship entries until all identity relationship entries have been searched or until a predetermined number of degrees of separation have been searched. Once the search is exhausted the consistency module completes processing.

The synchronization hub maintains identity relationships among a plurality of enterprise information servers. The hub maintains a repository of identity relationships that identify equivalent database fields in each EIS. As updates in business objects stored in one EIS are made the hub propagates those updates to one or more destination EISs . The synchronization hub may maintain a group of generic entries that act as hub entries for each identity relationship. In addition the hub may link a plurality of spoke entries to each hub entry and propagate changes from one spoke entry to linked destination spoke entries. Using a hub and spoke star mapping of linked identity relationships may improve scalability of the propagation of identity relationship changes.

In some instances a change to a target identity relationship makes an affected identity relationship inconsistent with the target identity relationship. In such an instance the hub automatically identifies the affected identity relationship without explicit software can instructions and acts to remove any inconsistencies. The hub also propagates changes to the affected identity relationship to linked spoke EISs or destination EISs .

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

