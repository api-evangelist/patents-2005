---

title: Tiered and modular approach to operational support systems
abstract: A computer system and techniques are disclosed that provide support for the operations of a modern telecommunication services provider. The computer system includes several software modules arranged in layers that are configured to provide services, such as a data access, workflow, and business-management functions. In some preferred embodiments, data cleansing and enterprise-view functionality are provided. An application program interface is also provided that allows a software program to execute software modules contained in the layers to perform specific tasks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07882209&OS=07882209&RS=07882209
owner: AT&T Intellectual Property II, L.P.
number: 07882209
owner_city: Reno
owner_country: US
publication_date: 20050930
---
The present invention generally relates to operational support systems and more particularly to a tiered and modular approach to developing operational support systems.

Generally an operational support system OSS refers to software that enables the support administration and management of a service providers network. Typically OSSes are used by telecommunication service providers and allow them to create deploy manage and maintain telecommunication services and resources. Over the years service providers have created a multitude of OSS applications and systems for the various services being offered.

Given today s rapidly changing telecommunications environment today s OSS systems are not well suited for change. Current OSSes tend to be difficult to modify costly to maintain and do not provide service providers with flexibility to extend new services and infrastructure easily. These factors have resulted in high operation and maintenance costs and delays in new service offerings and customer activation.

Customers using today s OSS systems also are at a disadvantage. For example the majority of OSSes are not well integrated with other service provider systems and provide very little visibility into specific customer information. In addition customer facing systems such as billing and customer care are typically disconnected from the systems managing the service provider s network and services. As a result customer loyalty and revenue are being impacted.

Hence there is a need for OSS systems to be seamlessly integrated with other service provider systems. There is also a need for OSSes to be built upon a common set of interfaces and standards to support a multitude of new and emerging technologies. For example technologies such as the Internet Protocol IP Asynchronous Transfer Mode ATM frame relay and digital subscriber line DSL are becoming increasingly prevalent in network technologies. In addition service providers have an increased need for feature rich services that can manage an ever increasing number of network resources and protocols while enhancing a customer s quality of service.

A computer system and techniques are disclosed that provide support for the operations of a modern telecommunication services provider. The computer system includes several software modules arranged in layers that are configured to provide services such as a data access workflow and business management functions. In some preferred embodiments data cleansing and enterprise view functionality are provided. An application program interface is also provided that allows a software program to execute the software modules contained in the layers to perform specific tasks.

For example according to one aspect the system includes data access modules wherein each of the data access modules include program instructions that when executed interact with a data source. Each of the data access modules is also callable from an application programming interface that identifies a function of the data access module and the data source. The system also includes workflow modules wherein each of the workflow modules include program instructions that when executed automate provisioning activities of an enterprise. Each of the workflow modules is also callable from the application programming interface which identifies a function of the workflow module. The system also includes business control modules wherein each of the business control modules include program instructions that when executed provide a business control function. Each of the business control modules is callable from the application programming interface and identifies a function of the business control module.

In some preferred embodiments the system also may include data cleansing modules that identify a discord from among a plurality of data sources and also may include enterprise view modules that provide a single view of information stored in a plurality of data sources. Each of the enterprise view modules and data cleansing modules are callable from the application programming interface which identifies a function of the enterprise view module and data cleansing module respectively.

A system as well as articles that include a machine readable medium storing machine readable instructions for implementing the various techniques are disclosed. Details of various embodiments are discussed in greater detail below.

In some embodiments one or more of the following advantages may be present. For example the disclosed techniques may allow a service provider to easily integrate new services and modify existing services due to the modular and layered implementation disclosed.

A further benefit relates to customer service levels. For example a customer using the disclosed techniques may be given greater visibility into customer specific information without having to access multiple service provider system for the same information.

Additional features and advantages will be readily apparent from the following detailed description the accompanying drawings and the claims.

Referring to a computer based operational support system is disclosed. The system includes a server that is configured to include a set of layered software modules that may be used as building blocks for constructing software programs. As shown in a user using an access device over a network may access the server to execute software module functionality.

The layered software modules provide integrated access to unified views of for instance customer ordering billing and service provisioning systems and an ability to monitor control analyze deploy and maintain a communications network. In a preferred embodiment the set of layered software modules are arranged hierarchically and may execute software modules arranged in a layer below it and provide interfaces to functionality to a layer above it.

For example as shown in layered software modules may be arranged hierarchically and include a data access layer a data cleanse layer an enterprise view layer a dark factory layer and a business control layer . Each software module included in a layer may execute functionality included in a lower software layer and provide software functionality to modules in a higher software layer. Thus a level of functional and data abstraction and transparency may be achieved since higher level software modules need not be aware of lower level software module implementations.

An application programming interface API is provided that includes a set of interfaces that allow a software application to execute functionality stored in any of the layered software modules. The interface consists of sets of function definitions procedures variables and data structures that an application program may use to execute functionality in a layer as opposed to executing custom software code written to perform the same task. Thus the API provides an additional level of abstration between lower level and higher level software modules.

In a preferred embodiment as shown in various types of enterprise level information may be accessible to the system . For example in one embodiment shown in a contract database is accessible that includes service level information needed to properly service a customer. A service provider s billing database is accessible that includes customer account receivable and or payable information. In addition an ordering database is accessible that maintains information regarding the type of service ordered. An inventory database also is accessible that provides information as to whether proper network equipment is installed or whether new equipment needs to be installed for a particular customer and service and a provisioning database is accessible that provides information to automatically activate services for customers. Although the example illustrates four separate databases accessible to the system the system is not limited to accessing these four databases and may access any number of service provider or third party databases.

Referring now to the data access layer preferably provides software modules e.g. data interfaces and drivers that allow software applications using the API to retrieve and store data from heterogeneous data stores and software modules that standardize and assemble data needed for the enterprise. In one embodiment for example the data access layer is configured as the bottom layer of the system and converts data from databases and API requests from software applications into the native language of data without requiring the development of custom software code. In addition the software modules included in the data access layer utilize ODBC Open DataBase Connectivity OLE DB Object Linking and Embedding Database JDBC Java Database Connectivity JCA java Connectivity Adapters Web services and similar technologies. The data access layer also includes software modules that standardize and assemble data needed for the enterprise.

As shown in a read adapter is provided as part of the data access layer and reads data from functional data stores such as relational databases ERMs as well as mainframes accessible to the system . For example the read adaptor may be configured to read data from the ordering system shown in . Similarly the read adaptor may be configured to read data from a ticketing system and billing system since both ticketing and billing are functions of an enterprise.

A write adapter is provided as part of the data access layer and stores data into functional data stores such as relational databases CRMs Customer Relationship Management systems as well as mainframes. It will be appreciated by one skilled in the art that although only one read adapter and write adapter are shown in the data access layer may include more than one read adapter and write adaptor to read and write functional data stores respectively from legacy and heterogeneous computing environments.

A converter adapter is provided as part of the data access layer and removes anomalies and duplicates that may exist in enterprise data. In one embodiment the converter adapter may provide a consistent standard way of dealing with single data elements. For example when the information is accessed from multiple functional data stores there may be a requirement to view this information in a consistent manner across the enterprise.

A translation adaptor is provided as part of the data access layer and provides data consistency between various functional data stores. For example two functional data stores may contain information relating to a particular circuit identifier each storing the circuit identifier in a different format e.g. alphanumeric numeric on different legacy systems. The converter adapter using the read adapter may access the circuit identifier from these two functional data stores and provide a consistent image of the data to the enterprise. Once the circuit identifier information is analyzed by the enterprise the translation adaptor transforms the consistent image of the data back to each respective legacy systems data format. The translation adaptor then may use the write adapter to store the circuit identifier and any related information back to each respective legacy system.

Referring now to the data cleanse layer provides software modules that allow a service provider to determine discords among enterprise databases. A discord is defined as a discrepancy or difference between data extracted from individual enterprise databases and data extracted from a most trusted data source or industry standard database that is to be corrected.

As shown in a data extraction module is provided that may extract data from a plurality of enterprise databases and . The data extraction module employs well known techniques in the art such as file dumps Open Database Connectivity ODBC and the like to extract data from databases. In a preferred embodiment the data extraction module extracts data on an atomic level from enterprise databases and and temporarily stores the same in an extracted data staging database . The word atomic is used herein to refer to indivisible and or irreducible data.

A network access polling module is provided that selects a most trusted database from among the several databases accessible to the system . For example as shown in the contract and accounting database may be selected as the most trusted database for specific types of atomic information. The selected most trusted database is used by a business rules module to compare atomic data.

A data analysis module is provided that analyzes information stored in the extracted data staging database . In a preferred embodiment the data analysis module generates cross reference tables and mapping tables that are stored in a data mapping database . The data analysis module preferably utilizes relation building functions such as that disclosed in U.S. Patent Publication No. 2005 0027717 filed Apr. 21 2004 which is incorporated herein by reference in its entirety. The data analysis module may be adapted to operate on any dimension of data and or format of database such as flat files relational files hierarchical files network files and the like. In some embodiments the data analysis module preferably may flatten the extracted data into two 2 dimensions if required.

The business rules module includes a set of rules for determining discords between data extracted from enterprise databases and the most trusted database. As shown in the business rule module uses the cross reference and mapping tables stored in the data mapping database by the data analysis module to identify discords between enterprise data and the most trusted database using the business rules. For example the business rule module may include a business rule that specifies that all U.S. addresses stored in enterprise databases are to have a 5 4 zip code length. Zip code information in databases not containing the 5 4 zip code length are identified as discords. In some embodiments as shown in the business rules module generates a log file that may store the discords for further analysis.

A data modifier module is provided that modifies data extracted from enterprise databases based on identified discords. For example using the previous example the data modifier module may modify atomic data such as the U.S. zip code with an appropriate 5 4 zip code length. Once the atomic data is modified the data modifier module executes the write adapter module of the data access layer to store the modified data back into its source database automatically.

Referring now to the enterprise view layer of the system is disclosed. The enterprise view layer includes software modules that provide views of functional data stores as a single domain. Each software module in the layer may define a specific functional domain of interest. In a preferred embodiment the software modules create sessions for each user request and employ very high speed digital subscriber line VDSL technology to process requests. Although only one software module is shown in it will be appreciated by one skilled in the art that a plurality of modules may be included in the enterprise view layer to view different functional data as a single domain.

For example as shown in a user accessing a Customer Relationship Management CRM system may request contract and provisioning information respectively from the contract database and the provisioning database relating to a customer account using the API by providing an account identifier to an account module . The account module generates a session for the request and connects to enterprise databases using software modules of the data access layer . Once the data access layer modules access the data and there are no discords if data cleansing modules are executed the account information from each of the databases is provided to the account module which in turn amalgamates the information into a single view and provides the same to the requestor.

If a request for customer account information includes a list of customer accounts instead of a single customer account identifier and a corresponding list of information relating to those customer accounts is requested the same account module is executed. In this scenario the account module generates a new session for this request and connects to the databases using the data access layer . The new session generated for the request includes instructions to wait until all data is received from the various databases. Once all of the information is received the account module amalgamates the information and provides the same to the requestor.

Referring now to the dark factory layer of the system is disclosed. The dark factory layer includes a set of software modules that automate provisioning activities of the enterprise and provide communication between various enterprise systems. In addition software modules included in the dark factory layer include error handling and messaging functionality to control the distribution and status of provisioning activities as they are completed. In one embodiment as shown in the dark factory layer includes a workflow module an error handling module a messaging module and a set of workflow templates that include a service order template a restrict restore template an account template a change template an add service template a discount template and a merger template .

Workflow templates are provided that identify the set of data and tasks needed to accomplish an enterprise activity. In a preferred embodiment to order a service a service order is created using a service order template. The service order template is generic and may be used for any type of order. For example a service order requiring a T1 line whether needed for a frame service an IP service or ATM service uses the same service order template . For services that require specific information for example Voice Over IP the service order template may include generic and specific information relating to that type of service.

Other templates included in the system include the disconnect template that identifies tasks and data needed to totally or partial disconnect a customer from a particular service the add service template that identifies tasks and data needed to add additional services to an existing customer contract and to enhance services to customers the account template that identifies tasks and data needed to add a total new service for a new customer and or add a new service for a previous customer and the change template that identifies tasks and data needed to enhance a current service configuration.

Several preferred embodiments of the invention also include the restrict restore template that identifies tasks and data to restrict services or restore services to bad debt customers and thereby has an added advantage of reducing contra revenue to the enterprise. The merger template also is provided that identifies tasks and data needed to process customer mergers and acquisitions. For example in one embodiment the merger template may include tasks and data necessary to automatically merge customer account and inventory information effected by a corporate merger upon request.

The workflow module defines manages and executes workflow processes through the execution of software whose order of execution is driven by a computer representation of the tasks contained in templates. The workflow module controls the flow of work sequences of management activities which form a management business process by determining the scheduling of required events. The workflow module is responsible for business process creation deletion and management of process execution from instantiation through completion and control of the activity of scheduling within the system. In a preferred embodiment the workflow module accepts requests from the API and based on information contained in the templates executes program instructions that invoke a sequence of activities that pass application specific information to other systems for execution.

An error handling module is provided that processes errors that may occur while executing tasks defined in the templates. In the event execution of tasks included in a template fails the error handling module provides a standard way of processing such errors. For example assume a private line service order and a frame relay service order is created in the system. In the event that either order is missing information such as customer contact information the error handling module provides a standard error messaging format and unique code for that missing information that may be used to inform users of the missing information. The standard error message format and codes may be used across the enterprise irrespective of type of user or service.

A messaging module is provided that passes messages between service provider systems. In one embodiment the messaging module uses Web Services Definition Language WSDL and encapsulates system specific messages for processing using SOAP over HTTP. For example assuming a service order having ten components that is distributed across multiple provisioning modules as each provisioning completes its provisioning process the messaging module aggregates each provisioning modules confirmations and provisioning detail information for an assembly.

Referring now to the business management layer of the system is disclosed. The business management layer includes software modules that provide business control for the services generated by the system. This layer also provides interfaces to external applications and databases that are accessible via the application programming interface .

A work list module is provided that identifies tasks that may need manual intervention. For example as discussed previously templates are provided in the dark factory layer that identify tasks that are to be completed to perform an enterprise activity. If during execution of a task a problem occurs that is not automatically corrected the error is sent to the work list module which in turn displays the task on a display device for manual intervention.

A notification module is provided that identifies data items of interest. For example when a status message is sent from one system to another these messages may server as confirmation messages of tasks being initiated or completed. For example assuming a service order having ten components as work components are distributed to provisioning modules the notification module receives message from the provisioning modules indicating that the order is received successfully and is being processed. One advantage of providing this module may be to review how an order processed from its initial state to actual network provisioning.

A tracking module is provided that allows an end user to track the status of orders and tasks as they progress through the system. Several advantages may derive from this module. A customer may using the tracking module is able to determine exactly where their order may be in the system. For example a customer using the tracking module may be able to tell that a particular order is stalled in a data center area of the enterprise.

An exception module is included that provides an enterprise wide standard for transaction error handling. For example if a provisioning module is unable to complete a provisioning task for a particular reason the exception module provides a standard way for identifying and reporting the provisioning failures across all provisioning modules. One advantage of this module may be that fewer people need to understand the intricacies of a process and can focus on the actual event.

A lead to ledger module provides a single enterprise process for lead tracking through accounting. For example in one embodiment the lead to ledger module tracks selling to the customer executing a contract taking a service order provisioning the service order billing and accounting of sales to the ledger. One advantage of providing the lead to ledger module may be that from the time the lead occurs the service provider can track that lead directly to their accounting books.

A control module is provided that identifies when business data is not conforming to service provider controls. For example one control may be that the ordering system never issue an order without first checking whether the customer has executed a valid service provider contract. In the event an order is issued without a valid contract the control module identifies that order and displays the same on a display device for additional analysis.

Various features of the system may be implemented in hardware software or a combination of hardware and software. For example some features of the system may be implemented in one or more computer programs executing on programmable computers. In addition each such computer program may be stored on a storage medium such as read only memory ROM readable by a general or special purpose programmable computer or processor for configuring and operating the computer to perform the functions described above.

Although preferred embodiments of the present invention have been described herein with reference to the accompanying drawings it is to be understood that the invention is not limited to those precise embodiments and that various other changes and modifications may be affected herein by one skilled in the art without departing from the scope or spirit of the invention and that it is intended to claim all such changes and modifications that fall within the scope of the invention.

