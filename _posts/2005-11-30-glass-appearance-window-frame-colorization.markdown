---

title: Glass appearance window frame colorization
abstract: A method for changing a color value and/or level of opacity value of a glass appearance window frame for an application window is described. The method includes steps of determining a defined color value and a defined level of opacity value to apply to a glass appearance window frame and displaying the glass appearance window frame in accordance with the defined color value and the defined level of opacity value. A command may be received to apply the defined color value and the defined level of opacity value to the glass appearance window frame, thereby applying the defined color value and level of opacity value to the glass appearance window frame. Color values and/or level of opacity values may be changed automatically, be application specific, and/or be changed in response to receipt of an input from a user to change one or more portions of a default configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07418668&OS=07418668&RS=07418668
owner: Microsoft Corporation
number: 07418668
owner_city: Redmond
owner_country: US
publication_date: 20051130
---
Today many operating systems utilize a windows based configuration of user interface elements such as application programs. Application windows are a user interface facility of graphical user interface GUI systems. While application windows may vary in appearance across systems they share many common user interface UI visuals attributes such as a frame area with a title bar control containing window management controls the ability to be resized and repositioned and to exist among other application windows associated with different applications. Together multiple application windows can appear simultaneously on the screen even layered on top of each other typically represented by the order each application window was last accessed by a user. When an application window is the window that a user is working with currently its frame appears in an active visual state. This is in contrast to an inactive visual state when the application window is not the window the user is currently working with. These two states typically have different appearances and primarily serve to communicate to the user which application window she is currently working with.

Windows XP by Microsoft Corporation of Redmond Wash. supports the ability to change user interface themes which essentially swaps out all UI visuals with alternate renderings in an operating environment. The themes of Windows XP are different bitmaps. As a user chose a different theme for her desktop environment UI elements of the environment would employ the designated bitmaps for the different UI elements. Windows XP provides the ability to change the appearance of all common window frames and controls and other UI elements allowing for personalization of the operating environment. However a user is limited to the themes provided.

Other operating systems employ a UI environment which is drawn programmatically. Users are provided greater flexibility in personalization as color choice is not limited to supplied bitmaps. Users can effectively dial in any color choice they wished and have that applied to common window frame and controls and other UI elements. However the color choice is a single format applied to a single non glass appearance window frame representation. A user is not supplied with a number of different visual appearances for the UI elements other than the overall color choice.

Increasing a user experience in an operating environment and additional manners for identification of application windows property sheets and dialogs for the user are always under development. Creating real world environments during a user experience facilitates an easier understanding of use of an application window and other user interface elements displayed as part of an operating system. Aspects of the invention include a system for rendering colorization to a glass appearance window frame. Aspects are directed to methods for displaying and or changing a glass appearance window frame s visual appearance in the event of an action and or based upon user defined or system defined values.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. The Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In the following description of various illustrative embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a digital camera a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a pen stylus and tablet microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface is divided into and and interface portion has been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces and redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

The composition of a glass appearance window frame is achieved in part through a supplied bitmap image plus the programmatically generated blur region behind the glass appearance window frame. As shown in the operating environment of application windows A and B are shown within a desktop space . As described herein the Figures illustrate examples of the present invention with respect to application windows. Although not shown in the Figures it should be understood by those skilled in the art that other user interface UI elements utilizing a glass appearance window frame may include one or more aspects of the present invention. For example aspects of the present invention may be used for property sheets dialog boxes a taskbar a sidebar and or a start menu that utilize a glass appearance window frame.

As shown in desktop space is an area or region of a display that allows for the display of application windows corresponding to application programs. Application windows A and B are used by an application program to display content A and B respectively to a user. As shown application window A is partially obscured by application window B that is positioned in front. Application windows A and B are in a Z order configuration in which application window B is higher in the Z order than application window A.

As shown in application window B at the top of Z order is active and the underlying application window A is inactive. A taskbar at the bottom of the display serves as a control region that indicates the application windows that are currently in use including application windows that are displayed in the desktop space as well as any minimized application windows. The taskbar is a specific implementation of an on screen window remote control used to list and enable manipulation of application windows such as activating moving hiding and minimizing. Taskbar is shown to include regions and that are separated by taskbar buttons A C that represent application windows.

Application window A is represented by taskbar button A and application window B is represented by taskbar button B. A hidden application window is represented by taskbar button C. As shown in this example application windows A and B are shown in the desktop space . The file name of the content A of application window A is shown along the title bar area of application window A. The file name of the content B of application window B is shown along the title bar area of application window B. Each file name may be generated by the application program operating the application window and or may be customizable by a user. The same file name for each application window A and B is shown in the corresponding taskbar buttons A and B. Application windows A and B and taskbar buttons A and B include an application icon identifier to allow a user to identify the type of application program running the respective application window.

Application windows A and B are used by application programs to display content A and B respectively to a user. The application program associated with application window A may be a different application program or the same application program corresponding to application window B. Each of application windows A and B is independent of and external to the other application windows A and B. As used herein a first application window is external to a second application window when the first application window is not contained within the second application window and the second application window is not contained within the first application window. It should be understood that a first window is not contained in a second application window if the two application windows merely overlap.

Application windows A and B are shown to include a glass appearance window frame A and B respectively. The glass appearance window frames A and B of application windows A and B may be configured to only be shown around the top of the application windows A and B and or one or more other sides of the application windows A and B. As used herein a glass appearance window frame representation includes a window frame of an application window itself an application window tile in a predefined control region a taskbar a sidebar and a start menu. It should be understood by those skilled in the art that although the illustrative examples described herein refer to application windows and application window tiles the present invention is not so limited to those examples. One or more aspects of the present invention may be used with respect to a start menu a sidebar a taskbar a property sheets and dialog boxes. The taskbar in is also shown in a configuration with a glass appearance window frame.

The glass appearance window frames A and B of application windows A and B and the taskbar are shown being represented by a defined color value and level of opacity value. In a user experience and the rendering of the glass appearance window frame a visual and behavioral element that effectively mimics colorization e.g. color tinting of a glass window is introduced. The configuration of the colorization of the glass appearance window frame may be dynamic changing whether over time or in response to some event. In order to provide greater personalization over the color employed in the operating environment aspects of the invention describes the ability to programmatically introduce a user defined and or system defined color value and level of opacity value into the composition of a glass appearance window frame. Specifically the color value and the level of opacity value are introduced into the programmatically described blur region behind the glass appearance window frame. The resulting appearance is that a color tinting has been applied to the glass appearance window frame. Together the transparency underlying blur reflective highlight and colorization suggest the properties associated with real world glass.

The colorization of the application windows A and B may be part of the composition of common glass appearance window frames and may be a combination of a pre defined bitmap image and a programmatically described blur region behind the glass appearance window frame as described below. In accordance with at least one aspect of the present invention the colorization of the glass appearance window frames change dynamically.

As described above application window A is partially obscured by application window B that is positioned in front since application B is higher in the Z order than application window A. As shown in region shows how the glass appearance window frame B of application window B is transparent in appearance while the content portion B of application window B is not transparent. Content portion B completely covers any underlying image. The visual attributes of transparency highlights and underlying blur associated with glass appearance window frame B surrounding application window B may be applied to other system elements. For example illustrates these same visual attributes in regions and and the buttons A C in the taskbar .

In accordance with at least one aspect of the invention color values may be described using red green and blue RGB component values ranging from 0 255 and the level of opacity e.g. alpha may be described as a percentage value ranging from 0 100 . A percentage value of 0 may correspond to no color into a glass appearance window frame whereas a percentage value of 100 may correspond to a fully opaque color. Together these values may be provided as an aRGB value for application to a blur region behind a glass appearance window frame to create a visual appearance of colorization of the glass appearance window frame. It should be understood by those skilled in the art that any other type of color management system may be employed such as sRGB CMYK and CIElab and that the present invention is not so limited to any one type of color management system. Further any of a number of other manners for representing variations in color and or opacity levels may be employed. Still further other techniques for gradient colorization may be employed where one portion of a glass appearance window frame is one color and or level of opacity while a different portion is a second color and or level of opacity.

In application windows A and B have glass appearance window frames A and B respectively and are represented by taskbar buttons A and B respectively. A hidden e.g. minimized application window is represented by taskbar button C. As shown the glass appearance window frames A and B of the application windows B and B and the regions and and taskbar buttons A C in the taskbar are shown with a visual appearance represented by a slanted line. The visual appearance is representative of a glass appearance window frame with a different applied color value and level of opacity value applied to the blur region behind the glass appearance window frame of the application window.

As shown in region shows how the glass appearance window frames A and B of application window A and B are transparent. In this example the glass appearance window frames A and B of application windows A and B may have a different color value and or a different level of opacity value being applied in comparison to the values applied in . As described below the change in colorization e.g. color value and or level of opacity value from to may be defined by a user and or a system. In addition the color values and or level of opacity values between glass appearance window frames may be application specific. For example all glass appearance window frames for an email application may have a different color value and or level of opacity value than glass appearance window frames for a web browser application or a word processing application. It should be understood by those skilled in the art that the number of application windows shown is merely illustrative and that any number of application windows may be open at a time including those presented on the desktop space .

At step the defined color value to introduce to the glass appearance window frame is received. Moving to step the defined level of opacity values to introduce to the glass appearance window frame is received. At step the defined color value and level of opacity value are applied to the blur region behind the glass appearance window frame. Finally at step the application window is displayed with a glass appearance window frame in accordance with the blur region and the applied defined color and level of opacity values. For example application window A and or B in and or may be the result from step .

It should be understood by those skilled in the art that the process described in may be applied to other glass appearance window frames such as those in a task bar and or associated with a start menu a sidebar a property sheet or a dialog box. Further it should be understood that fewer than all of the steps provided may be employed for different embodiments of the present invention. For example aspects of the present invention include a change to the color of a glass appearance window frame without a change in opacity level. Still further it should be understood that the illustrative example described with reference to is but one example for colorization utilizing a blur region behind a glass appearance window frame. It should be understood by those skilled in the at that the present invention is not so limited to implementation within a blur region behind a glass appearance window frame.

Example A in illustrates an active state colorization of a first application window A and an inactive state colorization of a second application window B. In this example the colorization of the glass appearance window frame A  of application window A may be more opaque than the colorization of the glass appearance window frame B  of application window B. Application windows A and B are represented by taskbar buttons A and B respectively. A hidden e.g. minimized application window is represented by taskbar button C. As application window A is the active application window application window A is at the top of the Z order of the application windows within the desktop space . As such the content A of application window A is not transparent with respect to underlying content such as shown in portion A. The content B of application window B is only exposed in areas not covered by application window A and is partially exposed in areas covered by the glass appearance window frame A  of application window A based upon the level of opacity of the glass appearance window frame A .

As shown the glass appearance window frame B  of application window B and the regions and and taskbar buttons B C in the taskbar are shown with a different visual appearance than the glass appearance window frame A  of application window A and taskbar button A. Because application window A is in an active state colorization its glass appearance window frame A  and corresponding taskbar button A are shown in a different colorization. As previously stated the difference in colorization may be a difference in opaqueness and or color of the glass appearance window frame.

Upon an occurrence of when application window B becomes the active window application window A automatically becomes inactive. Example B in illustrates an end transition from with an inactive state colorization of the first application window A and an active state colorization of the second application window B. In this example since application window B is now the active application window the glass appearance window frame A  of application window A may be less opaque than the glass appearance window frame B  of application window B. Such an occurrence of an event may occur when a user clicks on application window B with an input device.

As application window B is now the active application window application window B is at the top of the Z order of the application windows within the desktop space . As such the content B of application window B is not transparent with respect to underlying content such as shown in portion B. The content A of application window A is only exposed in areas not covered by application window B and is partially exposed in areas covered by the glass appearance window frame B  of application window B based upon the level of opacity of the glass appearance window frame B .

As shown in the glass appearance window frame A  of application window A and the regions and and taskbar buttons A and C in the taskbar are shown with a different visual appearance than the glass appearance window frame B  of application window B and taskbar button B. Because application window B is now in an active state colorization its glass appearance window frame B  and corresponding taskbar button B are shown in a different colorization. As previously stated the difference in colorization may be a difference in opaqueness and or color of the glass appearance window frame.

Proceeding to step a defined inactive color and level of opacity is applied to the glass appearance window frame of the first application window and at step the first application window is displayed in accordance with the applied defined inactive color and level of opacity for the glass appearance window frame of the first application window. At step a determination is made as to whether a command has been received to change the first application window to an active state status. If not the process ends. If a command has been received in step the process moves to step .

At step a defined active color and level of opacity is applied to the glass appearance window frame of the first application window. Moving to step the first application window is displayed in accordance with the applied defined active color and level of opacity for the glass appearance window frame of the first application window. At step a defined inactive color and level of opacity is applied to the glass appearance window frame of the second application window and at step the second application window is displayed in accordance with the applied defined inactive color and level of opacity for the glass appearance window frame of the second application window before the process ends. Although not shown within these Figures it should be understood by those skilled in the art that more than two application windows may be configured within a desktop space and that the present invention is not so limited to one or two application windows.

Proceeding to step a determination is made as to whether the defined color value and level of opacity value for the glass appearance window frame of the second application window is different from the defined color value and level of opacity value of the glass appearance window frame of the first application window. For example an operating system may have a default instruction to apply the same color value and level of opacity value to any window that is opened and displayed within a desktop space. Alternatively an operating system may have a default instruction to apply a different color and level of opacity to new windows that are opened and displayed within a desktop space. For example the choice of color values and or level of opacity values may be user specific and or implemented according to the application utilizing the glass appearance window frame. In such a case all glass appearance window frames for an email application may be displayed in accordance with a first color value and or level of opacity value while all glass appearance window frames for a web browser application or a word processing application may be displayed in accordance with a second color value and or level of opacity value.

Returning to if the defined color value and level of opacity value for a second application window is different from the first application window the process moves to step where a different color and level of opacity in comparison to the first application window is applied to the glass appearance window frame of the second application window. Moving to step the second application window is displayed in accordance with the applied different color and level of opacity for the glass appearance window frame of the second application window before the process ends. Alternatively if the defined color value and level of opacity value for a second application window is not different from the first application window the process moves to step where the same color and level of opacity in comparison to the first application window is applied to the glass appearance window frame of the second application window. At step the second application window is displayed in accordance with the applied same color and level of opacity for the glass appearance window frame of the second application window before the process ends.

Starting at step an application window with a glass appearance window frame is generated. Proceeding to step a default color value and level of opacity value is applied to the blur region behind the glass appearance window frame. At step the application window is displayed in accordance with the blur region and applied default color value and level of opacity value. At step a determination is made as to whether a command has been received to introduce a new color value and or level of opacity value e.g. to change the default configuration. If not the process returns to step . If a command is received in step the process moves to step

At step a new color value and or level of opacity value to introduce to the glass appearance window frame is received. For example a user may decide to change default configuration for the level of opacity of application windows. Proceeding to step the new color value and or level of opacity value is applied to the blur region behind the glass appearance window frame. Finally at step the application window is displayed in accordance with the blur region and applied new color value and or level of opacity value.

It should be understood by those skilled in the art that other variables such as stacked windows obscured windows and or overlapping windows may also be taken into account when rendering colorization of a glass appearance window frame for an application window. Those skilled in the art would appreciate these variables and all the possible configurations that may exist.

With respect to an application programming interface API various aspects of the present invention may be performed by an API. For example public APIs may interface with an operating system to allow the operating system to provide the various features of the present invention. In one embodiment a software architecture stored on one or more computer readable media for processing data representative of a change in the colorization of a glass appearance window frame of an application window may include a component configured to change a color value and or level of opacity value associated with a glass appearance window frame of an application window and an application program interface to access the component. An API may receive a request to change the color value and or level of opacity value associated with a glass appearance window frame of an application window access the necessary function s to perform the operation and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention.

